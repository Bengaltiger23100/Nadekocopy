// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: searches.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nadeko.Microservices {

  /// <summary>Holder for reflection information generated from searches.proto</summary>
  public static partial class SearchesReflection {

    #region Descriptor
    /// <summary>File descriptor for searches.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SearchesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5zZWFyY2hlcy5wcm90bxIUbmFkZWtvLm1pY3Jvc2VydmljZXMaH2dvb2ds",
            "ZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8iFgoUR2V0WW9tYW1hSm9rZVJl",
            "cXVlc3QiGgoKWW9tYW1hSm9rZRIMCgR0ZXh0GAEgASgJIhsKGUdldENodWNr",
            "Tm9ycmlzSm9rZVJlcXVlc3QiHwoPQ2h1Y2tOb3JyaXNKb2tlEgwKBHRleHQY",
            "AiABKAkiFgoUR2V0UmFuZG9tSm9rZVJlcXVlc3QiKgoKUmFuZG9tSm9rZRIM",
            "CgR0ZXh0GAEgASgJEg4KBnNvdXJjZRgCIAEoCSIgCg1Qb2tlYWJSZXF1ZXN0",
            "Eg8KB2FiaWxpdHkYASABKAkiqAEKClBva2VhYkRhdGESEgoIbm90Rm91bmQY",
            "ASABKAhIABI1CgRkYXRhGAIgASgLMiUubmFkZWtvLm1pY3Jvc2VydmljZXMu",
            "UG9rZWFiRGF0YS5EYXRhSAAaRQoERGF0YRIMCgRkZXNjGAEgASgJEhEKCXNo",
            "b3J0RGVzYxgCIAEoCRIMCgRuYW1lGAMgASgJEg4KBnJhdGluZxgEIAEoAkII",
            "CgZSZXN1bHQiHQoMTWFuZ2FSZXF1ZXN0Eg0KBXF1ZXJ5GAEgASgJIsoCCglN",
            "YW5nYURhdGESNAoERGF0YRgBIAEoCzIkLm5hZGVrby5taWNyb3NlcnZpY2Vz",
            "Lk1hbmdhRGF0YS5JbmZvSAASLQoFRXJyb3IYAiABKA4yHC5uYWRla28ubWlj",
            "cm9zZXJ2aWNlcy5FcnJvcnNIABrNAQoESW5mbxIKCgJpZBgBIAEoBRIYChBw",
            "dWJsaXNoaW5nU3RhdHVzGAIgASgJEhUKDWltYWdlVXJsTGFyZ2UYAyABKAkS",
            "FAoMdGl0bGVFbmdsaXNoGAQgASgJEhUKDXRvdGFsQ2hhcHRlcnMYBSABKAUS",
            "FQoNdG90YWx2Vm9sdW1lcxgGIAEoBRIOCgZnZW5yZXMYByADKAkSFAoMYXZl",
            "cmFnZVNjb3JlGAggASgJEgwKBGxpbmsYCSABKAkSEAoIc3lub3BzaXMYCiAB",
            "KAlCCAoGUmVzdWx0Ih0KDE5vdmVsUmVxdWVzdBINCgVxdWVyeRgBIAEoCSKH",
            "AgoJTm92ZWxEYXRhEjQKBERhdGEYASABKAsyJC5uYWRla28ubWljcm9zZXJ2",
            "aWNlcy5Ob3ZlbERhdGEuSW5mb0gAEi0KBUVycm9yGAIgASgOMhwubmFkZWtv",
            "Lm1pY3Jvc2VydmljZXMuRXJyb3JzSAAaigEKBEluZm8SDQoFdGl0bGUYASAB",
            "KAkSEwoLZGVzY3JpcHRpb24YAiABKAkSDwoHYXV0aG9ycxgDIAMoCRIOCgZz",
            "dGF0dXMYBCABKAkSDgoGZ2VucmVzGAUgAygJEhAKCGNvdmVyVXJsGAYgASgJ",
            "Eg0KBXNjb3JlGAcgASgJEgwKBGxpbmsYCCABKAlCCAoGUmVzdWx0Iq8CCglB",
            "bmltZURhdGESNAoERGF0YRgBIAEoCzIkLm5hZGVrby5taWNyb3NlcnZpY2Vz",
            "LkFuaW1lRGF0YS5JbmZvSAASLQoFRXJyb3IYAiABKA4yHC5uYWRla28ubWlj",
            "cm9zZXJ2aWNlcy5FcnJvcnNIABqyAQoESW5mbxIKCgJpZBgBIAEoBRIUCgxh",
            "aXJpbmdTdGF0dXMYAiABKAkSFAoMdGl0bGVFbmdsaXNoGAMgASgJEhUKDXRv",
            "dGFsRXBpc29kZXMYBCABKAUSEAoIc3lub3BzaXMYBSABKAkSFQoNaW1hZ2VV",
            "cmxMYXJnZRgGIAEoCRIOCgZnZW5yZXMYByADKAkSFAoMYXZlcmFnZVNjb3Jl",
            "GAggASgJEgwKBGxpbmsYCSABKAlCCAoGUmVzdWx0IhwKDEFuaW1lUmVxdWVz",
            "dBIMCgRuYW1lGAEgASgJIvUECgtQb2tlbW9uRGF0YRISCghub3RGb3VuZBgB",
            "IAEoCEgAEjYKBGRhdGEYAiABKAsyJi5uYWRla28ubWljcm9zZXJ2aWNlcy5Q",
            "b2tlbW9uRGF0YS5EYXRhSAAajwQKBERhdGESCwoDbnVtGAEgASgFEg8KB3Nw",
            "ZWNpZXMYAiABKAkSDQoFdHlwZXMYAyADKAkSRwoLZ2VuZGVyUmF0aW8YBCAB",
            "KAsyMi5uYWRla28ubWljcm9zZXJ2aWNlcy5Qb2tlbW9uRGF0YS5EYXRhLkdl",
            "bmRlclJhdGlvEkMKCWJhc2VTdGF0cxgFIAEoCzIwLm5hZGVrby5taWNyb3Nl",
            "cnZpY2VzLlBva2Vtb25EYXRhLkRhdGEuQmFzZVN0YXRzEkgKCWFiaWxpdGll",
            "cxgGIAMoCzI1Lm5hZGVrby5taWNyb3NlcnZpY2VzLlBva2Vtb25EYXRhLkRh",
            "dGEuQWJpbGl0aWVzRW50cnkSDwoHaGVpZ2h0TRgHIAEoAhIQCgh3ZWlnaHRL",
            "ZxgIIAEoAhINCgVjb2xvchgJIAEoCRIMCgRldm9zGAogAygJEhEKCWVnZ0dy",
            "b3VwcxgLIAMoCRowCg5BYmlsaXRpZXNFbnRyeRILCgNrZXkYASABKAkSDQoF",
            "dmFsdWUYAiABKAk6AjgBGiMKC0dlbmRlclJhdGlvEgkKAW0YASABKAISCQoB",
            "ZhgCIAEoAhpYCglCYXNlU3RhdHMSCgoCSHAYASABKAUSCwoDQXRrGAIgASgF",
            "EgsKA0RlZhgDIAEoBRILCgNTcGEYBCABKAUSCwoDU3BkGAUgASgFEgsKA1Nw",
            "ZRgGIAEoBUIICgZSZXN1bHQiHgoOUG9rZW1vblJlcXVlc3QSDAoEbmFtZRgB",
            "IAEoCSLZAQoJWGtjZFJlcGx5EjQKBERhdGEYASABKAsyJC5uYWRla28ubWlj",
            "cm9zZXJ2aWNlcy5Ya2NkUmVwbHkuSW5mb0gAEi0KBUVycm9yGAIgASgOMhwu",
            "bmFkZWtvLm1pY3Jvc2VydmljZXMuRXJyb3JzSAAaXQoESW5mbxILCgNudW0Y",
            "ASABKAUSDQoFbW9udGgYAiABKAkSDAoEeWVhchgDIAEoCRIRCglzYWZlVGl0",
            "bGUYBCABKAkSCwoDaW1nGAUgASgJEgsKA2FsdBgGIAEoCUIICgZSZXN1bHQi",
            "HQoLWGtjZFJlcXVlc3QSDgoGbnVtYmVyGAEgASgFIuYCCgpDcnlwdG9EYXRh",
            "EjUKBERhdGEYASABKAsyJS5uYWRla28ubWljcm9zZXJ2aWNlcy5DcnlwdG9E",
            "YXRhLkluZm9IABItCgVFcnJvchgCIAEoDjIcLm5hZGVrby5taWNyb3NlcnZp",
            "Y2VzLkVycm9yc0gAGucBCgRJbmZvEgoKAmlkGAEgASgJEgwKBG5hbWUYAiAB",
            "KAkSDgoGc3ltYm9sGAMgASgJEhMKC3dlYnNpdGVTbHVnGAQgASgJEgwKBHJh",
            "bmsYBSABKAUSEQoJaXNOZWFyZXN0GAYgASgIEhcKD3BlcmNlbnRDaGFuZ2Ux",
            "aBgHIAEoCRIRCgl2b2x1bWUyNGgYCCABKAESFwoPcGVyY2VudENoYW5nZTdk",
            "GAkgASgJEhgKEHBlcmNlbnRDaGFuZ2UyNGgYCiABKAkSDQoFcHJpY2UYCyAB",
            "KAESEQoJbWFya2V0Q2FwGAwgASgBQggKBlJlc3VsdCIdCg1DcnlwdG9SZXF1",
            "ZXN0EgwKBG5hbWUYASABKAki6gIKC1dlYXRoZXJEYXRhEjYKBERhdGEYASAB",
            "KAsyJi5uYWRla28ubWljcm9zZXJ2aWNlcy5XZWF0aGVyRGF0YS5JbmZvSAAS",
            "LQoFRXJyb3IYAiABKA4yHC5uYWRla28ubWljcm9zZXJ2aWNlcy5FcnJvcnNI",
            "ABrpAQoESW5mbxIQCghMb2NhdGlvbhgBIAEoCRIOCgZDb29yZHMYAiABKAkS",
            "EQoJQ29uZGl0aW9uGAMgASgJEhAKCEh1bWlkaXR5GAQgASgBEhEKCVdpbmRT",
            "cGVlZBgFIAEoARITCgtUZW1wZXJhdHVyZRgGIAEoARIPCgdUZW1wTWluGAcg",
            "ASgBEg8KB1RlbXBNYXgYCCABKAESDwoHU3VucmlzZRgJIAEoARIOCgZTdW5z",
            "ZXQYCiABKAESDgoGU291cmNlGAsgASgJEhIKClNvdXJjZUljb24YDCABKAkS",
            "CwoDVXJsGA0gASgJQggKBlJlc3VsdCIfCg5XZWF0aGVyUmVxdWVzdBINCgVR",
            "dWVyeRgBIAEoCSLZAQoMR2V0VGltZVJlcGx5EjcKBERhdGEYASABKAsyJy5u",
            "YWRla28ubWljcm9zZXJ2aWNlcy5HZXRUaW1lUmVwbHkuSW5mb0gAEi0KBUVy",
            "cm9yGAIgASgOMhwubmFkZWtvLm1pY3Jvc2VydmljZXMuRXJyb3JzSAAaVwoE",
            "SW5mbxIPCgdBZGRyZXNzGAEgASgJEhQKDFRpbWVab25lTmFtZRgCIAEoCRIo",
            "CgRUaW1lGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIICgZS",
            "ZXN1bHQiHwoOR2V0VGltZVJlcXVlc3QSDQoFUXVlcnkYASABKAki7AEKCU1v",
            "dmllRGF0YRI0CgREYXRhGAEgASgLMiQubmFkZWtvLm1pY3Jvc2VydmljZXMu",
            "TW92aWVEYXRhLkluZm9IABItCgVFcnJvchgCIAEoDjIcLm5hZGVrby5taWNy",
            "b3NlcnZpY2VzLkVycm9yc0gAGnAKBEluZm8SDgoGUmF0aW5nGAEgASgJEg0K",
            "BUdlbnJlGAIgASgJEgwKBFllYXIYAyABKAkSDgoGUG9zdGVyGAQgASgJEg0K",
            "BVRpdGxlGAUgASgJEgwKBFBsb3QYBiABKAkSDgoGSW1kYklkGAcgASgJQggK",
            "BlJlc3VsdCIdCgxNb3ZpZVJlcXVlc3QSDQoFUXVlcnkYASABKAkixQEKEElt",
            "YWdlU2VhcmNoUmVwbHkSOwoERGF0YRgBIAEoCzIrLm5hZGVrby5taWNyb3Nl",
            "cnZpY2VzLkltYWdlU2VhcmNoUmVwbHkuSW5mb0gAEi0KBUVycm9yGAIgASgO",
            "MhwubmFkZWtvLm1pY3Jvc2VydmljZXMuRXJyb3JzSAAaOwoESW5mbxILCgNV",
            "cmwYASABKAkSFwoPUHJvdmlkZXJJY29uVXJsGAIgASgJEg0KBVF1ZXJ5GAMg",
            "ASgJQggKBlJlc3VsdCIjChJJbWFnZVNlYXJjaFJlcXVlc3QSDQoFUXVlcnkY",
            "ASABKAkiHgoPU2hvcnRlblVybFJlcGx5EgsKA1VybBgBIAEoCSIiChFTaG9y",
            "dGVuVXJsUmVxdWVzdBINCgVRdWVyeRgBIAEoCSLTAgoSR29vZ2xlU2VhcmNo",
            "UmVzdWx0EkEKBERhdGEYASABKAsyMS5uYWRla28ubWljcm9zZXJ2aWNlcy5H",
            "b29nbGVTZWFyY2hSZXN1bHQuRnVsbERhdGFIABItCgVFcnJvchgCIAEoDjIc",
            "Lm5hZGVrby5taWNyb3NlcnZpY2VzLkVycm9yc0gAGsABCghGdWxsRGF0YRIN",
            "CgVRdWVyeRgBIAEoCRIVCg1GdWxsUXVlcnlMaW5rGAIgASgJEhQKDFRvdGFs",
            "UmVzdWx0cxgDIAEoCRJHCgdSZXN1bHRzGAQgAygLMjYubmFkZWtvLm1pY3Jv",
            "c2VydmljZXMuR29vZ2xlU2VhcmNoUmVzdWx0LkZ1bGxEYXRhLkRhdGEaLwoE",
            "RGF0YRILCgNVcmwYASABKAkSDAoETmFtZRgCIAEoCRIMCgRUZXh0GAMgASgJ",
            "QggKBlJlc3VsdCIkChNHb29nbGVTZWFyY2hSZXF1ZXN0Eg0KBVF1ZXJ5GAEg",
            "ASgJIvICCgtNdGdDYXJkRGF0YRI2CgREYXRhGAEgASgLMiYubmFkZWtvLm1p",
            "Y3Jvc2VydmljZXMuTXRnQ2FyZERhdGEuSW5mb0gAEi0KBUVycm9yGAIgASgO",
            "MhwubmFkZWtvLm1pY3Jvc2VydmljZXMuRXJyb3JzSAAa8QEKBEluZm8SSAoJ",
            "U3RvcmVVcmxzGAEgAygLMjUubmFkZWtvLm1pY3Jvc2VydmljZXMuTXRnQ2Fy",
            "ZERhdGEuSW5mby5TdG9yZVVybHNFbnRyeRIMCgRDb3N0GAIgASgJEg0KBVR5",
            "cGVzGAMgASgJEgwKBE5hbWUYBCABKAkSEwoLRGVzY3JpcHRpb24YBSABKAkS",
            "EAoISW1hZ2VVcmwYBiABKAkSDgoGRmxhdm9yGAcgASgJEgsKA1VybBgIIAEo",
            "CRowCg5TdG9yZVVybHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiAB",
            "KAk6AjgBQggKBlJlc3VsdCIfCg5NdGdDYXJkUmVxdWVzdBINCgVRdWVyeRgB",
            "IAEoCSK3AQoTSGVhcnRoc3RvbmVDYXJkRGF0YRJACgREYXRhGAEgASgLMjAu",
            "bmFkZWtvLm1pY3Jvc2VydmljZXMuSGVhcnRoc3RvbmVDYXJkRGF0YS5Ic0Rh",
            "dGFIABItCgVFcnJvchgCIAEoDjIcLm5hZGVrby5taWNyb3NlcnZpY2VzLkVy",
            "cm9yc0gAGiUKBkhzRGF0YRILCgNVcmwYASABKAkSDgoGRmxhdm9yGAIgASgJ",
            "QggKBlJlc3VsdCImChZIZWFydGhzdG9uZUNhcmRSZXF1ZXN0EgwKBE5hbWUY",
            "ASABKAkiqwIKDlVyYmFuRGljdFJlcGx5Ei0KBUVycm9yGAEgASgOMhwubmFk",
            "ZWtvLm1pY3Jvc2VydmljZXMuRXJyb3JzSAASRAoERGF0YRgCIAEoCzI0Lm5h",
            "ZGVrby5taWNyb3NlcnZpY2VzLlVyYmFuRGljdFJlcGx5LkRlZmluaXRpb25z",
            "RGF0YUgAGj4KDVVyYmFuRGljdERhdGESCwoDVXJsGAEgASgJEgwKBFdvcmQY",
            "AiABKAkSEgoKRGVmaW5pdGlvbhgDIAEoCRpaCg9EZWZpbml0aW9uc0RhdGES",
            "RwoLRGVmaW5pdGlvbnMYASADKAsyMi5uYWRla28ubWljcm9zZXJ2aWNlcy5V",
            "cmJhbkRpY3RSZXBseS5VcmJhbkRpY3REYXRhQggKBlJlc3VsdCIhChBVcmJh",
            "bkRpY3RSZXF1ZXN0Eg0KBVF1ZXJ5GAEgASgJIr0BCg5EZWZpbmVSZXNwb25z",
            "ZRI5CgREYXRhGAEgASgLMikubmFkZWtvLm1pY3Jvc2VydmljZXMuRGVmaW5l",
            "UmVzcG9uc2UuSW5mb0gAEi0KBUVycm9yGAIgASgOMhwubmFkZWtvLm1pY3Jv",
            "c2VydmljZXMuRXJyb3JzSAAaNwoESW5mbxIvCgVkYXRhcxgBIAMoCzIgLm5h",
            "ZGVrby5taWNyb3NlcnZpY2VzLkRlZmluZURhdGFCCAoGUmVzdWx0Ih0KDURl",
            "ZmluZVJlcXVlc3QSDAoEV29yZBgBIAEoCSJRCgpEZWZpbmVEYXRhEgwKBFdv",
            "cmQYASABKAkSEgoKRGVmaW5pdGlvbhgCIAEoCRIPCgdFeGFtcGxlGAMgASgJ",
            "EhAKCFdvcmRUeXBlGAQgASgJIpYBCgxDYXRGYWN0UmVwbHkSNwoERGF0YRgB",
            "IAEoCzInLm5hZGVrby5taWNyb3NlcnZpY2VzLkNhdEZhY3RSZXBseS5JbmZv",
            "SAASLQoFRXJyb3IYAiABKA4yHC5uYWRla28ubWljcm9zZXJ2aWNlcy5FcnJv",
            "cnNIABoUCgRJbmZvEgwKBEZhY3QYASABKAlCCAoGUmVzdWx0IhAKDkNhdEZh",
            "Y3RSZXF1ZXN0IpkBCg5XaWtpcGVkaWFSZXBseRI5CgREYXRhGAEgASgLMiku",
            "bmFkZWtvLm1pY3Jvc2VydmljZXMuV2lraXBlZGlhUmVwbHkuSW5mb0gAEi0K",
            "BUVycm9yGAIgASgOMhwubmFkZWtvLm1pY3Jvc2VydmljZXMuRXJyb3JzSAAa",
            "EwoESW5mbxILCgNVcmwYASABKAlCCAoGUmVzdWx0IiEKEFdpa2lwZWRpYVJl",
            "cXVlc3QSDQoFUXVlcnkYASABKAkixAEKCkJpYmxlVmVyc2USNQoERGF0YRgB",
            "IAEoCzIlLm5hZGVrby5taWNyb3NlcnZpY2VzLkJpYmxlVmVyc2UuSW5mb0gA",
            "Ei0KBUVycm9yGAIgASgOMhwubmFkZWtvLm1pY3Jvc2VydmljZXMuRXJyb3Jz",
            "SAAaRgoESW5mbxIQCghCb29rTmFtZRgBIAEoCRIPCgdDaGFwdGVyGAIgASgF",
            "Eg0KBVZlcnNlGAMgASgFEgwKBFRleHQYBCABKAlCCAoGUmVzdWx0IjUKDEJp",
            "YmxlUmVxdWVzdBIMCgRCb29rGAEgASgJEhcKD0NoYXB0ZXJBbmRWZXJzZRgC",
            "IAEoCSJ+Cg1HZXRQaWNSZXF1ZXN0EjkKBFR5cGUYASABKA4yKy5uYWRla28u",
            "bWljcm9zZXJ2aWNlcy5HZXRQaWNSZXF1ZXN0LlBpY1R5cGUiMgoHUGljVHlw",
            "ZRIICgRDYXRzEAASCAoERG9ncxABEgkKBUJpcmRzEAISCAoERm9vZBADIh0K",
            "Dkhvc3RlZFBpY1JlcGx5EgsKA1VybBgBIAEoCSpICgZFcnJvcnMSCwoHVW5r",
            "bm93bhAAEhAKDEludmFsaWRJbnB1dBABEgwKCE5vdEZvdW5kEAISEQoNQXBp",
            "S2V5TWlzc2luZxADMtURCghTZWFyY2hlcxJhChJHZXRSYW5kb21Ib3N0ZWRQ",
            "aWMSIy5uYWRla28ubWljcm9zZXJ2aWNlcy5HZXRQaWNSZXF1ZXN0GiQubmFk",
            "ZWtvLm1pY3Jvc2VydmljZXMuSG9zdGVkUGljUmVwbHkiABJXCg1HZXRCaWJs",
            "ZVZlcnNlEiIubmFkZWtvLm1pY3Jvc2VydmljZXMuQmlibGVSZXF1ZXN0GiAu",
            "bmFkZWtvLm1pY3Jvc2VydmljZXMuQmlibGVWZXJzZSIAEmIKEEdldFdpa2lw",
            "ZWRpYVBhZ2USJi5uYWRla28ubWljcm9zZXJ2aWNlcy5XaWtpcGVkaWFSZXF1",
            "ZXN0GiQubmFkZWtvLm1pY3Jvc2VydmljZXMuV2lraXBlZGlhUmVwbHkiABJY",
            "CgpHZXRDYXRGYWN0EiQubmFkZWtvLm1pY3Jvc2VydmljZXMuQ2F0RmFjdFJl",
            "cXVlc3QaIi5uYWRla28ubWljcm9zZXJ2aWNlcy5DYXRGYWN0UmVwbHkiABJc",
            "Cg1HZXREZWZpbml0aW9uEiMubmFkZWtvLm1pY3Jvc2VydmljZXMuRGVmaW5l",
            "UmVxdWVzdBokLm5hZGVrby5taWNyb3NlcnZpY2VzLkRlZmluZVJlc3BvbnNl",
            "IgASaAoWR2V0VXJiYW5EaWN0RGVmaW5pdGlvbhImLm5hZGVrby5taWNyb3Nl",
            "cnZpY2VzLlVyYmFuRGljdFJlcXVlc3QaJC5uYWRla28ubWljcm9zZXJ2aWNl",
            "cy5VcmJhbkRpY3RSZXBseSIAEm8KEkdldEhlYXJ0aHN0b25lQ2FyZBIsLm5h",
            "ZGVrby5taWNyb3NlcnZpY2VzLkhlYXJ0aHN0b25lQ2FyZFJlcXVlc3QaKS5u",
            "YWRla28ubWljcm9zZXJ2aWNlcy5IZWFydGhzdG9uZUNhcmREYXRhIgASVwoK",
            "R2V0TXRnQ2FyZBIkLm5hZGVrby5taWNyb3NlcnZpY2VzLk10Z0NhcmRSZXF1",
            "ZXN0GiEubmFkZWtvLm1pY3Jvc2VydmljZXMuTXRnQ2FyZERhdGEiABJlCgxT",
            "ZWFyY2hHb29nbGUSKS5uYWRla28ubWljcm9zZXJ2aWNlcy5Hb29nbGVTZWFy",
            "Y2hSZXF1ZXN0GigubmFkZWtvLm1pY3Jvc2VydmljZXMuR29vZ2xlU2VhcmNo",
            "UmVzdWx0IgASXgoKU2hvcnRlblVybBInLm5hZGVrby5taWNyb3NlcnZpY2Vz",
            "LlNob3J0ZW5VcmxSZXF1ZXN0GiUubmFkZWtvLm1pY3Jvc2VydmljZXMuU2hv",
            "cnRlblVybFJlcGx5IgASYQoLSW1hZ2VTZWFyY2gSKC5uYWRla28ubWljcm9z",
            "ZXJ2aWNlcy5JbWFnZVNlYXJjaFJlcXVlc3QaJi5uYWRla28ubWljcm9zZXJ2",
            "aWNlcy5JbWFnZVNlYXJjaFJlcGx5IgASUQoIR2V0TW92aWUSIi5uYWRla28u",
            "bWljcm9zZXJ2aWNlcy5Nb3ZpZVJlcXVlc3QaHy5uYWRla28ubWljcm9zZXJ2",
            "aWNlcy5Nb3ZpZURhdGEiABJVCgdHZXRUaW1lEiQubmFkZWtvLm1pY3Jvc2Vy",
            "dmljZXMuR2V0VGltZVJlcXVlc3QaIi5uYWRla28ubWljcm9zZXJ2aWNlcy5H",
            "ZXRUaW1lUmVwbHkiABJXCgpHZXRXZWF0aGVyEiQubmFkZWtvLm1pY3Jvc2Vy",
            "dmljZXMuV2VhdGhlclJlcXVlc3QaIS5uYWRla28ubWljcm9zZXJ2aWNlcy5X",
            "ZWF0aGVyRGF0YSIAElgKDUdldENyeXB0b0RhdGESIy5uYWRla28ubWljcm9z",
            "ZXJ2aWNlcy5DcnlwdG9SZXF1ZXN0GiAubmFkZWtvLm1pY3Jvc2VydmljZXMu",
            "Q3J5cHRvRGF0YSIAElQKDEdldFhrY2RDb21pYxIhLm5hZGVrby5taWNyb3Nl",
            "cnZpY2VzLlhrY2RSZXF1ZXN0Gh8ubmFkZWtvLm1pY3Jvc2VydmljZXMuWGtj",
            "ZFJlcGx5IgASVwoKR2V0UG9rZW1vbhIkLm5hZGVrby5taWNyb3NlcnZpY2Vz",
            "LlBva2Vtb25SZXF1ZXN0GiEubmFkZWtvLm1pY3Jvc2VydmljZXMuUG9rZW1v",
            "bkRhdGEiABJcChFHZXRQb2tlbW9uQWJpbGl0eRIjLm5hZGVrby5taWNyb3Nl",
            "cnZpY2VzLlBva2VhYlJlcXVlc3QaIC5uYWRla28ubWljcm9zZXJ2aWNlcy5Q",
            "b2tlYWJEYXRhIgASUQoIR2V0QW5pbWUSIi5uYWRla28ubWljcm9zZXJ2aWNl",
            "cy5BbmltZVJlcXVlc3QaHy5uYWRla28ubWljcm9zZXJ2aWNlcy5BbmltZURh",
            "dGEiABJRCghHZXRNYW5nYRIiLm5hZGVrby5taWNyb3NlcnZpY2VzLk1hbmdh",
            "UmVxdWVzdBofLm5hZGVrby5taWNyb3NlcnZpY2VzLk1hbmdhRGF0YSIAElEK",
            "CEdldE5vdmVsEiIubmFkZWtvLm1pY3Jvc2VydmljZXMuTm92ZWxSZXF1ZXN0",
            "Gh8ubmFkZWtvLm1pY3Jvc2VydmljZXMuTm92ZWxEYXRhIgASXwoNR2V0WW9t",
            "YW1hSm9rZRIqLm5hZGVrby5taWNyb3NlcnZpY2VzLkdldFlvbWFtYUpva2VS",
            "ZXF1ZXN0GiAubmFkZWtvLm1pY3Jvc2VydmljZXMuWW9tYW1hSm9rZSIAEm4K",
            "EkdldENodWNrTm9ycmlzSm9rZRIvLm5hZGVrby5taWNyb3NlcnZpY2VzLkdl",
            "dENodWNrTm9ycmlzSm9rZVJlcXVlc3QaJS5uYWRla28ubWljcm9zZXJ2aWNl",
            "cy5DaHVja05vcnJpc0pva2UiABJfCg1HZXRSYW5kb21Kb2tlEioubmFkZWtv",
            "Lm1pY3Jvc2VydmljZXMuR2V0UmFuZG9tSm9rZVJlcXVlc3QaIC5uYWRla28u",
            "bWljcm9zZXJ2aWNlcy5SYW5kb21Kb2tlIgBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Nadeko.Microservices.Errors), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.GetYomamaJokeRequest), global::Nadeko.Microservices.GetYomamaJokeRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.YomamaJoke), global::Nadeko.Microservices.YomamaJoke.Parser, new[]{ "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.GetChuckNorrisJokeRequest), global::Nadeko.Microservices.GetChuckNorrisJokeRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.ChuckNorrisJoke), global::Nadeko.Microservices.ChuckNorrisJoke.Parser, new[]{ "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.GetRandomJokeRequest), global::Nadeko.Microservices.GetRandomJokeRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.RandomJoke), global::Nadeko.Microservices.RandomJoke.Parser, new[]{ "Text", "Source" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.PokeabRequest), global::Nadeko.Microservices.PokeabRequest.Parser, new[]{ "Ability" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.PokeabData), global::Nadeko.Microservices.PokeabData.Parser, new[]{ "NotFound", "Data" }, new[]{ "Result" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.PokeabData.Types.Data), global::Nadeko.Microservices.PokeabData.Types.Data.Parser, new[]{ "Desc", "ShortDesc", "Name", "Rating" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.MangaRequest), global::Nadeko.Microservices.MangaRequest.Parser, new[]{ "Query" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.MangaData), global::Nadeko.Microservices.MangaData.Parser, new[]{ "Data", "Error" }, new[]{ "Result" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.MangaData.Types.Info), global::Nadeko.Microservices.MangaData.Types.Info.Parser, new[]{ "Id", "PublishingStatus", "ImageUrlLarge", "TitleEnglish", "TotalChapters", "TotalvVolumes", "Genres", "AverageScore", "Link", "Synopsis" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.NovelRequest), global::Nadeko.Microservices.NovelRequest.Parser, new[]{ "Query" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.NovelData), global::Nadeko.Microservices.NovelData.Parser, new[]{ "Data", "Error" }, new[]{ "Result" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.NovelData.Types.Info), global::Nadeko.Microservices.NovelData.Types.Info.Parser, new[]{ "Title", "Description", "Authors", "Status", "Genres", "CoverUrl", "Score", "Link" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.AnimeData), global::Nadeko.Microservices.AnimeData.Parser, new[]{ "Data", "Error" }, new[]{ "Result" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.AnimeData.Types.Info), global::Nadeko.Microservices.AnimeData.Types.Info.Parser, new[]{ "Id", "AiringStatus", "TitleEnglish", "TotalEpisodes", "Synopsis", "ImageUrlLarge", "Genres", "AverageScore", "Link" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.AnimeRequest), global::Nadeko.Microservices.AnimeRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.PokemonData), global::Nadeko.Microservices.PokemonData.Parser, new[]{ "NotFound", "Data" }, new[]{ "Result" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.PokemonData.Types.Data), global::Nadeko.Microservices.PokemonData.Types.Data.Parser, new[]{ "Num", "Species", "Types_", "GenderRatio", "BaseStats", "Abilities", "HeightM", "WeightKg", "Color", "Evos", "EggGroups" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.PokemonData.Types.Data.Types.GenderRatio), global::Nadeko.Microservices.PokemonData.Types.Data.Types.GenderRatio.Parser, new[]{ "M", "F" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.PokemonData.Types.Data.Types.BaseStats), global::Nadeko.Microservices.PokemonData.Types.Data.Types.BaseStats.Parser, new[]{ "Hp", "Atk", "Def", "Spa", "Spd", "Spe" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.PokemonRequest), global::Nadeko.Microservices.PokemonRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.XkcdReply), global::Nadeko.Microservices.XkcdReply.Parser, new[]{ "Data", "Error" }, new[]{ "Result" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.XkcdReply.Types.Info), global::Nadeko.Microservices.XkcdReply.Types.Info.Parser, new[]{ "Num", "Month", "Year", "SafeTitle", "Img", "Alt" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.XkcdRequest), global::Nadeko.Microservices.XkcdRequest.Parser, new[]{ "Number" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.CryptoData), global::Nadeko.Microservices.CryptoData.Parser, new[]{ "Data", "Error" }, new[]{ "Result" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.CryptoData.Types.Info), global::Nadeko.Microservices.CryptoData.Types.Info.Parser, new[]{ "Id", "Name", "Symbol", "WebsiteSlug", "Rank", "IsNearest", "PercentChange1H", "Volume24H", "PercentChange7D", "PercentChange24H", "Price", "MarketCap" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.CryptoRequest), global::Nadeko.Microservices.CryptoRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.WeatherData), global::Nadeko.Microservices.WeatherData.Parser, new[]{ "Data", "Error" }, new[]{ "Result" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.WeatherData.Types.Info), global::Nadeko.Microservices.WeatherData.Types.Info.Parser, new[]{ "Location", "Coords", "Condition", "Humidity", "WindSpeed", "Temperature", "TempMin", "TempMax", "Sunrise", "Sunset", "Source", "SourceIcon", "Url" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.WeatherRequest), global::Nadeko.Microservices.WeatherRequest.Parser, new[]{ "Query" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.GetTimeReply), global::Nadeko.Microservices.GetTimeReply.Parser, new[]{ "Data", "Error" }, new[]{ "Result" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.GetTimeReply.Types.Info), global::Nadeko.Microservices.GetTimeReply.Types.Info.Parser, new[]{ "Address", "TimeZoneName", "Time" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.GetTimeRequest), global::Nadeko.Microservices.GetTimeRequest.Parser, new[]{ "Query" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.MovieData), global::Nadeko.Microservices.MovieData.Parser, new[]{ "Data", "Error" }, new[]{ "Result" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.MovieData.Types.Info), global::Nadeko.Microservices.MovieData.Types.Info.Parser, new[]{ "Rating", "Genre", "Year", "Poster", "Title", "Plot", "ImdbId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.MovieRequest), global::Nadeko.Microservices.MovieRequest.Parser, new[]{ "Query" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.ImageSearchReply), global::Nadeko.Microservices.ImageSearchReply.Parser, new[]{ "Data", "Error" }, new[]{ "Result" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.ImageSearchReply.Types.Info), global::Nadeko.Microservices.ImageSearchReply.Types.Info.Parser, new[]{ "Url", "ProviderIconUrl", "Query" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.ImageSearchRequest), global::Nadeko.Microservices.ImageSearchRequest.Parser, new[]{ "Query" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.ShortenUrlReply), global::Nadeko.Microservices.ShortenUrlReply.Parser, new[]{ "Url" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.ShortenUrlRequest), global::Nadeko.Microservices.ShortenUrlRequest.Parser, new[]{ "Query" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.GoogleSearchResult), global::Nadeko.Microservices.GoogleSearchResult.Parser, new[]{ "Data", "Error" }, new[]{ "Result" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.GoogleSearchResult.Types.FullData), global::Nadeko.Microservices.GoogleSearchResult.Types.FullData.Parser, new[]{ "Query", "FullQueryLink", "TotalResults", "Results" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.GoogleSearchResult.Types.FullData.Types.Data), global::Nadeko.Microservices.GoogleSearchResult.Types.FullData.Types.Data.Parser, new[]{ "Url", "Name", "Text" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.GoogleSearchRequest), global::Nadeko.Microservices.GoogleSearchRequest.Parser, new[]{ "Query" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.MtgCardData), global::Nadeko.Microservices.MtgCardData.Parser, new[]{ "Data", "Error" }, new[]{ "Result" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.MtgCardData.Types.Info), global::Nadeko.Microservices.MtgCardData.Types.Info.Parser, new[]{ "StoreUrls", "Cost", "Types_", "Name", "Description", "ImageUrl", "Flavor", "Url" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.MtgCardRequest), global::Nadeko.Microservices.MtgCardRequest.Parser, new[]{ "Query" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.HearthstoneCardData), global::Nadeko.Microservices.HearthstoneCardData.Parser, new[]{ "Data", "Error" }, new[]{ "Result" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.HearthstoneCardData.Types.HsData), global::Nadeko.Microservices.HearthstoneCardData.Types.HsData.Parser, new[]{ "Url", "Flavor" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.HearthstoneCardRequest), global::Nadeko.Microservices.HearthstoneCardRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.UrbanDictReply), global::Nadeko.Microservices.UrbanDictReply.Parser, new[]{ "Error", "Data" }, new[]{ "Result" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.UrbanDictReply.Types.UrbanDictData), global::Nadeko.Microservices.UrbanDictReply.Types.UrbanDictData.Parser, new[]{ "Url", "Word", "Definition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.UrbanDictReply.Types.DefinitionsData), global::Nadeko.Microservices.UrbanDictReply.Types.DefinitionsData.Parser, new[]{ "Definitions" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.UrbanDictRequest), global::Nadeko.Microservices.UrbanDictRequest.Parser, new[]{ "Query" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.DefineResponse), global::Nadeko.Microservices.DefineResponse.Parser, new[]{ "Data", "Error" }, new[]{ "Result" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.DefineResponse.Types.Info), global::Nadeko.Microservices.DefineResponse.Types.Info.Parser, new[]{ "Datas" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.DefineRequest), global::Nadeko.Microservices.DefineRequest.Parser, new[]{ "Word" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.DefineData), global::Nadeko.Microservices.DefineData.Parser, new[]{ "Word", "Definition", "Example", "WordType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.CatFactReply), global::Nadeko.Microservices.CatFactReply.Parser, new[]{ "Data", "Error" }, new[]{ "Result" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.CatFactReply.Types.Info), global::Nadeko.Microservices.CatFactReply.Types.Info.Parser, new[]{ "Fact" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.CatFactRequest), global::Nadeko.Microservices.CatFactRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.WikipediaReply), global::Nadeko.Microservices.WikipediaReply.Parser, new[]{ "Data", "Error" }, new[]{ "Result" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.WikipediaReply.Types.Info), global::Nadeko.Microservices.WikipediaReply.Types.Info.Parser, new[]{ "Url" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.WikipediaRequest), global::Nadeko.Microservices.WikipediaRequest.Parser, new[]{ "Query" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.BibleVerse), global::Nadeko.Microservices.BibleVerse.Parser, new[]{ "Data", "Error" }, new[]{ "Result" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.BibleVerse.Types.Info), global::Nadeko.Microservices.BibleVerse.Types.Info.Parser, new[]{ "BookName", "Chapter", "Verse", "Text" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.BibleRequest), global::Nadeko.Microservices.BibleRequest.Parser, new[]{ "Book", "ChapterAndVerse" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.GetPicRequest), global::Nadeko.Microservices.GetPicRequest.Parser, new[]{ "Type" }, null, new[]{ typeof(global::Nadeko.Microservices.GetPicRequest.Types.PicType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.HostedPicReply), global::Nadeko.Microservices.HostedPicReply.Parser, new[]{ "Url" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Errors {
    [pbr::OriginalName("Unknown")] Unknown = 0,
    [pbr::OriginalName("InvalidInput")] InvalidInput = 1,
    [pbr::OriginalName("NotFound")] NotFound = 2,
    [pbr::OriginalName("ApiKeyMissing")] ApiKeyMissing = 3,
  }

  #endregion

  #region Messages
  public sealed partial class GetYomamaJokeRequest : pb::IMessage<GetYomamaJokeRequest> {
    private static readonly pb::MessageParser<GetYomamaJokeRequest> _parser = new pb::MessageParser<GetYomamaJokeRequest>(() => new GetYomamaJokeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetYomamaJokeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetYomamaJokeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetYomamaJokeRequest(GetYomamaJokeRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetYomamaJokeRequest Clone() {
      return new GetYomamaJokeRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetYomamaJokeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetYomamaJokeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetYomamaJokeRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class YomamaJoke : pb::IMessage<YomamaJoke> {
    private static readonly pb::MessageParser<YomamaJoke> _parser = new pb::MessageParser<YomamaJoke>(() => new YomamaJoke());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YomamaJoke> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YomamaJoke() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YomamaJoke(YomamaJoke other) : this() {
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YomamaJoke Clone() {
      return new YomamaJoke(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YomamaJoke);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YomamaJoke other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YomamaJoke other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetChuckNorrisJokeRequest : pb::IMessage<GetChuckNorrisJokeRequest> {
    private static readonly pb::MessageParser<GetChuckNorrisJokeRequest> _parser = new pb::MessageParser<GetChuckNorrisJokeRequest>(() => new GetChuckNorrisJokeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetChuckNorrisJokeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetChuckNorrisJokeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetChuckNorrisJokeRequest(GetChuckNorrisJokeRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetChuckNorrisJokeRequest Clone() {
      return new GetChuckNorrisJokeRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetChuckNorrisJokeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetChuckNorrisJokeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetChuckNorrisJokeRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ChuckNorrisJoke : pb::IMessage<ChuckNorrisJoke> {
    private static readonly pb::MessageParser<ChuckNorrisJoke> _parser = new pb::MessageParser<ChuckNorrisJoke>(() => new ChuckNorrisJoke());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChuckNorrisJoke> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChuckNorrisJoke() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChuckNorrisJoke(ChuckNorrisJoke other) : this() {
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChuckNorrisJoke Clone() {
      return new ChuckNorrisJoke(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChuckNorrisJoke);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChuckNorrisJoke other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChuckNorrisJoke other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRandomJokeRequest : pb::IMessage<GetRandomJokeRequest> {
    private static readonly pb::MessageParser<GetRandomJokeRequest> _parser = new pb::MessageParser<GetRandomJokeRequest>(() => new GetRandomJokeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRandomJokeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomJokeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomJokeRequest(GetRandomJokeRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomJokeRequest Clone() {
      return new GetRandomJokeRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRandomJokeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRandomJokeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRandomJokeRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class RandomJoke : pb::IMessage<RandomJoke> {
    private static readonly pb::MessageParser<RandomJoke> _parser = new pb::MessageParser<RandomJoke>(() => new RandomJoke());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RandomJoke> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandomJoke() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandomJoke(RandomJoke other) : this() {
      text_ = other.text_;
      source_ = other.source_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandomJoke Clone() {
      return new RandomJoke(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private string source_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RandomJoke);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RandomJoke other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      if (Source != other.Source) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Source);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RandomJoke other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
          case 18: {
            Source = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PokeabRequest : pb::IMessage<PokeabRequest> {
    private static readonly pb::MessageParser<PokeabRequest> _parser = new pb::MessageParser<PokeabRequest>(() => new PokeabRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PokeabRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokeabRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokeabRequest(PokeabRequest other) : this() {
      ability_ = other.ability_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokeabRequest Clone() {
      return new PokeabRequest(this);
    }

    /// <summary>Field number for the "ability" field.</summary>
    public const int AbilityFieldNumber = 1;
    private string ability_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ability {
      get { return ability_; }
      set {
        ability_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PokeabRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PokeabRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ability != other.Ability) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ability.Length != 0) hash ^= Ability.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ability.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ability);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ability.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ability);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PokeabRequest other) {
      if (other == null) {
        return;
      }
      if (other.Ability.Length != 0) {
        Ability = other.Ability;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ability = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PokeabData : pb::IMessage<PokeabData> {
    private static readonly pb::MessageParser<PokeabData> _parser = new pb::MessageParser<PokeabData>(() => new PokeabData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PokeabData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokeabData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokeabData(PokeabData other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.NotFound:
          NotFound = other.NotFound;
          break;
        case ResultOneofCase.Data:
          Data = other.Data.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokeabData Clone() {
      return new PokeabData(this);
    }

    /// <summary>Field number for the "notFound" field.</summary>
    public const int NotFoundFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NotFound {
      get { return resultCase_ == ResultOneofCase.NotFound ? (bool) result_ : false; }
      set {
        result_ = value;
        resultCase_ = ResultOneofCase.NotFound;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.PokeabData.Types.Data Data {
      get { return resultCase_ == ResultOneofCase.Data ? (global::Nadeko.Microservices.PokeabData.Types.Data) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Data;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "Result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      NotFound = 1,
      Data = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PokeabData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PokeabData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NotFound != other.NotFound) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.NotFound) hash ^= NotFound.GetHashCode();
      if (resultCase_ == ResultOneofCase.Data) hash ^= Data.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.NotFound) {
        output.WriteRawTag(8);
        output.WriteBool(NotFound);
      }
      if (resultCase_ == ResultOneofCase.Data) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.NotFound) {
        size += 1 + 1;
      }
      if (resultCase_ == ResultOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PokeabData other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.NotFound:
          NotFound = other.NotFound;
          break;
        case ResultOneofCase.Data:
          if (Data == null) {
            Data = new global::Nadeko.Microservices.PokeabData.Types.Data();
          }
          Data.MergeFrom(other.Data);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NotFound = input.ReadBool();
            break;
          }
          case 18: {
            global::Nadeko.Microservices.PokeabData.Types.Data subBuilder = new global::Nadeko.Microservices.PokeabData.Types.Data();
            if (resultCase_ == ResultOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PokeabData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Data : pb::IMessage<Data> {
        private static readonly pb::MessageParser<Data> _parser = new pb::MessageParser<Data>(() => new Data());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Data> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nadeko.Microservices.PokeabData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Data() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Data(Data other) : this() {
          desc_ = other.desc_;
          shortDesc_ = other.shortDesc_;
          name_ = other.name_;
          rating_ = other.rating_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Data Clone() {
          return new Data(this);
        }

        /// <summary>Field number for the "desc" field.</summary>
        public const int DescFieldNumber = 1;
        private string desc_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Desc {
          get { return desc_; }
          set {
            desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "shortDesc" field.</summary>
        public const int ShortDescFieldNumber = 2;
        private string shortDesc_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ShortDesc {
          get { return shortDesc_; }
          set {
            shortDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 3;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "rating" field.</summary>
        public const int RatingFieldNumber = 4;
        private float rating_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Rating {
          get { return rating_; }
          set {
            rating_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Data);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Data other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Desc != other.Desc) return false;
          if (ShortDesc != other.ShortDesc) return false;
          if (Name != other.Name) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rating, other.Rating)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Desc.Length != 0) hash ^= Desc.GetHashCode();
          if (ShortDesc.Length != 0) hash ^= ShortDesc.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Rating != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rating);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Desc.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Desc);
          }
          if (ShortDesc.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ShortDesc);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Name);
          }
          if (Rating != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(Rating);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Desc.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
          }
          if (ShortDesc.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortDesc);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Rating != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Data other) {
          if (other == null) {
            return;
          }
          if (other.Desc.Length != 0) {
            Desc = other.Desc;
          }
          if (other.ShortDesc.Length != 0) {
            ShortDesc = other.ShortDesc;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Rating != 0F) {
            Rating = other.Rating;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Desc = input.ReadString();
                break;
              }
              case 18: {
                ShortDesc = input.ReadString();
                break;
              }
              case 26: {
                Name = input.ReadString();
                break;
              }
              case 37: {
                Rating = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class MangaRequest : pb::IMessage<MangaRequest> {
    private static readonly pb::MessageParser<MangaRequest> _parser = new pb::MessageParser<MangaRequest>(() => new MangaRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MangaRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MangaRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MangaRequest(MangaRequest other) : this() {
      query_ = other.query_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MangaRequest Clone() {
      return new MangaRequest(this);
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MangaRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MangaRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MangaRequest other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MangaData : pb::IMessage<MangaData> {
    private static readonly pb::MessageParser<MangaData> _parser = new pb::MessageParser<MangaData>(() => new MangaData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MangaData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MangaData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MangaData(MangaData other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          Data = other.Data.Clone();
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MangaData Clone() {
      return new MangaData(this);
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.MangaData.Types.Info Data {
      get { return resultCase_ == ResultOneofCase.Data ? (global::Nadeko.Microservices.MangaData.Types.Info) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Data;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.Errors Error {
      get { return resultCase_ == ResultOneofCase.Error ? (global::Nadeko.Microservices.Errors) result_ : 0; }
      set {
        result_ = value;
        resultCase_ = ResultOneofCase.Error;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "Result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Data = 1,
      Error = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MangaData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MangaData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (Error != other.Error) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Data) hash ^= Data.GetHashCode();
      if (resultCase_ == ResultOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.Data) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MangaData other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          if (Data == null) {
            Data = new global::Nadeko.Microservices.MangaData.Types.Info();
          }
          Data.MergeFrom(other.Data);
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Nadeko.Microservices.MangaData.Types.Info subBuilder = new global::Nadeko.Microservices.MangaData.Types.Info();
            if (resultCase_ == ResultOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
          case 16: {
            result_ = input.ReadEnum();
            resultCase_ = ResultOneofCase.Error;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MangaData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Info : pb::IMessage<Info> {
        private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Info> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nadeko.Microservices.MangaData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info(Info other) : this() {
          id_ = other.id_;
          publishingStatus_ = other.publishingStatus_;
          imageUrlLarge_ = other.imageUrlLarge_;
          titleEnglish_ = other.titleEnglish_;
          totalChapters_ = other.totalChapters_;
          totalvVolumes_ = other.totalvVolumes_;
          genres_ = other.genres_.Clone();
          averageScore_ = other.averageScore_;
          link_ = other.link_;
          synopsis_ = other.synopsis_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info Clone() {
          return new Info(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private int id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "publishingStatus" field.</summary>
        public const int PublishingStatusFieldNumber = 2;
        private string publishingStatus_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PublishingStatus {
          get { return publishingStatus_; }
          set {
            publishingStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "imageUrlLarge" field.</summary>
        public const int ImageUrlLargeFieldNumber = 3;
        private string imageUrlLarge_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ImageUrlLarge {
          get { return imageUrlLarge_; }
          set {
            imageUrlLarge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "titleEnglish" field.</summary>
        public const int TitleEnglishFieldNumber = 4;
        private string titleEnglish_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TitleEnglish {
          get { return titleEnglish_; }
          set {
            titleEnglish_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "totalChapters" field.</summary>
        public const int TotalChaptersFieldNumber = 5;
        private int totalChapters_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TotalChapters {
          get { return totalChapters_; }
          set {
            totalChapters_ = value;
          }
        }

        /// <summary>Field number for the "totalvVolumes" field.</summary>
        public const int TotalvVolumesFieldNumber = 6;
        private int totalvVolumes_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TotalvVolumes {
          get { return totalvVolumes_; }
          set {
            totalvVolumes_ = value;
          }
        }

        /// <summary>Field number for the "genres" field.</summary>
        public const int GenresFieldNumber = 7;
        private static readonly pb::FieldCodec<string> _repeated_genres_codec
            = pb::FieldCodec.ForString(58);
        private readonly pbc::RepeatedField<string> genres_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Genres {
          get { return genres_; }
        }

        /// <summary>Field number for the "averageScore" field.</summary>
        public const int AverageScoreFieldNumber = 8;
        private string averageScore_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AverageScore {
          get { return averageScore_; }
          set {
            averageScore_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "link" field.</summary>
        public const int LinkFieldNumber = 9;
        private string link_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Link {
          get { return link_; }
          set {
            link_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "synopsis" field.</summary>
        public const int SynopsisFieldNumber = 10;
        private string synopsis_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Synopsis {
          get { return synopsis_; }
          set {
            synopsis_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Info);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Info other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (PublishingStatus != other.PublishingStatus) return false;
          if (ImageUrlLarge != other.ImageUrlLarge) return false;
          if (TitleEnglish != other.TitleEnglish) return false;
          if (TotalChapters != other.TotalChapters) return false;
          if (TotalvVolumes != other.TotalvVolumes) return false;
          if(!genres_.Equals(other.genres_)) return false;
          if (AverageScore != other.AverageScore) return false;
          if (Link != other.Link) return false;
          if (Synopsis != other.Synopsis) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (PublishingStatus.Length != 0) hash ^= PublishingStatus.GetHashCode();
          if (ImageUrlLarge.Length != 0) hash ^= ImageUrlLarge.GetHashCode();
          if (TitleEnglish.Length != 0) hash ^= TitleEnglish.GetHashCode();
          if (TotalChapters != 0) hash ^= TotalChapters.GetHashCode();
          if (TotalvVolumes != 0) hash ^= TotalvVolumes.GetHashCode();
          hash ^= genres_.GetHashCode();
          if (AverageScore.Length != 0) hash ^= AverageScore.GetHashCode();
          if (Link.Length != 0) hash ^= Link.GetHashCode();
          if (Synopsis.Length != 0) hash ^= Synopsis.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (PublishingStatus.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(PublishingStatus);
          }
          if (ImageUrlLarge.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(ImageUrlLarge);
          }
          if (TitleEnglish.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(TitleEnglish);
          }
          if (TotalChapters != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(TotalChapters);
          }
          if (TotalvVolumes != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(TotalvVolumes);
          }
          genres_.WriteTo(output, _repeated_genres_codec);
          if (AverageScore.Length != 0) {
            output.WriteRawTag(66);
            output.WriteString(AverageScore);
          }
          if (Link.Length != 0) {
            output.WriteRawTag(74);
            output.WriteString(Link);
          }
          if (Synopsis.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Synopsis);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (PublishingStatus.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PublishingStatus);
          }
          if (ImageUrlLarge.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrlLarge);
          }
          if (TitleEnglish.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TitleEnglish);
          }
          if (TotalChapters != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalChapters);
          }
          if (TotalvVolumes != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalvVolumes);
          }
          size += genres_.CalculateSize(_repeated_genres_codec);
          if (AverageScore.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AverageScore);
          }
          if (Link.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Link);
          }
          if (Synopsis.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Synopsis);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Info other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.PublishingStatus.Length != 0) {
            PublishingStatus = other.PublishingStatus;
          }
          if (other.ImageUrlLarge.Length != 0) {
            ImageUrlLarge = other.ImageUrlLarge;
          }
          if (other.TitleEnglish.Length != 0) {
            TitleEnglish = other.TitleEnglish;
          }
          if (other.TotalChapters != 0) {
            TotalChapters = other.TotalChapters;
          }
          if (other.TotalvVolumes != 0) {
            TotalvVolumes = other.TotalvVolumes;
          }
          genres_.Add(other.genres_);
          if (other.AverageScore.Length != 0) {
            AverageScore = other.AverageScore;
          }
          if (other.Link.Length != 0) {
            Link = other.Link;
          }
          if (other.Synopsis.Length != 0) {
            Synopsis = other.Synopsis;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 18: {
                PublishingStatus = input.ReadString();
                break;
              }
              case 26: {
                ImageUrlLarge = input.ReadString();
                break;
              }
              case 34: {
                TitleEnglish = input.ReadString();
                break;
              }
              case 40: {
                TotalChapters = input.ReadInt32();
                break;
              }
              case 48: {
                TotalvVolumes = input.ReadInt32();
                break;
              }
              case 58: {
                genres_.AddEntriesFrom(input, _repeated_genres_codec);
                break;
              }
              case 66: {
                AverageScore = input.ReadString();
                break;
              }
              case 74: {
                Link = input.ReadString();
                break;
              }
              case 82: {
                Synopsis = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class NovelRequest : pb::IMessage<NovelRequest> {
    private static readonly pb::MessageParser<NovelRequest> _parser = new pb::MessageParser<NovelRequest>(() => new NovelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NovelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NovelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NovelRequest(NovelRequest other) : this() {
      query_ = other.query_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NovelRequest Clone() {
      return new NovelRequest(this);
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NovelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NovelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NovelRequest other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NovelData : pb::IMessage<NovelData> {
    private static readonly pb::MessageParser<NovelData> _parser = new pb::MessageParser<NovelData>(() => new NovelData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NovelData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NovelData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NovelData(NovelData other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          Data = other.Data.Clone();
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NovelData Clone() {
      return new NovelData(this);
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.NovelData.Types.Info Data {
      get { return resultCase_ == ResultOneofCase.Data ? (global::Nadeko.Microservices.NovelData.Types.Info) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Data;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.Errors Error {
      get { return resultCase_ == ResultOneofCase.Error ? (global::Nadeko.Microservices.Errors) result_ : 0; }
      set {
        result_ = value;
        resultCase_ = ResultOneofCase.Error;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "Result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Data = 1,
      Error = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NovelData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NovelData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (Error != other.Error) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Data) hash ^= Data.GetHashCode();
      if (resultCase_ == ResultOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.Data) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NovelData other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          if (Data == null) {
            Data = new global::Nadeko.Microservices.NovelData.Types.Info();
          }
          Data.MergeFrom(other.Data);
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Nadeko.Microservices.NovelData.Types.Info subBuilder = new global::Nadeko.Microservices.NovelData.Types.Info();
            if (resultCase_ == ResultOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
          case 16: {
            result_ = input.ReadEnum();
            resultCase_ = ResultOneofCase.Error;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NovelData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Info : pb::IMessage<Info> {
        private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Info> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nadeko.Microservices.NovelData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info(Info other) : this() {
          title_ = other.title_;
          description_ = other.description_;
          authors_ = other.authors_.Clone();
          status_ = other.status_;
          genres_ = other.genres_.Clone();
          coverUrl_ = other.coverUrl_;
          score_ = other.score_;
          link_ = other.link_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info Clone() {
          return new Info(this);
        }

        /// <summary>Field number for the "title" field.</summary>
        public const int TitleFieldNumber = 1;
        private string title_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Title {
          get { return title_; }
          set {
            title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 2;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "authors" field.</summary>
        public const int AuthorsFieldNumber = 3;
        private static readonly pb::FieldCodec<string> _repeated_authors_codec
            = pb::FieldCodec.ForString(26);
        private readonly pbc::RepeatedField<string> authors_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Authors {
          get { return authors_; }
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 4;
        private string status_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Status {
          get { return status_; }
          set {
            status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "genres" field.</summary>
        public const int GenresFieldNumber = 5;
        private static readonly pb::FieldCodec<string> _repeated_genres_codec
            = pb::FieldCodec.ForString(42);
        private readonly pbc::RepeatedField<string> genres_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Genres {
          get { return genres_; }
        }

        /// <summary>Field number for the "coverUrl" field.</summary>
        public const int CoverUrlFieldNumber = 6;
        private string coverUrl_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CoverUrl {
          get { return coverUrl_; }
          set {
            coverUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "score" field.</summary>
        public const int ScoreFieldNumber = 7;
        private string score_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Score {
          get { return score_; }
          set {
            score_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "link" field.</summary>
        public const int LinkFieldNumber = 8;
        private string link_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Link {
          get { return link_; }
          set {
            link_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Info);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Info other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Title != other.Title) return false;
          if (Description != other.Description) return false;
          if(!authors_.Equals(other.authors_)) return false;
          if (Status != other.Status) return false;
          if(!genres_.Equals(other.genres_)) return false;
          if (CoverUrl != other.CoverUrl) return false;
          if (Score != other.Score) return false;
          if (Link != other.Link) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Title.Length != 0) hash ^= Title.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          hash ^= authors_.GetHashCode();
          if (Status.Length != 0) hash ^= Status.GetHashCode();
          hash ^= genres_.GetHashCode();
          if (CoverUrl.Length != 0) hash ^= CoverUrl.GetHashCode();
          if (Score.Length != 0) hash ^= Score.GetHashCode();
          if (Link.Length != 0) hash ^= Link.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Title.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Title);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Description);
          }
          authors_.WriteTo(output, _repeated_authors_codec);
          if (Status.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Status);
          }
          genres_.WriteTo(output, _repeated_genres_codec);
          if (CoverUrl.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(CoverUrl);
          }
          if (Score.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(Score);
          }
          if (Link.Length != 0) {
            output.WriteRawTag(66);
            output.WriteString(Link);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Title.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          size += authors_.CalculateSize(_repeated_authors_codec);
          if (Status.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
          }
          size += genres_.CalculateSize(_repeated_genres_codec);
          if (CoverUrl.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CoverUrl);
          }
          if (Score.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Score);
          }
          if (Link.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Link);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Info other) {
          if (other == null) {
            return;
          }
          if (other.Title.Length != 0) {
            Title = other.Title;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          authors_.Add(other.authors_);
          if (other.Status.Length != 0) {
            Status = other.Status;
          }
          genres_.Add(other.genres_);
          if (other.CoverUrl.Length != 0) {
            CoverUrl = other.CoverUrl;
          }
          if (other.Score.Length != 0) {
            Score = other.Score;
          }
          if (other.Link.Length != 0) {
            Link = other.Link;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Title = input.ReadString();
                break;
              }
              case 18: {
                Description = input.ReadString();
                break;
              }
              case 26: {
                authors_.AddEntriesFrom(input, _repeated_authors_codec);
                break;
              }
              case 34: {
                Status = input.ReadString();
                break;
              }
              case 42: {
                genres_.AddEntriesFrom(input, _repeated_genres_codec);
                break;
              }
              case 50: {
                CoverUrl = input.ReadString();
                break;
              }
              case 58: {
                Score = input.ReadString();
                break;
              }
              case 66: {
                Link = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class AnimeData : pb::IMessage<AnimeData> {
    private static readonly pb::MessageParser<AnimeData> _parser = new pb::MessageParser<AnimeData>(() => new AnimeData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimeData(AnimeData other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          Data = other.Data.Clone();
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimeData Clone() {
      return new AnimeData(this);
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.AnimeData.Types.Info Data {
      get { return resultCase_ == ResultOneofCase.Data ? (global::Nadeko.Microservices.AnimeData.Types.Info) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Data;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.Errors Error {
      get { return resultCase_ == ResultOneofCase.Error ? (global::Nadeko.Microservices.Errors) result_ : 0; }
      set {
        result_ = value;
        resultCase_ = ResultOneofCase.Error;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "Result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Data = 1,
      Error = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (Error != other.Error) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Data) hash ^= Data.GetHashCode();
      if (resultCase_ == ResultOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.Data) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimeData other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          if (Data == null) {
            Data = new global::Nadeko.Microservices.AnimeData.Types.Info();
          }
          Data.MergeFrom(other.Data);
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Nadeko.Microservices.AnimeData.Types.Info subBuilder = new global::Nadeko.Microservices.AnimeData.Types.Info();
            if (resultCase_ == ResultOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
          case 16: {
            result_ = input.ReadEnum();
            resultCase_ = ResultOneofCase.Error;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AnimeData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Info : pb::IMessage<Info> {
        private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Info> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nadeko.Microservices.AnimeData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info(Info other) : this() {
          id_ = other.id_;
          airingStatus_ = other.airingStatus_;
          titleEnglish_ = other.titleEnglish_;
          totalEpisodes_ = other.totalEpisodes_;
          synopsis_ = other.synopsis_;
          imageUrlLarge_ = other.imageUrlLarge_;
          genres_ = other.genres_.Clone();
          averageScore_ = other.averageScore_;
          link_ = other.link_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info Clone() {
          return new Info(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private int id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "airingStatus" field.</summary>
        public const int AiringStatusFieldNumber = 2;
        private string airingStatus_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AiringStatus {
          get { return airingStatus_; }
          set {
            airingStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "titleEnglish" field.</summary>
        public const int TitleEnglishFieldNumber = 3;
        private string titleEnglish_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TitleEnglish {
          get { return titleEnglish_; }
          set {
            titleEnglish_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "totalEpisodes" field.</summary>
        public const int TotalEpisodesFieldNumber = 4;
        private int totalEpisodes_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TotalEpisodes {
          get { return totalEpisodes_; }
          set {
            totalEpisodes_ = value;
          }
        }

        /// <summary>Field number for the "synopsis" field.</summary>
        public const int SynopsisFieldNumber = 5;
        private string synopsis_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Synopsis {
          get { return synopsis_; }
          set {
            synopsis_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "imageUrlLarge" field.</summary>
        public const int ImageUrlLargeFieldNumber = 6;
        private string imageUrlLarge_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ImageUrlLarge {
          get { return imageUrlLarge_; }
          set {
            imageUrlLarge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "genres" field.</summary>
        public const int GenresFieldNumber = 7;
        private static readonly pb::FieldCodec<string> _repeated_genres_codec
            = pb::FieldCodec.ForString(58);
        private readonly pbc::RepeatedField<string> genres_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Genres {
          get { return genres_; }
        }

        /// <summary>Field number for the "averageScore" field.</summary>
        public const int AverageScoreFieldNumber = 8;
        private string averageScore_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AverageScore {
          get { return averageScore_; }
          set {
            averageScore_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "link" field.</summary>
        public const int LinkFieldNumber = 9;
        private string link_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Link {
          get { return link_; }
          set {
            link_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Info);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Info other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (AiringStatus != other.AiringStatus) return false;
          if (TitleEnglish != other.TitleEnglish) return false;
          if (TotalEpisodes != other.TotalEpisodes) return false;
          if (Synopsis != other.Synopsis) return false;
          if (ImageUrlLarge != other.ImageUrlLarge) return false;
          if(!genres_.Equals(other.genres_)) return false;
          if (AverageScore != other.AverageScore) return false;
          if (Link != other.Link) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (AiringStatus.Length != 0) hash ^= AiringStatus.GetHashCode();
          if (TitleEnglish.Length != 0) hash ^= TitleEnglish.GetHashCode();
          if (TotalEpisodes != 0) hash ^= TotalEpisodes.GetHashCode();
          if (Synopsis.Length != 0) hash ^= Synopsis.GetHashCode();
          if (ImageUrlLarge.Length != 0) hash ^= ImageUrlLarge.GetHashCode();
          hash ^= genres_.GetHashCode();
          if (AverageScore.Length != 0) hash ^= AverageScore.GetHashCode();
          if (Link.Length != 0) hash ^= Link.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (AiringStatus.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(AiringStatus);
          }
          if (TitleEnglish.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(TitleEnglish);
          }
          if (TotalEpisodes != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(TotalEpisodes);
          }
          if (Synopsis.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Synopsis);
          }
          if (ImageUrlLarge.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(ImageUrlLarge);
          }
          genres_.WriteTo(output, _repeated_genres_codec);
          if (AverageScore.Length != 0) {
            output.WriteRawTag(66);
            output.WriteString(AverageScore);
          }
          if (Link.Length != 0) {
            output.WriteRawTag(74);
            output.WriteString(Link);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (AiringStatus.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AiringStatus);
          }
          if (TitleEnglish.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TitleEnglish);
          }
          if (TotalEpisodes != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalEpisodes);
          }
          if (Synopsis.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Synopsis);
          }
          if (ImageUrlLarge.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrlLarge);
          }
          size += genres_.CalculateSize(_repeated_genres_codec);
          if (AverageScore.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AverageScore);
          }
          if (Link.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Link);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Info other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.AiringStatus.Length != 0) {
            AiringStatus = other.AiringStatus;
          }
          if (other.TitleEnglish.Length != 0) {
            TitleEnglish = other.TitleEnglish;
          }
          if (other.TotalEpisodes != 0) {
            TotalEpisodes = other.TotalEpisodes;
          }
          if (other.Synopsis.Length != 0) {
            Synopsis = other.Synopsis;
          }
          if (other.ImageUrlLarge.Length != 0) {
            ImageUrlLarge = other.ImageUrlLarge;
          }
          genres_.Add(other.genres_);
          if (other.AverageScore.Length != 0) {
            AverageScore = other.AverageScore;
          }
          if (other.Link.Length != 0) {
            Link = other.Link;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 18: {
                AiringStatus = input.ReadString();
                break;
              }
              case 26: {
                TitleEnglish = input.ReadString();
                break;
              }
              case 32: {
                TotalEpisodes = input.ReadInt32();
                break;
              }
              case 42: {
                Synopsis = input.ReadString();
                break;
              }
              case 50: {
                ImageUrlLarge = input.ReadString();
                break;
              }
              case 58: {
                genres_.AddEntriesFrom(input, _repeated_genres_codec);
                break;
              }
              case 66: {
                AverageScore = input.ReadString();
                break;
              }
              case 74: {
                Link = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class AnimeRequest : pb::IMessage<AnimeRequest> {
    private static readonly pb::MessageParser<AnimeRequest> _parser = new pb::MessageParser<AnimeRequest>(() => new AnimeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimeRequest(AnimeRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimeRequest Clone() {
      return new AnimeRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PokemonData : pb::IMessage<PokemonData> {
    private static readonly pb::MessageParser<PokemonData> _parser = new pb::MessageParser<PokemonData>(() => new PokemonData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PokemonData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonData(PokemonData other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.NotFound:
          NotFound = other.NotFound;
          break;
        case ResultOneofCase.Data:
          Data = other.Data.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonData Clone() {
      return new PokemonData(this);
    }

    /// <summary>Field number for the "notFound" field.</summary>
    public const int NotFoundFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NotFound {
      get { return resultCase_ == ResultOneofCase.NotFound ? (bool) result_ : false; }
      set {
        result_ = value;
        resultCase_ = ResultOneofCase.NotFound;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.PokemonData.Types.Data Data {
      get { return resultCase_ == ResultOneofCase.Data ? (global::Nadeko.Microservices.PokemonData.Types.Data) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Data;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "Result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      NotFound = 1,
      Data = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PokemonData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PokemonData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NotFound != other.NotFound) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.NotFound) hash ^= NotFound.GetHashCode();
      if (resultCase_ == ResultOneofCase.Data) hash ^= Data.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.NotFound) {
        output.WriteRawTag(8);
        output.WriteBool(NotFound);
      }
      if (resultCase_ == ResultOneofCase.Data) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.NotFound) {
        size += 1 + 1;
      }
      if (resultCase_ == ResultOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PokemonData other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.NotFound:
          NotFound = other.NotFound;
          break;
        case ResultOneofCase.Data:
          if (Data == null) {
            Data = new global::Nadeko.Microservices.PokemonData.Types.Data();
          }
          Data.MergeFrom(other.Data);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NotFound = input.ReadBool();
            break;
          }
          case 18: {
            global::Nadeko.Microservices.PokemonData.Types.Data subBuilder = new global::Nadeko.Microservices.PokemonData.Types.Data();
            if (resultCase_ == ResultOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PokemonData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Data : pb::IMessage<Data> {
        private static readonly pb::MessageParser<Data> _parser = new pb::MessageParser<Data>(() => new Data());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Data> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nadeko.Microservices.PokemonData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Data() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Data(Data other) : this() {
          num_ = other.num_;
          species_ = other.species_;
          types_ = other.types_.Clone();
          genderRatio_ = other.genderRatio_ != null ? other.genderRatio_.Clone() : null;
          baseStats_ = other.baseStats_ != null ? other.baseStats_.Clone() : null;
          abilities_ = other.abilities_.Clone();
          heightM_ = other.heightM_;
          weightKg_ = other.weightKg_;
          color_ = other.color_;
          evos_ = other.evos_.Clone();
          eggGroups_ = other.eggGroups_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Data Clone() {
          return new Data(this);
        }

        /// <summary>Field number for the "num" field.</summary>
        public const int NumFieldNumber = 1;
        private int num_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Num {
          get { return num_; }
          set {
            num_ = value;
          }
        }

        /// <summary>Field number for the "species" field.</summary>
        public const int SpeciesFieldNumber = 2;
        private string species_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Species {
          get { return species_; }
          set {
            species_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "types" field.</summary>
        public const int Types_FieldNumber = 3;
        private static readonly pb::FieldCodec<string> _repeated_types_codec
            = pb::FieldCodec.ForString(26);
        private readonly pbc::RepeatedField<string> types_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Types_ {
          get { return types_; }
        }

        /// <summary>Field number for the "genderRatio" field.</summary>
        public const int GenderRatioFieldNumber = 4;
        private global::Nadeko.Microservices.PokemonData.Types.Data.Types.GenderRatio genderRatio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Nadeko.Microservices.PokemonData.Types.Data.Types.GenderRatio GenderRatio {
          get { return genderRatio_; }
          set {
            genderRatio_ = value;
          }
        }

        /// <summary>Field number for the "baseStats" field.</summary>
        public const int BaseStatsFieldNumber = 5;
        private global::Nadeko.Microservices.PokemonData.Types.Data.Types.BaseStats baseStats_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Nadeko.Microservices.PokemonData.Types.Data.Types.BaseStats BaseStats {
          get { return baseStats_; }
          set {
            baseStats_ = value;
          }
        }

        /// <summary>Field number for the "abilities" field.</summary>
        public const int AbilitiesFieldNumber = 6;
        private static readonly pbc::MapField<string, string>.Codec _map_abilities_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);
        private readonly pbc::MapField<string, string> abilities_ = new pbc::MapField<string, string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, string> Abilities {
          get { return abilities_; }
        }

        /// <summary>Field number for the "heightM" field.</summary>
        public const int HeightMFieldNumber = 7;
        private float heightM_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float HeightM {
          get { return heightM_; }
          set {
            heightM_ = value;
          }
        }

        /// <summary>Field number for the "weightKg" field.</summary>
        public const int WeightKgFieldNumber = 8;
        private float weightKg_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float WeightKg {
          get { return weightKg_; }
          set {
            weightKg_ = value;
          }
        }

        /// <summary>Field number for the "color" field.</summary>
        public const int ColorFieldNumber = 9;
        private string color_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Color {
          get { return color_; }
          set {
            color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "evos" field.</summary>
        public const int EvosFieldNumber = 10;
        private static readonly pb::FieldCodec<string> _repeated_evos_codec
            = pb::FieldCodec.ForString(82);
        private readonly pbc::RepeatedField<string> evos_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Evos {
          get { return evos_; }
        }

        /// <summary>Field number for the "eggGroups" field.</summary>
        public const int EggGroupsFieldNumber = 11;
        private static readonly pb::FieldCodec<string> _repeated_eggGroups_codec
            = pb::FieldCodec.ForString(90);
        private readonly pbc::RepeatedField<string> eggGroups_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> EggGroups {
          get { return eggGroups_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Data);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Data other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Num != other.Num) return false;
          if (Species != other.Species) return false;
          if(!types_.Equals(other.types_)) return false;
          if (!object.Equals(GenderRatio, other.GenderRatio)) return false;
          if (!object.Equals(BaseStats, other.BaseStats)) return false;
          if (!Abilities.Equals(other.Abilities)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeightM, other.HeightM)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WeightKg, other.WeightKg)) return false;
          if (Color != other.Color) return false;
          if(!evos_.Equals(other.evos_)) return false;
          if(!eggGroups_.Equals(other.eggGroups_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Num != 0) hash ^= Num.GetHashCode();
          if (Species.Length != 0) hash ^= Species.GetHashCode();
          hash ^= types_.GetHashCode();
          if (genderRatio_ != null) hash ^= GenderRatio.GetHashCode();
          if (baseStats_ != null) hash ^= BaseStats.GetHashCode();
          hash ^= Abilities.GetHashCode();
          if (HeightM != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeightM);
          if (WeightKg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WeightKg);
          if (Color.Length != 0) hash ^= Color.GetHashCode();
          hash ^= evos_.GetHashCode();
          hash ^= eggGroups_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Num != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Num);
          }
          if (Species.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Species);
          }
          types_.WriteTo(output, _repeated_types_codec);
          if (genderRatio_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(GenderRatio);
          }
          if (baseStats_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(BaseStats);
          }
          abilities_.WriteTo(output, _map_abilities_codec);
          if (HeightM != 0F) {
            output.WriteRawTag(61);
            output.WriteFloat(HeightM);
          }
          if (WeightKg != 0F) {
            output.WriteRawTag(69);
            output.WriteFloat(WeightKg);
          }
          if (Color.Length != 0) {
            output.WriteRawTag(74);
            output.WriteString(Color);
          }
          evos_.WriteTo(output, _repeated_evos_codec);
          eggGroups_.WriteTo(output, _repeated_eggGroups_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Num != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
          }
          if (Species.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Species);
          }
          size += types_.CalculateSize(_repeated_types_codec);
          if (genderRatio_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GenderRatio);
          }
          if (baseStats_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseStats);
          }
          size += abilities_.CalculateSize(_map_abilities_codec);
          if (HeightM != 0F) {
            size += 1 + 4;
          }
          if (WeightKg != 0F) {
            size += 1 + 4;
          }
          if (Color.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
          }
          size += evos_.CalculateSize(_repeated_evos_codec);
          size += eggGroups_.CalculateSize(_repeated_eggGroups_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Data other) {
          if (other == null) {
            return;
          }
          if (other.Num != 0) {
            Num = other.Num;
          }
          if (other.Species.Length != 0) {
            Species = other.Species;
          }
          types_.Add(other.types_);
          if (other.genderRatio_ != null) {
            if (genderRatio_ == null) {
              GenderRatio = new global::Nadeko.Microservices.PokemonData.Types.Data.Types.GenderRatio();
            }
            GenderRatio.MergeFrom(other.GenderRatio);
          }
          if (other.baseStats_ != null) {
            if (baseStats_ == null) {
              BaseStats = new global::Nadeko.Microservices.PokemonData.Types.Data.Types.BaseStats();
            }
            BaseStats.MergeFrom(other.BaseStats);
          }
          abilities_.Add(other.abilities_);
          if (other.HeightM != 0F) {
            HeightM = other.HeightM;
          }
          if (other.WeightKg != 0F) {
            WeightKg = other.WeightKg;
          }
          if (other.Color.Length != 0) {
            Color = other.Color;
          }
          evos_.Add(other.evos_);
          eggGroups_.Add(other.eggGroups_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Num = input.ReadInt32();
                break;
              }
              case 18: {
                Species = input.ReadString();
                break;
              }
              case 26: {
                types_.AddEntriesFrom(input, _repeated_types_codec);
                break;
              }
              case 34: {
                if (genderRatio_ == null) {
                  GenderRatio = new global::Nadeko.Microservices.PokemonData.Types.Data.Types.GenderRatio();
                }
                input.ReadMessage(GenderRatio);
                break;
              }
              case 42: {
                if (baseStats_ == null) {
                  BaseStats = new global::Nadeko.Microservices.PokemonData.Types.Data.Types.BaseStats();
                }
                input.ReadMessage(BaseStats);
                break;
              }
              case 50: {
                abilities_.AddEntriesFrom(input, _map_abilities_codec);
                break;
              }
              case 61: {
                HeightM = input.ReadFloat();
                break;
              }
              case 69: {
                WeightKg = input.ReadFloat();
                break;
              }
              case 74: {
                Color = input.ReadString();
                break;
              }
              case 82: {
                evos_.AddEntriesFrom(input, _repeated_evos_codec);
                break;
              }
              case 90: {
                eggGroups_.AddEntriesFrom(input, _repeated_eggGroups_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Data message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class GenderRatio : pb::IMessage<GenderRatio> {
            private static readonly pb::MessageParser<GenderRatio> _parser = new pb::MessageParser<GenderRatio>(() => new GenderRatio());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<GenderRatio> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Nadeko.Microservices.PokemonData.Types.Data.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public GenderRatio() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public GenderRatio(GenderRatio other) : this() {
              m_ = other.m_;
              f_ = other.f_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public GenderRatio Clone() {
              return new GenderRatio(this);
            }

            /// <summary>Field number for the "m" field.</summary>
            public const int MFieldNumber = 1;
            private float m_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float M {
              get { return m_; }
              set {
                m_ = value;
              }
            }

            /// <summary>Field number for the "f" field.</summary>
            public const int FFieldNumber = 2;
            private float f_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float F {
              get { return f_; }
              set {
                f_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as GenderRatio);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(GenderRatio other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(M, other.M)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(F, other.F)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(M);
              if (F != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(F);
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (M != 0F) {
                output.WriteRawTag(13);
                output.WriteFloat(M);
              }
              if (F != 0F) {
                output.WriteRawTag(21);
                output.WriteFloat(F);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (M != 0F) {
                size += 1 + 4;
              }
              if (F != 0F) {
                size += 1 + 4;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(GenderRatio other) {
              if (other == null) {
                return;
              }
              if (other.M != 0F) {
                M = other.M;
              }
              if (other.F != 0F) {
                F = other.F;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 13: {
                    M = input.ReadFloat();
                    break;
                  }
                  case 21: {
                    F = input.ReadFloat();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class BaseStats : pb::IMessage<BaseStats> {
            private static readonly pb::MessageParser<BaseStats> _parser = new pb::MessageParser<BaseStats>(() => new BaseStats());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<BaseStats> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Nadeko.Microservices.PokemonData.Types.Data.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public BaseStats() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public BaseStats(BaseStats other) : this() {
              hp_ = other.hp_;
              atk_ = other.atk_;
              def_ = other.def_;
              spa_ = other.spa_;
              spd_ = other.spd_;
              spe_ = other.spe_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public BaseStats Clone() {
              return new BaseStats(this);
            }

            /// <summary>Field number for the "Hp" field.</summary>
            public const int HpFieldNumber = 1;
            private int hp_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Hp {
              get { return hp_; }
              set {
                hp_ = value;
              }
            }

            /// <summary>Field number for the "Atk" field.</summary>
            public const int AtkFieldNumber = 2;
            private int atk_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Atk {
              get { return atk_; }
              set {
                atk_ = value;
              }
            }

            /// <summary>Field number for the "Def" field.</summary>
            public const int DefFieldNumber = 3;
            private int def_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Def {
              get { return def_; }
              set {
                def_ = value;
              }
            }

            /// <summary>Field number for the "Spa" field.</summary>
            public const int SpaFieldNumber = 4;
            private int spa_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Spa {
              get { return spa_; }
              set {
                spa_ = value;
              }
            }

            /// <summary>Field number for the "Spd" field.</summary>
            public const int SpdFieldNumber = 5;
            private int spd_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Spd {
              get { return spd_; }
              set {
                spd_ = value;
              }
            }

            /// <summary>Field number for the "Spe" field.</summary>
            public const int SpeFieldNumber = 6;
            private int spe_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Spe {
              get { return spe_; }
              set {
                spe_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as BaseStats);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(BaseStats other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Hp != other.Hp) return false;
              if (Atk != other.Atk) return false;
              if (Def != other.Def) return false;
              if (Spa != other.Spa) return false;
              if (Spd != other.Spd) return false;
              if (Spe != other.Spe) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Hp != 0) hash ^= Hp.GetHashCode();
              if (Atk != 0) hash ^= Atk.GetHashCode();
              if (Def != 0) hash ^= Def.GetHashCode();
              if (Spa != 0) hash ^= Spa.GetHashCode();
              if (Spd != 0) hash ^= Spd.GetHashCode();
              if (Spe != 0) hash ^= Spe.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Hp != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(Hp);
              }
              if (Atk != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(Atk);
              }
              if (Def != 0) {
                output.WriteRawTag(24);
                output.WriteInt32(Def);
              }
              if (Spa != 0) {
                output.WriteRawTag(32);
                output.WriteInt32(Spa);
              }
              if (Spd != 0) {
                output.WriteRawTag(40);
                output.WriteInt32(Spd);
              }
              if (Spe != 0) {
                output.WriteRawTag(48);
                output.WriteInt32(Spe);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Hp != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
              }
              if (Atk != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Atk);
              }
              if (Def != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Def);
              }
              if (Spa != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Spa);
              }
              if (Spd != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Spd);
              }
              if (Spe != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Spe);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(BaseStats other) {
              if (other == null) {
                return;
              }
              if (other.Hp != 0) {
                Hp = other.Hp;
              }
              if (other.Atk != 0) {
                Atk = other.Atk;
              }
              if (other.Def != 0) {
                Def = other.Def;
              }
              if (other.Spa != 0) {
                Spa = other.Spa;
              }
              if (other.Spd != 0) {
                Spd = other.Spd;
              }
              if (other.Spe != 0) {
                Spe = other.Spe;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Hp = input.ReadInt32();
                    break;
                  }
                  case 16: {
                    Atk = input.ReadInt32();
                    break;
                  }
                  case 24: {
                    Def = input.ReadInt32();
                    break;
                  }
                  case 32: {
                    Spa = input.ReadInt32();
                    break;
                  }
                  case 40: {
                    Spd = input.ReadInt32();
                    break;
                  }
                  case 48: {
                    Spe = input.ReadInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class PokemonRequest : pb::IMessage<PokemonRequest> {
    private static readonly pb::MessageParser<PokemonRequest> _parser = new pb::MessageParser<PokemonRequest>(() => new PokemonRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PokemonRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonRequest(PokemonRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonRequest Clone() {
      return new PokemonRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PokemonRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PokemonRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PokemonRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class XkcdReply : pb::IMessage<XkcdReply> {
    private static readonly pb::MessageParser<XkcdReply> _parser = new pb::MessageParser<XkcdReply>(() => new XkcdReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<XkcdReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XkcdReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XkcdReply(XkcdReply other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          Data = other.Data.Clone();
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XkcdReply Clone() {
      return new XkcdReply(this);
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.XkcdReply.Types.Info Data {
      get { return resultCase_ == ResultOneofCase.Data ? (global::Nadeko.Microservices.XkcdReply.Types.Info) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Data;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.Errors Error {
      get { return resultCase_ == ResultOneofCase.Error ? (global::Nadeko.Microservices.Errors) result_ : 0; }
      set {
        result_ = value;
        resultCase_ = ResultOneofCase.Error;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "Result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Data = 1,
      Error = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as XkcdReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(XkcdReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (Error != other.Error) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Data) hash ^= Data.GetHashCode();
      if (resultCase_ == ResultOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.Data) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(XkcdReply other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          if (Data == null) {
            Data = new global::Nadeko.Microservices.XkcdReply.Types.Info();
          }
          Data.MergeFrom(other.Data);
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Nadeko.Microservices.XkcdReply.Types.Info subBuilder = new global::Nadeko.Microservices.XkcdReply.Types.Info();
            if (resultCase_ == ResultOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
          case 16: {
            result_ = input.ReadEnum();
            resultCase_ = ResultOneofCase.Error;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the XkcdReply message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Info : pb::IMessage<Info> {
        private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Info> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nadeko.Microservices.XkcdReply.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info(Info other) : this() {
          num_ = other.num_;
          month_ = other.month_;
          year_ = other.year_;
          safeTitle_ = other.safeTitle_;
          img_ = other.img_;
          alt_ = other.alt_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info Clone() {
          return new Info(this);
        }

        /// <summary>Field number for the "num" field.</summary>
        public const int NumFieldNumber = 1;
        private int num_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Num {
          get { return num_; }
          set {
            num_ = value;
          }
        }

        /// <summary>Field number for the "month" field.</summary>
        public const int MonthFieldNumber = 2;
        private string month_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Month {
          get { return month_; }
          set {
            month_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "year" field.</summary>
        public const int YearFieldNumber = 3;
        private string year_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Year {
          get { return year_; }
          set {
            year_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "safeTitle" field.</summary>
        public const int SafeTitleFieldNumber = 4;
        private string safeTitle_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SafeTitle {
          get { return safeTitle_; }
          set {
            safeTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "img" field.</summary>
        public const int ImgFieldNumber = 5;
        private string img_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Img {
          get { return img_; }
          set {
            img_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "alt" field.</summary>
        public const int AltFieldNumber = 6;
        private string alt_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Alt {
          get { return alt_; }
          set {
            alt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Info);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Info other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Num != other.Num) return false;
          if (Month != other.Month) return false;
          if (Year != other.Year) return false;
          if (SafeTitle != other.SafeTitle) return false;
          if (Img != other.Img) return false;
          if (Alt != other.Alt) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Num != 0) hash ^= Num.GetHashCode();
          if (Month.Length != 0) hash ^= Month.GetHashCode();
          if (Year.Length != 0) hash ^= Year.GetHashCode();
          if (SafeTitle.Length != 0) hash ^= SafeTitle.GetHashCode();
          if (Img.Length != 0) hash ^= Img.GetHashCode();
          if (Alt.Length != 0) hash ^= Alt.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Num != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Num);
          }
          if (Month.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Month);
          }
          if (Year.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Year);
          }
          if (SafeTitle.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(SafeTitle);
          }
          if (Img.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Img);
          }
          if (Alt.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(Alt);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Num != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
          }
          if (Month.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Month);
          }
          if (Year.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Year);
          }
          if (SafeTitle.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SafeTitle);
          }
          if (Img.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Img);
          }
          if (Alt.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Alt);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Info other) {
          if (other == null) {
            return;
          }
          if (other.Num != 0) {
            Num = other.Num;
          }
          if (other.Month.Length != 0) {
            Month = other.Month;
          }
          if (other.Year.Length != 0) {
            Year = other.Year;
          }
          if (other.SafeTitle.Length != 0) {
            SafeTitle = other.SafeTitle;
          }
          if (other.Img.Length != 0) {
            Img = other.Img;
          }
          if (other.Alt.Length != 0) {
            Alt = other.Alt;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Num = input.ReadInt32();
                break;
              }
              case 18: {
                Month = input.ReadString();
                break;
              }
              case 26: {
                Year = input.ReadString();
                break;
              }
              case 34: {
                SafeTitle = input.ReadString();
                break;
              }
              case 42: {
                Img = input.ReadString();
                break;
              }
              case 50: {
                Alt = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class XkcdRequest : pb::IMessage<XkcdRequest> {
    private static readonly pb::MessageParser<XkcdRequest> _parser = new pb::MessageParser<XkcdRequest>(() => new XkcdRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<XkcdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XkcdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XkcdRequest(XkcdRequest other) : this() {
      number_ = other.number_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XkcdRequest Clone() {
      return new XkcdRequest(this);
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 1;
    private int number_;
    /// <summary>
    /// -1 means latest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as XkcdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(XkcdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Number != other.Number) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Number != 0) hash ^= Number.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Number != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Number);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(XkcdRequest other) {
      if (other == null) {
        return;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Number = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CryptoData : pb::IMessage<CryptoData> {
    private static readonly pb::MessageParser<CryptoData> _parser = new pb::MessageParser<CryptoData>(() => new CryptoData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CryptoData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoData(CryptoData other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          Data = other.Data.Clone();
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoData Clone() {
      return new CryptoData(this);
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.CryptoData.Types.Info Data {
      get { return resultCase_ == ResultOneofCase.Data ? (global::Nadeko.Microservices.CryptoData.Types.Info) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Data;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.Errors Error {
      get { return resultCase_ == ResultOneofCase.Error ? (global::Nadeko.Microservices.Errors) result_ : 0; }
      set {
        result_ = value;
        resultCase_ = ResultOneofCase.Error;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "Result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Data = 1,
      Error = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CryptoData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CryptoData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (Error != other.Error) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Data) hash ^= Data.GetHashCode();
      if (resultCase_ == ResultOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.Data) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CryptoData other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          if (Data == null) {
            Data = new global::Nadeko.Microservices.CryptoData.Types.Info();
          }
          Data.MergeFrom(other.Data);
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Nadeko.Microservices.CryptoData.Types.Info subBuilder = new global::Nadeko.Microservices.CryptoData.Types.Info();
            if (resultCase_ == ResultOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
          case 16: {
            result_ = input.ReadEnum();
            resultCase_ = ResultOneofCase.Error;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CryptoData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Info : pb::IMessage<Info> {
        private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Info> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nadeko.Microservices.CryptoData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info(Info other) : this() {
          id_ = other.id_;
          name_ = other.name_;
          symbol_ = other.symbol_;
          websiteSlug_ = other.websiteSlug_;
          rank_ = other.rank_;
          isNearest_ = other.isNearest_;
          percentChange1H_ = other.percentChange1H_;
          volume24H_ = other.volume24H_;
          percentChange7D_ = other.percentChange7D_;
          percentChange24H_ = other.percentChange24H_;
          price_ = other.price_;
          marketCap_ = other.marketCap_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info Clone() {
          return new Info(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "symbol" field.</summary>
        public const int SymbolFieldNumber = 3;
        private string symbol_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Symbol {
          get { return symbol_; }
          set {
            symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "websiteSlug" field.</summary>
        public const int WebsiteSlugFieldNumber = 4;
        private string websiteSlug_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string WebsiteSlug {
          get { return websiteSlug_; }
          set {
            websiteSlug_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "rank" field.</summary>
        public const int RankFieldNumber = 5;
        private int rank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Rank {
          get { return rank_; }
          set {
            rank_ = value;
          }
        }

        /// <summary>Field number for the "isNearest" field.</summary>
        public const int IsNearestFieldNumber = 6;
        private bool isNearest_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsNearest {
          get { return isNearest_; }
          set {
            isNearest_ = value;
          }
        }

        /// <summary>Field number for the "percentChange1h" field.</summary>
        public const int PercentChange1HFieldNumber = 7;
        private string percentChange1H_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PercentChange1H {
          get { return percentChange1H_; }
          set {
            percentChange1H_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "volume24h" field.</summary>
        public const int Volume24HFieldNumber = 8;
        private double volume24H_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Volume24H {
          get { return volume24H_; }
          set {
            volume24H_ = value;
          }
        }

        /// <summary>Field number for the "percentChange7d" field.</summary>
        public const int PercentChange7DFieldNumber = 9;
        private string percentChange7D_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PercentChange7D {
          get { return percentChange7D_; }
          set {
            percentChange7D_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "percentChange24h" field.</summary>
        public const int PercentChange24HFieldNumber = 10;
        private string percentChange24H_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PercentChange24H {
          get { return percentChange24H_; }
          set {
            percentChange24H_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "price" field.</summary>
        public const int PriceFieldNumber = 11;
        private double price_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Price {
          get { return price_; }
          set {
            price_ = value;
          }
        }

        /// <summary>Field number for the "marketCap" field.</summary>
        public const int MarketCapFieldNumber = 12;
        private double marketCap_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double MarketCap {
          get { return marketCap_; }
          set {
            marketCap_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Info);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Info other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Name != other.Name) return false;
          if (Symbol != other.Symbol) return false;
          if (WebsiteSlug != other.WebsiteSlug) return false;
          if (Rank != other.Rank) return false;
          if (IsNearest != other.IsNearest) return false;
          if (PercentChange1H != other.PercentChange1H) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Volume24H, other.Volume24H)) return false;
          if (PercentChange7D != other.PercentChange7D) return false;
          if (PercentChange24H != other.PercentChange24H) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MarketCap, other.MarketCap)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
          if (WebsiteSlug.Length != 0) hash ^= WebsiteSlug.GetHashCode();
          if (Rank != 0) hash ^= Rank.GetHashCode();
          if (IsNearest != false) hash ^= IsNearest.GetHashCode();
          if (PercentChange1H.Length != 0) hash ^= PercentChange1H.GetHashCode();
          if (Volume24H != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Volume24H);
          if (PercentChange7D.Length != 0) hash ^= PercentChange7D.GetHashCode();
          if (PercentChange24H.Length != 0) hash ^= PercentChange24H.GetHashCode();
          if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
          if (MarketCap != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MarketCap);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (Symbol.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Symbol);
          }
          if (WebsiteSlug.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(WebsiteSlug);
          }
          if (Rank != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(Rank);
          }
          if (IsNearest != false) {
            output.WriteRawTag(48);
            output.WriteBool(IsNearest);
          }
          if (PercentChange1H.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(PercentChange1H);
          }
          if (Volume24H != 0D) {
            output.WriteRawTag(65);
            output.WriteDouble(Volume24H);
          }
          if (PercentChange7D.Length != 0) {
            output.WriteRawTag(74);
            output.WriteString(PercentChange7D);
          }
          if (PercentChange24H.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(PercentChange24H);
          }
          if (Price != 0D) {
            output.WriteRawTag(89);
            output.WriteDouble(Price);
          }
          if (MarketCap != 0D) {
            output.WriteRawTag(97);
            output.WriteDouble(MarketCap);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Symbol.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
          }
          if (WebsiteSlug.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(WebsiteSlug);
          }
          if (Rank != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
          }
          if (IsNearest != false) {
            size += 1 + 1;
          }
          if (PercentChange1H.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PercentChange1H);
          }
          if (Volume24H != 0D) {
            size += 1 + 8;
          }
          if (PercentChange7D.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PercentChange7D);
          }
          if (PercentChange24H.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PercentChange24H);
          }
          if (Price != 0D) {
            size += 1 + 8;
          }
          if (MarketCap != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Info other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Symbol.Length != 0) {
            Symbol = other.Symbol;
          }
          if (other.WebsiteSlug.Length != 0) {
            WebsiteSlug = other.WebsiteSlug;
          }
          if (other.Rank != 0) {
            Rank = other.Rank;
          }
          if (other.IsNearest != false) {
            IsNearest = other.IsNearest;
          }
          if (other.PercentChange1H.Length != 0) {
            PercentChange1H = other.PercentChange1H;
          }
          if (other.Volume24H != 0D) {
            Volume24H = other.Volume24H;
          }
          if (other.PercentChange7D.Length != 0) {
            PercentChange7D = other.PercentChange7D;
          }
          if (other.PercentChange24H.Length != 0) {
            PercentChange24H = other.PercentChange24H;
          }
          if (other.Price != 0D) {
            Price = other.Price;
          }
          if (other.MarketCap != 0D) {
            MarketCap = other.MarketCap;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                Symbol = input.ReadString();
                break;
              }
              case 34: {
                WebsiteSlug = input.ReadString();
                break;
              }
              case 40: {
                Rank = input.ReadInt32();
                break;
              }
              case 48: {
                IsNearest = input.ReadBool();
                break;
              }
              case 58: {
                PercentChange1H = input.ReadString();
                break;
              }
              case 65: {
                Volume24H = input.ReadDouble();
                break;
              }
              case 74: {
                PercentChange7D = input.ReadString();
                break;
              }
              case 82: {
                PercentChange24H = input.ReadString();
                break;
              }
              case 89: {
                Price = input.ReadDouble();
                break;
              }
              case 97: {
                MarketCap = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CryptoRequest : pb::IMessage<CryptoRequest> {
    private static readonly pb::MessageParser<CryptoRequest> _parser = new pb::MessageParser<CryptoRequest>(() => new CryptoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CryptoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoRequest(CryptoRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CryptoRequest Clone() {
      return new CryptoRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CryptoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CryptoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CryptoRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WeatherData : pb::IMessage<WeatherData> {
    private static readonly pb::MessageParser<WeatherData> _parser = new pb::MessageParser<WeatherData>(() => new WeatherData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeatherData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherData(WeatherData other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          Data = other.Data.Clone();
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherData Clone() {
      return new WeatherData(this);
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.WeatherData.Types.Info Data {
      get { return resultCase_ == ResultOneofCase.Data ? (global::Nadeko.Microservices.WeatherData.Types.Info) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Data;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.Errors Error {
      get { return resultCase_ == ResultOneofCase.Error ? (global::Nadeko.Microservices.Errors) result_ : 0; }
      set {
        result_ = value;
        resultCase_ = ResultOneofCase.Error;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "Result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Data = 1,
      Error = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeatherData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeatherData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (Error != other.Error) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Data) hash ^= Data.GetHashCode();
      if (resultCase_ == ResultOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.Data) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeatherData other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          if (Data == null) {
            Data = new global::Nadeko.Microservices.WeatherData.Types.Info();
          }
          Data.MergeFrom(other.Data);
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Nadeko.Microservices.WeatherData.Types.Info subBuilder = new global::Nadeko.Microservices.WeatherData.Types.Info();
            if (resultCase_ == ResultOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
          case 16: {
            result_ = input.ReadEnum();
            resultCase_ = ResultOneofCase.Error;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the WeatherData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Info : pb::IMessage<Info> {
        private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Info> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nadeko.Microservices.WeatherData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info(Info other) : this() {
          location_ = other.location_;
          coords_ = other.coords_;
          condition_ = other.condition_;
          humidity_ = other.humidity_;
          windSpeed_ = other.windSpeed_;
          temperature_ = other.temperature_;
          tempMin_ = other.tempMin_;
          tempMax_ = other.tempMax_;
          sunrise_ = other.sunrise_;
          sunset_ = other.sunset_;
          source_ = other.source_;
          sourceIcon_ = other.sourceIcon_;
          url_ = other.url_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info Clone() {
          return new Info(this);
        }

        /// <summary>Field number for the "Location" field.</summary>
        public const int LocationFieldNumber = 1;
        private string location_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Location {
          get { return location_; }
          set {
            location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Coords" field.</summary>
        public const int CoordsFieldNumber = 2;
        private string coords_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Coords {
          get { return coords_; }
          set {
            coords_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Condition" field.</summary>
        public const int ConditionFieldNumber = 3;
        private string condition_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Condition {
          get { return condition_; }
          set {
            condition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Humidity" field.</summary>
        public const int HumidityFieldNumber = 4;
        private double humidity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Humidity {
          get { return humidity_; }
          set {
            humidity_ = value;
          }
        }

        /// <summary>Field number for the "WindSpeed" field.</summary>
        public const int WindSpeedFieldNumber = 5;
        private double windSpeed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double WindSpeed {
          get { return windSpeed_; }
          set {
            windSpeed_ = value;
          }
        }

        /// <summary>Field number for the "Temperature" field.</summary>
        public const int TemperatureFieldNumber = 6;
        private double temperature_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Temperature {
          get { return temperature_; }
          set {
            temperature_ = value;
          }
        }

        /// <summary>Field number for the "TempMin" field.</summary>
        public const int TempMinFieldNumber = 7;
        private double tempMin_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double TempMin {
          get { return tempMin_; }
          set {
            tempMin_ = value;
          }
        }

        /// <summary>Field number for the "TempMax" field.</summary>
        public const int TempMaxFieldNumber = 8;
        private double tempMax_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double TempMax {
          get { return tempMax_; }
          set {
            tempMax_ = value;
          }
        }

        /// <summary>Field number for the "Sunrise" field.</summary>
        public const int SunriseFieldNumber = 9;
        private double sunrise_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Sunrise {
          get { return sunrise_; }
          set {
            sunrise_ = value;
          }
        }

        /// <summary>Field number for the "Sunset" field.</summary>
        public const int SunsetFieldNumber = 10;
        private double sunset_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Sunset {
          get { return sunset_; }
          set {
            sunset_ = value;
          }
        }

        /// <summary>Field number for the "Source" field.</summary>
        public const int SourceFieldNumber = 11;
        private string source_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Source {
          get { return source_; }
          set {
            source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "SourceIcon" field.</summary>
        public const int SourceIconFieldNumber = 12;
        private string sourceIcon_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SourceIcon {
          get { return sourceIcon_; }
          set {
            sourceIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Url" field.</summary>
        public const int UrlFieldNumber = 13;
        private string url_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Url {
          get { return url_; }
          set {
            url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Info);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Info other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Location != other.Location) return false;
          if (Coords != other.Coords) return false;
          if (Condition != other.Condition) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Humidity, other.Humidity)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WindSpeed, other.WindSpeed)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TempMin, other.TempMin)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TempMax, other.TempMax)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Sunrise, other.Sunrise)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Sunset, other.Sunset)) return false;
          if (Source != other.Source) return false;
          if (SourceIcon != other.SourceIcon) return false;
          if (Url != other.Url) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Location.Length != 0) hash ^= Location.GetHashCode();
          if (Coords.Length != 0) hash ^= Coords.GetHashCode();
          if (Condition.Length != 0) hash ^= Condition.GetHashCode();
          if (Humidity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Humidity);
          if (WindSpeed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WindSpeed);
          if (Temperature != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Temperature);
          if (TempMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TempMin);
          if (TempMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TempMax);
          if (Sunrise != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Sunrise);
          if (Sunset != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Sunset);
          if (Source.Length != 0) hash ^= Source.GetHashCode();
          if (SourceIcon.Length != 0) hash ^= SourceIcon.GetHashCode();
          if (Url.Length != 0) hash ^= Url.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Location.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Location);
          }
          if (Coords.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Coords);
          }
          if (Condition.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Condition);
          }
          if (Humidity != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(Humidity);
          }
          if (WindSpeed != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(WindSpeed);
          }
          if (Temperature != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(Temperature);
          }
          if (TempMin != 0D) {
            output.WriteRawTag(57);
            output.WriteDouble(TempMin);
          }
          if (TempMax != 0D) {
            output.WriteRawTag(65);
            output.WriteDouble(TempMax);
          }
          if (Sunrise != 0D) {
            output.WriteRawTag(73);
            output.WriteDouble(Sunrise);
          }
          if (Sunset != 0D) {
            output.WriteRawTag(81);
            output.WriteDouble(Sunset);
          }
          if (Source.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(Source);
          }
          if (SourceIcon.Length != 0) {
            output.WriteRawTag(98);
            output.WriteString(SourceIcon);
          }
          if (Url.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(Url);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Location.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
          }
          if (Coords.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Coords);
          }
          if (Condition.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Condition);
          }
          if (Humidity != 0D) {
            size += 1 + 8;
          }
          if (WindSpeed != 0D) {
            size += 1 + 8;
          }
          if (Temperature != 0D) {
            size += 1 + 8;
          }
          if (TempMin != 0D) {
            size += 1 + 8;
          }
          if (TempMax != 0D) {
            size += 1 + 8;
          }
          if (Sunrise != 0D) {
            size += 1 + 8;
          }
          if (Sunset != 0D) {
            size += 1 + 8;
          }
          if (Source.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
          }
          if (SourceIcon.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceIcon);
          }
          if (Url.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Info other) {
          if (other == null) {
            return;
          }
          if (other.Location.Length != 0) {
            Location = other.Location;
          }
          if (other.Coords.Length != 0) {
            Coords = other.Coords;
          }
          if (other.Condition.Length != 0) {
            Condition = other.Condition;
          }
          if (other.Humidity != 0D) {
            Humidity = other.Humidity;
          }
          if (other.WindSpeed != 0D) {
            WindSpeed = other.WindSpeed;
          }
          if (other.Temperature != 0D) {
            Temperature = other.Temperature;
          }
          if (other.TempMin != 0D) {
            TempMin = other.TempMin;
          }
          if (other.TempMax != 0D) {
            TempMax = other.TempMax;
          }
          if (other.Sunrise != 0D) {
            Sunrise = other.Sunrise;
          }
          if (other.Sunset != 0D) {
            Sunset = other.Sunset;
          }
          if (other.Source.Length != 0) {
            Source = other.Source;
          }
          if (other.SourceIcon.Length != 0) {
            SourceIcon = other.SourceIcon;
          }
          if (other.Url.Length != 0) {
            Url = other.Url;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Location = input.ReadString();
                break;
              }
              case 18: {
                Coords = input.ReadString();
                break;
              }
              case 26: {
                Condition = input.ReadString();
                break;
              }
              case 33: {
                Humidity = input.ReadDouble();
                break;
              }
              case 41: {
                WindSpeed = input.ReadDouble();
                break;
              }
              case 49: {
                Temperature = input.ReadDouble();
                break;
              }
              case 57: {
                TempMin = input.ReadDouble();
                break;
              }
              case 65: {
                TempMax = input.ReadDouble();
                break;
              }
              case 73: {
                Sunrise = input.ReadDouble();
                break;
              }
              case 81: {
                Sunset = input.ReadDouble();
                break;
              }
              case 90: {
                Source = input.ReadString();
                break;
              }
              case 98: {
                SourceIcon = input.ReadString();
                break;
              }
              case 106: {
                Url = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class WeatherRequest : pb::IMessage<WeatherRequest> {
    private static readonly pb::MessageParser<WeatherRequest> _parser = new pb::MessageParser<WeatherRequest>(() => new WeatherRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeatherRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherRequest(WeatherRequest other) : this() {
      query_ = other.query_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherRequest Clone() {
      return new WeatherRequest(this);
    }

    /// <summary>Field number for the "Query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeatherRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeatherRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeatherRequest other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTimeReply : pb::IMessage<GetTimeReply> {
    private static readonly pb::MessageParser<GetTimeReply> _parser = new pb::MessageParser<GetTimeReply>(() => new GetTimeReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTimeReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTimeReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTimeReply(GetTimeReply other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          Data = other.Data.Clone();
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTimeReply Clone() {
      return new GetTimeReply(this);
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.GetTimeReply.Types.Info Data {
      get { return resultCase_ == ResultOneofCase.Data ? (global::Nadeko.Microservices.GetTimeReply.Types.Info) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Data;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.Errors Error {
      get { return resultCase_ == ResultOneofCase.Error ? (global::Nadeko.Microservices.Errors) result_ : 0; }
      set {
        result_ = value;
        resultCase_ = ResultOneofCase.Error;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "Result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Data = 1,
      Error = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTimeReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTimeReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (Error != other.Error) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Data) hash ^= Data.GetHashCode();
      if (resultCase_ == ResultOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.Data) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTimeReply other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          if (Data == null) {
            Data = new global::Nadeko.Microservices.GetTimeReply.Types.Info();
          }
          Data.MergeFrom(other.Data);
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Nadeko.Microservices.GetTimeReply.Types.Info subBuilder = new global::Nadeko.Microservices.GetTimeReply.Types.Info();
            if (resultCase_ == ResultOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
          case 16: {
            result_ = input.ReadEnum();
            resultCase_ = ResultOneofCase.Error;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetTimeReply message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Info : pb::IMessage<Info> {
        private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Info> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nadeko.Microservices.GetTimeReply.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info(Info other) : this() {
          address_ = other.address_;
          timeZoneName_ = other.timeZoneName_;
          time_ = other.time_ != null ? other.time_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info Clone() {
          return new Info(this);
        }

        /// <summary>Field number for the "Address" field.</summary>
        public const int AddressFieldNumber = 1;
        private string address_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Address {
          get { return address_; }
          set {
            address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "TimeZoneName" field.</summary>
        public const int TimeZoneNameFieldNumber = 2;
        private string timeZoneName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TimeZoneName {
          get { return timeZoneName_; }
          set {
            timeZoneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Time" field.</summary>
        public const int TimeFieldNumber = 3;
        private global::Google.Protobuf.WellKnownTypes.Timestamp time_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp Time {
          get { return time_; }
          set {
            time_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Info);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Info other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Address != other.Address) return false;
          if (TimeZoneName != other.TimeZoneName) return false;
          if (!object.Equals(Time, other.Time)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Address.Length != 0) hash ^= Address.GetHashCode();
          if (TimeZoneName.Length != 0) hash ^= TimeZoneName.GetHashCode();
          if (time_ != null) hash ^= Time.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Address.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Address);
          }
          if (TimeZoneName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(TimeZoneName);
          }
          if (time_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Time);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Address.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
          }
          if (TimeZoneName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeZoneName);
          }
          if (time_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Info other) {
          if (other == null) {
            return;
          }
          if (other.Address.Length != 0) {
            Address = other.Address;
          }
          if (other.TimeZoneName.Length != 0) {
            TimeZoneName = other.TimeZoneName;
          }
          if (other.time_ != null) {
            if (time_ == null) {
              Time = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            Time.MergeFrom(other.Time);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Address = input.ReadString();
                break;
              }
              case 18: {
                TimeZoneName = input.ReadString();
                break;
              }
              case 26: {
                if (time_ == null) {
                  Time = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(Time);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class GetTimeRequest : pb::IMessage<GetTimeRequest> {
    private static readonly pb::MessageParser<GetTimeRequest> _parser = new pb::MessageParser<GetTimeRequest>(() => new GetTimeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTimeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTimeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTimeRequest(GetTimeRequest other) : this() {
      query_ = other.query_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTimeRequest Clone() {
      return new GetTimeRequest(this);
    }

    /// <summary>Field number for the "Query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTimeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTimeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTimeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MovieData : pb::IMessage<MovieData> {
    private static readonly pb::MessageParser<MovieData> _parser = new pb::MessageParser<MovieData>(() => new MovieData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MovieData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovieData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovieData(MovieData other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          Data = other.Data.Clone();
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovieData Clone() {
      return new MovieData(this);
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.MovieData.Types.Info Data {
      get { return resultCase_ == ResultOneofCase.Data ? (global::Nadeko.Microservices.MovieData.Types.Info) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Data;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.Errors Error {
      get { return resultCase_ == ResultOneofCase.Error ? (global::Nadeko.Microservices.Errors) result_ : 0; }
      set {
        result_ = value;
        resultCase_ = ResultOneofCase.Error;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "Result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Data = 1,
      Error = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MovieData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MovieData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (Error != other.Error) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Data) hash ^= Data.GetHashCode();
      if (resultCase_ == ResultOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.Data) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MovieData other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          if (Data == null) {
            Data = new global::Nadeko.Microservices.MovieData.Types.Info();
          }
          Data.MergeFrom(other.Data);
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Nadeko.Microservices.MovieData.Types.Info subBuilder = new global::Nadeko.Microservices.MovieData.Types.Info();
            if (resultCase_ == ResultOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
          case 16: {
            result_ = input.ReadEnum();
            resultCase_ = ResultOneofCase.Error;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MovieData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Info : pb::IMessage<Info> {
        private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Info> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nadeko.Microservices.MovieData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info(Info other) : this() {
          rating_ = other.rating_;
          genre_ = other.genre_;
          year_ = other.year_;
          poster_ = other.poster_;
          title_ = other.title_;
          plot_ = other.plot_;
          imdbId_ = other.imdbId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info Clone() {
          return new Info(this);
        }

        /// <summary>Field number for the "Rating" field.</summary>
        public const int RatingFieldNumber = 1;
        private string rating_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Rating {
          get { return rating_; }
          set {
            rating_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Genre" field.</summary>
        public const int GenreFieldNumber = 2;
        private string genre_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Genre {
          get { return genre_; }
          set {
            genre_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Year" field.</summary>
        public const int YearFieldNumber = 3;
        private string year_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Year {
          get { return year_; }
          set {
            year_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Poster" field.</summary>
        public const int PosterFieldNumber = 4;
        private string poster_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Poster {
          get { return poster_; }
          set {
            poster_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Title" field.</summary>
        public const int TitleFieldNumber = 5;
        private string title_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Title {
          get { return title_; }
          set {
            title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Plot" field.</summary>
        public const int PlotFieldNumber = 6;
        private string plot_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Plot {
          get { return plot_; }
          set {
            plot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ImdbId" field.</summary>
        public const int ImdbIdFieldNumber = 7;
        private string imdbId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ImdbId {
          get { return imdbId_; }
          set {
            imdbId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Info);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Info other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Rating != other.Rating) return false;
          if (Genre != other.Genre) return false;
          if (Year != other.Year) return false;
          if (Poster != other.Poster) return false;
          if (Title != other.Title) return false;
          if (Plot != other.Plot) return false;
          if (ImdbId != other.ImdbId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Rating.Length != 0) hash ^= Rating.GetHashCode();
          if (Genre.Length != 0) hash ^= Genre.GetHashCode();
          if (Year.Length != 0) hash ^= Year.GetHashCode();
          if (Poster.Length != 0) hash ^= Poster.GetHashCode();
          if (Title.Length != 0) hash ^= Title.GetHashCode();
          if (Plot.Length != 0) hash ^= Plot.GetHashCode();
          if (ImdbId.Length != 0) hash ^= ImdbId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Rating.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Rating);
          }
          if (Genre.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Genre);
          }
          if (Year.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Year);
          }
          if (Poster.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Poster);
          }
          if (Title.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Title);
          }
          if (Plot.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(Plot);
          }
          if (ImdbId.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(ImdbId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Rating.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Rating);
          }
          if (Genre.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Genre);
          }
          if (Year.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Year);
          }
          if (Poster.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Poster);
          }
          if (Title.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
          }
          if (Plot.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Plot);
          }
          if (ImdbId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ImdbId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Info other) {
          if (other == null) {
            return;
          }
          if (other.Rating.Length != 0) {
            Rating = other.Rating;
          }
          if (other.Genre.Length != 0) {
            Genre = other.Genre;
          }
          if (other.Year.Length != 0) {
            Year = other.Year;
          }
          if (other.Poster.Length != 0) {
            Poster = other.Poster;
          }
          if (other.Title.Length != 0) {
            Title = other.Title;
          }
          if (other.Plot.Length != 0) {
            Plot = other.Plot;
          }
          if (other.ImdbId.Length != 0) {
            ImdbId = other.ImdbId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Rating = input.ReadString();
                break;
              }
              case 18: {
                Genre = input.ReadString();
                break;
              }
              case 26: {
                Year = input.ReadString();
                break;
              }
              case 34: {
                Poster = input.ReadString();
                break;
              }
              case 42: {
                Title = input.ReadString();
                break;
              }
              case 50: {
                Plot = input.ReadString();
                break;
              }
              case 58: {
                ImdbId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class MovieRequest : pb::IMessage<MovieRequest> {
    private static readonly pb::MessageParser<MovieRequest> _parser = new pb::MessageParser<MovieRequest>(() => new MovieRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MovieRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovieRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovieRequest(MovieRequest other) : this() {
      query_ = other.query_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovieRequest Clone() {
      return new MovieRequest(this);
    }

    /// <summary>Field number for the "Query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MovieRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MovieRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MovieRequest other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ImageSearchReply : pb::IMessage<ImageSearchReply> {
    private static readonly pb::MessageParser<ImageSearchReply> _parser = new pb::MessageParser<ImageSearchReply>(() => new ImageSearchReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageSearchReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSearchReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSearchReply(ImageSearchReply other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          Data = other.Data.Clone();
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSearchReply Clone() {
      return new ImageSearchReply(this);
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.ImageSearchReply.Types.Info Data {
      get { return resultCase_ == ResultOneofCase.Data ? (global::Nadeko.Microservices.ImageSearchReply.Types.Info) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Data;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.Errors Error {
      get { return resultCase_ == ResultOneofCase.Error ? (global::Nadeko.Microservices.Errors) result_ : 0; }
      set {
        result_ = value;
        resultCase_ = ResultOneofCase.Error;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "Result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Data = 1,
      Error = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageSearchReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageSearchReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (Error != other.Error) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Data) hash ^= Data.GetHashCode();
      if (resultCase_ == ResultOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.Data) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageSearchReply other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          if (Data == null) {
            Data = new global::Nadeko.Microservices.ImageSearchReply.Types.Info();
          }
          Data.MergeFrom(other.Data);
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Nadeko.Microservices.ImageSearchReply.Types.Info subBuilder = new global::Nadeko.Microservices.ImageSearchReply.Types.Info();
            if (resultCase_ == ResultOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
          case 16: {
            result_ = input.ReadEnum();
            resultCase_ = ResultOneofCase.Error;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ImageSearchReply message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Info : pb::IMessage<Info> {
        private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Info> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nadeko.Microservices.ImageSearchReply.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info(Info other) : this() {
          url_ = other.url_;
          providerIconUrl_ = other.providerIconUrl_;
          query_ = other.query_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info Clone() {
          return new Info(this);
        }

        /// <summary>Field number for the "Url" field.</summary>
        public const int UrlFieldNumber = 1;
        private string url_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Url {
          get { return url_; }
          set {
            url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ProviderIconUrl" field.</summary>
        public const int ProviderIconUrlFieldNumber = 2;
        private string providerIconUrl_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ProviderIconUrl {
          get { return providerIconUrl_; }
          set {
            providerIconUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Query" field.</summary>
        public const int QueryFieldNumber = 3;
        private string query_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Query {
          get { return query_; }
          set {
            query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Info);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Info other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Url != other.Url) return false;
          if (ProviderIconUrl != other.ProviderIconUrl) return false;
          if (Query != other.Query) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Url.Length != 0) hash ^= Url.GetHashCode();
          if (ProviderIconUrl.Length != 0) hash ^= ProviderIconUrl.GetHashCode();
          if (Query.Length != 0) hash ^= Query.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Url.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Url);
          }
          if (ProviderIconUrl.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ProviderIconUrl);
          }
          if (Query.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Query);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Url.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
          }
          if (ProviderIconUrl.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ProviderIconUrl);
          }
          if (Query.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Info other) {
          if (other == null) {
            return;
          }
          if (other.Url.Length != 0) {
            Url = other.Url;
          }
          if (other.ProviderIconUrl.Length != 0) {
            ProviderIconUrl = other.ProviderIconUrl;
          }
          if (other.Query.Length != 0) {
            Query = other.Query;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Url = input.ReadString();
                break;
              }
              case 18: {
                ProviderIconUrl = input.ReadString();
                break;
              }
              case 26: {
                Query = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ImageSearchRequest : pb::IMessage<ImageSearchRequest> {
    private static readonly pb::MessageParser<ImageSearchRequest> _parser = new pb::MessageParser<ImageSearchRequest>(() => new ImageSearchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageSearchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSearchRequest(ImageSearchRequest other) : this() {
      query_ = other.query_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSearchRequest Clone() {
      return new ImageSearchRequest(this);
    }

    /// <summary>Field number for the "Query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageSearchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageSearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageSearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShortenUrlReply : pb::IMessage<ShortenUrlReply> {
    private static readonly pb::MessageParser<ShortenUrlReply> _parser = new pb::MessageParser<ShortenUrlReply>(() => new ShortenUrlReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShortenUrlReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShortenUrlReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShortenUrlReply(ShortenUrlReply other) : this() {
      url_ = other.url_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShortenUrlReply Clone() {
      return new ShortenUrlReply(this);
    }

    /// <summary>Field number for the "Url" field.</summary>
    public const int UrlFieldNumber = 1;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShortenUrlReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShortenUrlReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShortenUrlReply other) {
      if (other == null) {
        return;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShortenUrlRequest : pb::IMessage<ShortenUrlRequest> {
    private static readonly pb::MessageParser<ShortenUrlRequest> _parser = new pb::MessageParser<ShortenUrlRequest>(() => new ShortenUrlRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShortenUrlRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShortenUrlRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShortenUrlRequest(ShortenUrlRequest other) : this() {
      query_ = other.query_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShortenUrlRequest Clone() {
      return new ShortenUrlRequest(this);
    }

    /// <summary>Field number for the "Query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShortenUrlRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShortenUrlRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShortenUrlRequest other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GoogleSearchResult : pb::IMessage<GoogleSearchResult> {
    private static readonly pb::MessageParser<GoogleSearchResult> _parser = new pb::MessageParser<GoogleSearchResult>(() => new GoogleSearchResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoogleSearchResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoogleSearchResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoogleSearchResult(GoogleSearchResult other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          Data = other.Data.Clone();
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoogleSearchResult Clone() {
      return new GoogleSearchResult(this);
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.GoogleSearchResult.Types.FullData Data {
      get { return resultCase_ == ResultOneofCase.Data ? (global::Nadeko.Microservices.GoogleSearchResult.Types.FullData) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Data;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.Errors Error {
      get { return resultCase_ == ResultOneofCase.Error ? (global::Nadeko.Microservices.Errors) result_ : 0; }
      set {
        result_ = value;
        resultCase_ = ResultOneofCase.Error;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "Result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Data = 1,
      Error = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoogleSearchResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoogleSearchResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (Error != other.Error) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Data) hash ^= Data.GetHashCode();
      if (resultCase_ == ResultOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.Data) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoogleSearchResult other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          if (Data == null) {
            Data = new global::Nadeko.Microservices.GoogleSearchResult.Types.FullData();
          }
          Data.MergeFrom(other.Data);
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Nadeko.Microservices.GoogleSearchResult.Types.FullData subBuilder = new global::Nadeko.Microservices.GoogleSearchResult.Types.FullData();
            if (resultCase_ == ResultOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
          case 16: {
            result_ = input.ReadEnum();
            resultCase_ = ResultOneofCase.Error;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GoogleSearchResult message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class FullData : pb::IMessage<FullData> {
        private static readonly pb::MessageParser<FullData> _parser = new pb::MessageParser<FullData>(() => new FullData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FullData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nadeko.Microservices.GoogleSearchResult.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FullData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FullData(FullData other) : this() {
          query_ = other.query_;
          fullQueryLink_ = other.fullQueryLink_;
          totalResults_ = other.totalResults_;
          results_ = other.results_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FullData Clone() {
          return new FullData(this);
        }

        /// <summary>Field number for the "Query" field.</summary>
        public const int QueryFieldNumber = 1;
        private string query_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Query {
          get { return query_; }
          set {
            query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "FullQueryLink" field.</summary>
        public const int FullQueryLinkFieldNumber = 2;
        private string fullQueryLink_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FullQueryLink {
          get { return fullQueryLink_; }
          set {
            fullQueryLink_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "TotalResults" field.</summary>
        public const int TotalResultsFieldNumber = 3;
        private string totalResults_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TotalResults {
          get { return totalResults_; }
          set {
            totalResults_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Results" field.</summary>
        public const int ResultsFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Nadeko.Microservices.GoogleSearchResult.Types.FullData.Types.Data> _repeated_results_codec
            = pb::FieldCodec.ForMessage(34, global::Nadeko.Microservices.GoogleSearchResult.Types.FullData.Types.Data.Parser);
        private readonly pbc::RepeatedField<global::Nadeko.Microservices.GoogleSearchResult.Types.FullData.Types.Data> results_ = new pbc::RepeatedField<global::Nadeko.Microservices.GoogleSearchResult.Types.FullData.Types.Data>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Nadeko.Microservices.GoogleSearchResult.Types.FullData.Types.Data> Results {
          get { return results_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FullData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FullData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Query != other.Query) return false;
          if (FullQueryLink != other.FullQueryLink) return false;
          if (TotalResults != other.TotalResults) return false;
          if(!results_.Equals(other.results_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Query.Length != 0) hash ^= Query.GetHashCode();
          if (FullQueryLink.Length != 0) hash ^= FullQueryLink.GetHashCode();
          if (TotalResults.Length != 0) hash ^= TotalResults.GetHashCode();
          hash ^= results_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Query.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Query);
          }
          if (FullQueryLink.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(FullQueryLink);
          }
          if (TotalResults.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(TotalResults);
          }
          results_.WriteTo(output, _repeated_results_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Query.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
          }
          if (FullQueryLink.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FullQueryLink);
          }
          if (TotalResults.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TotalResults);
          }
          size += results_.CalculateSize(_repeated_results_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FullData other) {
          if (other == null) {
            return;
          }
          if (other.Query.Length != 0) {
            Query = other.Query;
          }
          if (other.FullQueryLink.Length != 0) {
            FullQueryLink = other.FullQueryLink;
          }
          if (other.TotalResults.Length != 0) {
            TotalResults = other.TotalResults;
          }
          results_.Add(other.results_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Query = input.ReadString();
                break;
              }
              case 18: {
                FullQueryLink = input.ReadString();
                break;
              }
              case 26: {
                TotalResults = input.ReadString();
                break;
              }
              case 34: {
                results_.AddEntriesFrom(input, _repeated_results_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the FullData message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Data : pb::IMessage<Data> {
            private static readonly pb::MessageParser<Data> _parser = new pb::MessageParser<Data>(() => new Data());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Data> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Nadeko.Microservices.GoogleSearchResult.Types.FullData.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Data() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Data(Data other) : this() {
              url_ = other.url_;
              name_ = other.name_;
              text_ = other.text_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Data Clone() {
              return new Data(this);
            }

            /// <summary>Field number for the "Url" field.</summary>
            public const int UrlFieldNumber = 1;
            private string url_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Url {
              get { return url_; }
              set {
                url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "Name" field.</summary>
            public const int NameFieldNumber = 2;
            private string name_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Name {
              get { return name_; }
              set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "Text" field.</summary>
            public const int TextFieldNumber = 3;
            private string text_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Text {
              get { return text_; }
              set {
                text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Data);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Data other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Url != other.Url) return false;
              if (Name != other.Name) return false;
              if (Text != other.Text) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Url.Length != 0) hash ^= Url.GetHashCode();
              if (Name.Length != 0) hash ^= Name.GetHashCode();
              if (Text.Length != 0) hash ^= Text.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Url.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Url);
              }
              if (Name.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Name);
              }
              if (Text.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(Text);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Url.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
              }
              if (Name.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
              }
              if (Text.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Data other) {
              if (other == null) {
                return;
              }
              if (other.Url.Length != 0) {
                Url = other.Url;
              }
              if (other.Name.Length != 0) {
                Name = other.Name;
              }
              if (other.Text.Length != 0) {
                Text = other.Text;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Url = input.ReadString();
                    break;
                  }
                  case 18: {
                    Name = input.ReadString();
                    break;
                  }
                  case 26: {
                    Text = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class GoogleSearchRequest : pb::IMessage<GoogleSearchRequest> {
    private static readonly pb::MessageParser<GoogleSearchRequest> _parser = new pb::MessageParser<GoogleSearchRequest>(() => new GoogleSearchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoogleSearchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoogleSearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoogleSearchRequest(GoogleSearchRequest other) : this() {
      query_ = other.query_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoogleSearchRequest Clone() {
      return new GoogleSearchRequest(this);
    }

    /// <summary>Field number for the "Query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoogleSearchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoogleSearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoogleSearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MtgCardData : pb::IMessage<MtgCardData> {
    private static readonly pb::MessageParser<MtgCardData> _parser = new pb::MessageParser<MtgCardData>(() => new MtgCardData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MtgCardData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MtgCardData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MtgCardData(MtgCardData other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          Data = other.Data.Clone();
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MtgCardData Clone() {
      return new MtgCardData(this);
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.MtgCardData.Types.Info Data {
      get { return resultCase_ == ResultOneofCase.Data ? (global::Nadeko.Microservices.MtgCardData.Types.Info) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Data;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.Errors Error {
      get { return resultCase_ == ResultOneofCase.Error ? (global::Nadeko.Microservices.Errors) result_ : 0; }
      set {
        result_ = value;
        resultCase_ = ResultOneofCase.Error;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "Result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Data = 1,
      Error = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MtgCardData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MtgCardData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (Error != other.Error) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Data) hash ^= Data.GetHashCode();
      if (resultCase_ == ResultOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.Data) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MtgCardData other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          if (Data == null) {
            Data = new global::Nadeko.Microservices.MtgCardData.Types.Info();
          }
          Data.MergeFrom(other.Data);
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Nadeko.Microservices.MtgCardData.Types.Info subBuilder = new global::Nadeko.Microservices.MtgCardData.Types.Info();
            if (resultCase_ == ResultOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
          case 16: {
            result_ = input.ReadEnum();
            resultCase_ = ResultOneofCase.Error;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MtgCardData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Info : pb::IMessage<Info> {
        private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Info> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nadeko.Microservices.MtgCardData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info(Info other) : this() {
          storeUrls_ = other.storeUrls_.Clone();
          cost_ = other.cost_;
          types_ = other.types_;
          name_ = other.name_;
          description_ = other.description_;
          imageUrl_ = other.imageUrl_;
          flavor_ = other.flavor_;
          url_ = other.url_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info Clone() {
          return new Info(this);
        }

        /// <summary>Field number for the "StoreUrls" field.</summary>
        public const int StoreUrlsFieldNumber = 1;
        private static readonly pbc::MapField<string, string>.Codec _map_storeUrls_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 10);
        private readonly pbc::MapField<string, string> storeUrls_ = new pbc::MapField<string, string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, string> StoreUrls {
          get { return storeUrls_; }
        }

        /// <summary>Field number for the "Cost" field.</summary>
        public const int CostFieldNumber = 2;
        private string cost_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Cost {
          get { return cost_; }
          set {
            cost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Types" field.</summary>
        public const int Types_FieldNumber = 3;
        private string types_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Types_ {
          get { return types_; }
          set {
            types_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Name" field.</summary>
        public const int NameFieldNumber = 4;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Description" field.</summary>
        public const int DescriptionFieldNumber = 5;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ImageUrl" field.</summary>
        public const int ImageUrlFieldNumber = 6;
        private string imageUrl_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ImageUrl {
          get { return imageUrl_; }
          set {
            imageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Flavor" field.</summary>
        public const int FlavorFieldNumber = 7;
        private string flavor_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Flavor {
          get { return flavor_; }
          set {
            flavor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Url" field.</summary>
        public const int UrlFieldNumber = 8;
        private string url_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Url {
          get { return url_; }
          set {
            url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Info);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Info other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!StoreUrls.Equals(other.StoreUrls)) return false;
          if (Cost != other.Cost) return false;
          if (Types_ != other.Types_) return false;
          if (Name != other.Name) return false;
          if (Description != other.Description) return false;
          if (ImageUrl != other.ImageUrl) return false;
          if (Flavor != other.Flavor) return false;
          if (Url != other.Url) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= StoreUrls.GetHashCode();
          if (Cost.Length != 0) hash ^= Cost.GetHashCode();
          if (Types_.Length != 0) hash ^= Types_.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          if (ImageUrl.Length != 0) hash ^= ImageUrl.GetHashCode();
          if (Flavor.Length != 0) hash ^= Flavor.GetHashCode();
          if (Url.Length != 0) hash ^= Url.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          storeUrls_.WriteTo(output, _map_storeUrls_codec);
          if (Cost.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Cost);
          }
          if (Types_.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Types_);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Name);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Description);
          }
          if (ImageUrl.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(ImageUrl);
          }
          if (Flavor.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(Flavor);
          }
          if (Url.Length != 0) {
            output.WriteRawTag(66);
            output.WriteString(Url);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += storeUrls_.CalculateSize(_map_storeUrls_codec);
          if (Cost.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Cost);
          }
          if (Types_.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Types_);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (ImageUrl.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
          }
          if (Flavor.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Flavor);
          }
          if (Url.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Info other) {
          if (other == null) {
            return;
          }
          storeUrls_.Add(other.storeUrls_);
          if (other.Cost.Length != 0) {
            Cost = other.Cost;
          }
          if (other.Types_.Length != 0) {
            Types_ = other.Types_;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          if (other.ImageUrl.Length != 0) {
            ImageUrl = other.ImageUrl;
          }
          if (other.Flavor.Length != 0) {
            Flavor = other.Flavor;
          }
          if (other.Url.Length != 0) {
            Url = other.Url;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                storeUrls_.AddEntriesFrom(input, _map_storeUrls_codec);
                break;
              }
              case 18: {
                Cost = input.ReadString();
                break;
              }
              case 26: {
                Types_ = input.ReadString();
                break;
              }
              case 34: {
                Name = input.ReadString();
                break;
              }
              case 42: {
                Description = input.ReadString();
                break;
              }
              case 50: {
                ImageUrl = input.ReadString();
                break;
              }
              case 58: {
                Flavor = input.ReadString();
                break;
              }
              case 66: {
                Url = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class MtgCardRequest : pb::IMessage<MtgCardRequest> {
    private static readonly pb::MessageParser<MtgCardRequest> _parser = new pb::MessageParser<MtgCardRequest>(() => new MtgCardRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MtgCardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MtgCardRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MtgCardRequest(MtgCardRequest other) : this() {
      query_ = other.query_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MtgCardRequest Clone() {
      return new MtgCardRequest(this);
    }

    /// <summary>Field number for the "Query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MtgCardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MtgCardRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MtgCardRequest other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HearthstoneCardData : pb::IMessage<HearthstoneCardData> {
    private static readonly pb::MessageParser<HearthstoneCardData> _parser = new pb::MessageParser<HearthstoneCardData>(() => new HearthstoneCardData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HearthstoneCardData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HearthstoneCardData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HearthstoneCardData(HearthstoneCardData other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          Data = other.Data.Clone();
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HearthstoneCardData Clone() {
      return new HearthstoneCardData(this);
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.HearthstoneCardData.Types.HsData Data {
      get { return resultCase_ == ResultOneofCase.Data ? (global::Nadeko.Microservices.HearthstoneCardData.Types.HsData) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Data;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.Errors Error {
      get { return resultCase_ == ResultOneofCase.Error ? (global::Nadeko.Microservices.Errors) result_ : 0; }
      set {
        result_ = value;
        resultCase_ = ResultOneofCase.Error;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "Result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Data = 1,
      Error = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HearthstoneCardData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HearthstoneCardData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (Error != other.Error) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Data) hash ^= Data.GetHashCode();
      if (resultCase_ == ResultOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.Data) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HearthstoneCardData other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          if (Data == null) {
            Data = new global::Nadeko.Microservices.HearthstoneCardData.Types.HsData();
          }
          Data.MergeFrom(other.Data);
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Nadeko.Microservices.HearthstoneCardData.Types.HsData subBuilder = new global::Nadeko.Microservices.HearthstoneCardData.Types.HsData();
            if (resultCase_ == ResultOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
          case 16: {
            result_ = input.ReadEnum();
            resultCase_ = ResultOneofCase.Error;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HearthstoneCardData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class HsData : pb::IMessage<HsData> {
        private static readonly pb::MessageParser<HsData> _parser = new pb::MessageParser<HsData>(() => new HsData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HsData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nadeko.Microservices.HearthstoneCardData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HsData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HsData(HsData other) : this() {
          url_ = other.url_;
          flavor_ = other.flavor_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HsData Clone() {
          return new HsData(this);
        }

        /// <summary>Field number for the "Url" field.</summary>
        public const int UrlFieldNumber = 1;
        private string url_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Url {
          get { return url_; }
          set {
            url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Flavor" field.</summary>
        public const int FlavorFieldNumber = 2;
        private string flavor_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Flavor {
          get { return flavor_; }
          set {
            flavor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as HsData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HsData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Url != other.Url) return false;
          if (Flavor != other.Flavor) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Url.Length != 0) hash ^= Url.GetHashCode();
          if (Flavor.Length != 0) hash ^= Flavor.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Url.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Url);
          }
          if (Flavor.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Flavor);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Url.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
          }
          if (Flavor.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Flavor);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HsData other) {
          if (other == null) {
            return;
          }
          if (other.Url.Length != 0) {
            Url = other.Url;
          }
          if (other.Flavor.Length != 0) {
            Flavor = other.Flavor;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Url = input.ReadString();
                break;
              }
              case 18: {
                Flavor = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class HearthstoneCardRequest : pb::IMessage<HearthstoneCardRequest> {
    private static readonly pb::MessageParser<HearthstoneCardRequest> _parser = new pb::MessageParser<HearthstoneCardRequest>(() => new HearthstoneCardRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HearthstoneCardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HearthstoneCardRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HearthstoneCardRequest(HearthstoneCardRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HearthstoneCardRequest Clone() {
      return new HearthstoneCardRequest(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HearthstoneCardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HearthstoneCardRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HearthstoneCardRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UrbanDictReply : pb::IMessage<UrbanDictReply> {
    private static readonly pb::MessageParser<UrbanDictReply> _parser = new pb::MessageParser<UrbanDictReply>(() => new UrbanDictReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UrbanDictReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UrbanDictReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UrbanDictReply(UrbanDictReply other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
        case ResultOneofCase.Data:
          Data = other.Data.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UrbanDictReply Clone() {
      return new UrbanDictReply(this);
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.Errors Error {
      get { return resultCase_ == ResultOneofCase.Error ? (global::Nadeko.Microservices.Errors) result_ : 0; }
      set {
        result_ = value;
        resultCase_ = ResultOneofCase.Error;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.UrbanDictReply.Types.DefinitionsData Data {
      get { return resultCase_ == ResultOneofCase.Data ? (global::Nadeko.Microservices.UrbanDictReply.Types.DefinitionsData) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Data;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "Result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Error = 1,
      Data = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UrbanDictReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UrbanDictReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Error) hash ^= Error.GetHashCode();
      if (resultCase_ == ResultOneofCase.Data) hash ^= Data.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.Error) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Error);
      }
      if (resultCase_ == ResultOneofCase.Data) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (resultCase_ == ResultOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UrbanDictReply other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
        case ResultOneofCase.Data:
          if (Data == null) {
            Data = new global::Nadeko.Microservices.UrbanDictReply.Types.DefinitionsData();
          }
          Data.MergeFrom(other.Data);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            result_ = input.ReadEnum();
            resultCase_ = ResultOneofCase.Error;
            break;
          }
          case 18: {
            global::Nadeko.Microservices.UrbanDictReply.Types.DefinitionsData subBuilder = new global::Nadeko.Microservices.UrbanDictReply.Types.DefinitionsData();
            if (resultCase_ == ResultOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UrbanDictReply message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class UrbanDictData : pb::IMessage<UrbanDictData> {
        private static readonly pb::MessageParser<UrbanDictData> _parser = new pb::MessageParser<UrbanDictData>(() => new UrbanDictData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UrbanDictData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nadeko.Microservices.UrbanDictReply.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UrbanDictData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UrbanDictData(UrbanDictData other) : this() {
          url_ = other.url_;
          word_ = other.word_;
          definition_ = other.definition_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UrbanDictData Clone() {
          return new UrbanDictData(this);
        }

        /// <summary>Field number for the "Url" field.</summary>
        public const int UrlFieldNumber = 1;
        private string url_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Url {
          get { return url_; }
          set {
            url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Word" field.</summary>
        public const int WordFieldNumber = 2;
        private string word_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Word {
          get { return word_; }
          set {
            word_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Definition" field.</summary>
        public const int DefinitionFieldNumber = 3;
        private string definition_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Definition {
          get { return definition_; }
          set {
            definition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UrbanDictData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UrbanDictData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Url != other.Url) return false;
          if (Word != other.Word) return false;
          if (Definition != other.Definition) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Url.Length != 0) hash ^= Url.GetHashCode();
          if (Word.Length != 0) hash ^= Word.GetHashCode();
          if (Definition.Length != 0) hash ^= Definition.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Url.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Url);
          }
          if (Word.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Word);
          }
          if (Definition.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Definition);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Url.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
          }
          if (Word.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Word);
          }
          if (Definition.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Definition);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UrbanDictData other) {
          if (other == null) {
            return;
          }
          if (other.Url.Length != 0) {
            Url = other.Url;
          }
          if (other.Word.Length != 0) {
            Word = other.Word;
          }
          if (other.Definition.Length != 0) {
            Definition = other.Definition;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Url = input.ReadString();
                break;
              }
              case 18: {
                Word = input.ReadString();
                break;
              }
              case 26: {
                Definition = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class DefinitionsData : pb::IMessage<DefinitionsData> {
        private static readonly pb::MessageParser<DefinitionsData> _parser = new pb::MessageParser<DefinitionsData>(() => new DefinitionsData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DefinitionsData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nadeko.Microservices.UrbanDictReply.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DefinitionsData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DefinitionsData(DefinitionsData other) : this() {
          definitions_ = other.definitions_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DefinitionsData Clone() {
          return new DefinitionsData(this);
        }

        /// <summary>Field number for the "Definitions" field.</summary>
        public const int DefinitionsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Nadeko.Microservices.UrbanDictReply.Types.UrbanDictData> _repeated_definitions_codec
            = pb::FieldCodec.ForMessage(10, global::Nadeko.Microservices.UrbanDictReply.Types.UrbanDictData.Parser);
        private readonly pbc::RepeatedField<global::Nadeko.Microservices.UrbanDictReply.Types.UrbanDictData> definitions_ = new pbc::RepeatedField<global::Nadeko.Microservices.UrbanDictReply.Types.UrbanDictData>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Nadeko.Microservices.UrbanDictReply.Types.UrbanDictData> Definitions {
          get { return definitions_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DefinitionsData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DefinitionsData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!definitions_.Equals(other.definitions_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= definitions_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          definitions_.WriteTo(output, _repeated_definitions_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += definitions_.CalculateSize(_repeated_definitions_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DefinitionsData other) {
          if (other == null) {
            return;
          }
          definitions_.Add(other.definitions_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                definitions_.AddEntriesFrom(input, _repeated_definitions_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class UrbanDictRequest : pb::IMessage<UrbanDictRequest> {
    private static readonly pb::MessageParser<UrbanDictRequest> _parser = new pb::MessageParser<UrbanDictRequest>(() => new UrbanDictRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UrbanDictRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UrbanDictRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UrbanDictRequest(UrbanDictRequest other) : this() {
      query_ = other.query_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UrbanDictRequest Clone() {
      return new UrbanDictRequest(this);
    }

    /// <summary>Field number for the "Query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UrbanDictRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UrbanDictRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UrbanDictRequest other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DefineResponse : pb::IMessage<DefineResponse> {
    private static readonly pb::MessageParser<DefineResponse> _parser = new pb::MessageParser<DefineResponse>(() => new DefineResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefineResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefineResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefineResponse(DefineResponse other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          Data = other.Data.Clone();
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefineResponse Clone() {
      return new DefineResponse(this);
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.DefineResponse.Types.Info Data {
      get { return resultCase_ == ResultOneofCase.Data ? (global::Nadeko.Microservices.DefineResponse.Types.Info) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Data;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.Errors Error {
      get { return resultCase_ == ResultOneofCase.Error ? (global::Nadeko.Microservices.Errors) result_ : 0; }
      set {
        result_ = value;
        resultCase_ = ResultOneofCase.Error;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "Result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Data = 1,
      Error = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefineResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefineResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (Error != other.Error) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Data) hash ^= Data.GetHashCode();
      if (resultCase_ == ResultOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.Data) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefineResponse other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          if (Data == null) {
            Data = new global::Nadeko.Microservices.DefineResponse.Types.Info();
          }
          Data.MergeFrom(other.Data);
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Nadeko.Microservices.DefineResponse.Types.Info subBuilder = new global::Nadeko.Microservices.DefineResponse.Types.Info();
            if (resultCase_ == ResultOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
          case 16: {
            result_ = input.ReadEnum();
            resultCase_ = ResultOneofCase.Error;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DefineResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Info : pb::IMessage<Info> {
        private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Info> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nadeko.Microservices.DefineResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info(Info other) : this() {
          datas_ = other.datas_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info Clone() {
          return new Info(this);
        }

        /// <summary>Field number for the "datas" field.</summary>
        public const int DatasFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Nadeko.Microservices.DefineData> _repeated_datas_codec
            = pb::FieldCodec.ForMessage(10, global::Nadeko.Microservices.DefineData.Parser);
        private readonly pbc::RepeatedField<global::Nadeko.Microservices.DefineData> datas_ = new pbc::RepeatedField<global::Nadeko.Microservices.DefineData>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Nadeko.Microservices.DefineData> Datas {
          get { return datas_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Info);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Info other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!datas_.Equals(other.datas_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= datas_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          datas_.WriteTo(output, _repeated_datas_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += datas_.CalculateSize(_repeated_datas_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Info other) {
          if (other == null) {
            return;
          }
          datas_.Add(other.datas_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                datas_.AddEntriesFrom(input, _repeated_datas_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class DefineRequest : pb::IMessage<DefineRequest> {
    private static readonly pb::MessageParser<DefineRequest> _parser = new pb::MessageParser<DefineRequest>(() => new DefineRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefineRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefineRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefineRequest(DefineRequest other) : this() {
      word_ = other.word_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefineRequest Clone() {
      return new DefineRequest(this);
    }

    /// <summary>Field number for the "Word" field.</summary>
    public const int WordFieldNumber = 1;
    private string word_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Word {
      get { return word_; }
      set {
        word_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefineRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefineRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Word != other.Word) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Word.Length != 0) hash ^= Word.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Word.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Word);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Word.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Word);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefineRequest other) {
      if (other == null) {
        return;
      }
      if (other.Word.Length != 0) {
        Word = other.Word;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Word = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DefineData : pb::IMessage<DefineData> {
    private static readonly pb::MessageParser<DefineData> _parser = new pb::MessageParser<DefineData>(() => new DefineData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefineData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefineData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefineData(DefineData other) : this() {
      word_ = other.word_;
      definition_ = other.definition_;
      example_ = other.example_;
      wordType_ = other.wordType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefineData Clone() {
      return new DefineData(this);
    }

    /// <summary>Field number for the "Word" field.</summary>
    public const int WordFieldNumber = 1;
    private string word_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Word {
      get { return word_; }
      set {
        word_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Definition" field.</summary>
    public const int DefinitionFieldNumber = 2;
    private string definition_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Definition {
      get { return definition_; }
      set {
        definition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Example" field.</summary>
    public const int ExampleFieldNumber = 3;
    private string example_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Example {
      get { return example_; }
      set {
        example_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WordType" field.</summary>
    public const int WordTypeFieldNumber = 4;
    private string wordType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WordType {
      get { return wordType_; }
      set {
        wordType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefineData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefineData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Word != other.Word) return false;
      if (Definition != other.Definition) return false;
      if (Example != other.Example) return false;
      if (WordType != other.WordType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Word.Length != 0) hash ^= Word.GetHashCode();
      if (Definition.Length != 0) hash ^= Definition.GetHashCode();
      if (Example.Length != 0) hash ^= Example.GetHashCode();
      if (WordType.Length != 0) hash ^= WordType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Word.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Word);
      }
      if (Definition.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Definition);
      }
      if (Example.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Example);
      }
      if (WordType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WordType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Word.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Word);
      }
      if (Definition.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Definition);
      }
      if (Example.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Example);
      }
      if (WordType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WordType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefineData other) {
      if (other == null) {
        return;
      }
      if (other.Word.Length != 0) {
        Word = other.Word;
      }
      if (other.Definition.Length != 0) {
        Definition = other.Definition;
      }
      if (other.Example.Length != 0) {
        Example = other.Example;
      }
      if (other.WordType.Length != 0) {
        WordType = other.WordType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Word = input.ReadString();
            break;
          }
          case 18: {
            Definition = input.ReadString();
            break;
          }
          case 26: {
            Example = input.ReadString();
            break;
          }
          case 34: {
            WordType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///message HashTagData {
  ///string Name = 1;
  ///string Url = 2;
  ///string Text = 3;
  ///string Icon = 4;
  ///}
  ///
  ///message HashTagRequest {
  ///string Query = 1;
  ///}
  /// </summary>
  public sealed partial class CatFactReply : pb::IMessage<CatFactReply> {
    private static readonly pb::MessageParser<CatFactReply> _parser = new pb::MessageParser<CatFactReply>(() => new CatFactReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CatFactReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatFactReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatFactReply(CatFactReply other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          Data = other.Data.Clone();
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatFactReply Clone() {
      return new CatFactReply(this);
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.CatFactReply.Types.Info Data {
      get { return resultCase_ == ResultOneofCase.Data ? (global::Nadeko.Microservices.CatFactReply.Types.Info) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Data;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.Errors Error {
      get { return resultCase_ == ResultOneofCase.Error ? (global::Nadeko.Microservices.Errors) result_ : 0; }
      set {
        result_ = value;
        resultCase_ = ResultOneofCase.Error;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "Result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Data = 1,
      Error = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CatFactReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CatFactReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (Error != other.Error) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Data) hash ^= Data.GetHashCode();
      if (resultCase_ == ResultOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.Data) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CatFactReply other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          if (Data == null) {
            Data = new global::Nadeko.Microservices.CatFactReply.Types.Info();
          }
          Data.MergeFrom(other.Data);
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Nadeko.Microservices.CatFactReply.Types.Info subBuilder = new global::Nadeko.Microservices.CatFactReply.Types.Info();
            if (resultCase_ == ResultOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
          case 16: {
            result_ = input.ReadEnum();
            resultCase_ = ResultOneofCase.Error;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CatFactReply message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Info : pb::IMessage<Info> {
        private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Info> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nadeko.Microservices.CatFactReply.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info(Info other) : this() {
          fact_ = other.fact_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info Clone() {
          return new Info(this);
        }

        /// <summary>Field number for the "Fact" field.</summary>
        public const int FactFieldNumber = 1;
        private string fact_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Fact {
          get { return fact_; }
          set {
            fact_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Info);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Info other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Fact != other.Fact) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Fact.Length != 0) hash ^= Fact.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Fact.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Fact);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Fact.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Fact);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Info other) {
          if (other == null) {
            return;
          }
          if (other.Fact.Length != 0) {
            Fact = other.Fact;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Fact = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CatFactRequest : pb::IMessage<CatFactRequest> {
    private static readonly pb::MessageParser<CatFactRequest> _parser = new pb::MessageParser<CatFactRequest>(() => new CatFactRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CatFactRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatFactRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatFactRequest(CatFactRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatFactRequest Clone() {
      return new CatFactRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CatFactRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CatFactRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CatFactRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class WikipediaReply : pb::IMessage<WikipediaReply> {
    private static readonly pb::MessageParser<WikipediaReply> _parser = new pb::MessageParser<WikipediaReply>(() => new WikipediaReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WikipediaReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WikipediaReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WikipediaReply(WikipediaReply other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          Data = other.Data.Clone();
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WikipediaReply Clone() {
      return new WikipediaReply(this);
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.WikipediaReply.Types.Info Data {
      get { return resultCase_ == ResultOneofCase.Data ? (global::Nadeko.Microservices.WikipediaReply.Types.Info) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Data;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.Errors Error {
      get { return resultCase_ == ResultOneofCase.Error ? (global::Nadeko.Microservices.Errors) result_ : 0; }
      set {
        result_ = value;
        resultCase_ = ResultOneofCase.Error;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "Result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Data = 1,
      Error = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WikipediaReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WikipediaReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (Error != other.Error) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Data) hash ^= Data.GetHashCode();
      if (resultCase_ == ResultOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.Data) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WikipediaReply other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          if (Data == null) {
            Data = new global::Nadeko.Microservices.WikipediaReply.Types.Info();
          }
          Data.MergeFrom(other.Data);
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Nadeko.Microservices.WikipediaReply.Types.Info subBuilder = new global::Nadeko.Microservices.WikipediaReply.Types.Info();
            if (resultCase_ == ResultOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
          case 16: {
            result_ = input.ReadEnum();
            resultCase_ = ResultOneofCase.Error;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the WikipediaReply message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Info : pb::IMessage<Info> {
        private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Info> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nadeko.Microservices.WikipediaReply.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info(Info other) : this() {
          url_ = other.url_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info Clone() {
          return new Info(this);
        }

        /// <summary>Field number for the "Url" field.</summary>
        public const int UrlFieldNumber = 1;
        private string url_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Url {
          get { return url_; }
          set {
            url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Info);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Info other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Url != other.Url) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Url.Length != 0) hash ^= Url.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Url.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Url);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Url.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Info other) {
          if (other == null) {
            return;
          }
          if (other.Url.Length != 0) {
            Url = other.Url;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Url = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class WikipediaRequest : pb::IMessage<WikipediaRequest> {
    private static readonly pb::MessageParser<WikipediaRequest> _parser = new pb::MessageParser<WikipediaRequest>(() => new WikipediaRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WikipediaRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WikipediaRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WikipediaRequest(WikipediaRequest other) : this() {
      query_ = other.query_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WikipediaRequest Clone() {
      return new WikipediaRequest(this);
    }

    /// <summary>Field number for the "Query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WikipediaRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WikipediaRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WikipediaRequest other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BibleVerse : pb::IMessage<BibleVerse> {
    private static readonly pb::MessageParser<BibleVerse> _parser = new pb::MessageParser<BibleVerse>(() => new BibleVerse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BibleVerse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BibleVerse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BibleVerse(BibleVerse other) : this() {
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          Data = other.Data.Clone();
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BibleVerse Clone() {
      return new BibleVerse(this);
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.BibleVerse.Types.Info Data {
      get { return resultCase_ == ResultOneofCase.Data ? (global::Nadeko.Microservices.BibleVerse.Types.Info) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.Data;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.Errors Error {
      get { return resultCase_ == ResultOneofCase.Error ? (global::Nadeko.Microservices.Errors) result_ : 0; }
      set {
        result_ = value;
        resultCase_ = ResultOneofCase.Error;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "Result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      Data = 1,
      Error = 2,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BibleVerse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BibleVerse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (Error != other.Error) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultCase_ == ResultOneofCase.Data) hash ^= Data.GetHashCode();
      if (resultCase_ == ResultOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultCase_ == ResultOneofCase.Data) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultCase_ == ResultOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (resultCase_ == ResultOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BibleVerse other) {
      if (other == null) {
        return;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.Data:
          if (Data == null) {
            Data = new global::Nadeko.Microservices.BibleVerse.Types.Info();
          }
          Data.MergeFrom(other.Data);
          break;
        case ResultOneofCase.Error:
          Error = other.Error;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Nadeko.Microservices.BibleVerse.Types.Info subBuilder = new global::Nadeko.Microservices.BibleVerse.Types.Info();
            if (resultCase_ == ResultOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
          case 16: {
            result_ = input.ReadEnum();
            resultCase_ = ResultOneofCase.Error;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BibleVerse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Info : pb::IMessage<Info> {
        private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Info> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nadeko.Microservices.BibleVerse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info(Info other) : this() {
          bookName_ = other.bookName_;
          chapter_ = other.chapter_;
          verse_ = other.verse_;
          text_ = other.text_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info Clone() {
          return new Info(this);
        }

        /// <summary>Field number for the "BookName" field.</summary>
        public const int BookNameFieldNumber = 1;
        private string bookName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BookName {
          get { return bookName_; }
          set {
            bookName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Chapter" field.</summary>
        public const int ChapterFieldNumber = 2;
        private int chapter_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Chapter {
          get { return chapter_; }
          set {
            chapter_ = value;
          }
        }

        /// <summary>Field number for the "Verse" field.</summary>
        public const int VerseFieldNumber = 3;
        private int verse_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Verse {
          get { return verse_; }
          set {
            verse_ = value;
          }
        }

        /// <summary>Field number for the "Text" field.</summary>
        public const int TextFieldNumber = 4;
        private string text_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Text {
          get { return text_; }
          set {
            text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Info);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Info other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (BookName != other.BookName) return false;
          if (Chapter != other.Chapter) return false;
          if (Verse != other.Verse) return false;
          if (Text != other.Text) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (BookName.Length != 0) hash ^= BookName.GetHashCode();
          if (Chapter != 0) hash ^= Chapter.GetHashCode();
          if (Verse != 0) hash ^= Verse.GetHashCode();
          if (Text.Length != 0) hash ^= Text.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (BookName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(BookName);
          }
          if (Chapter != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Chapter);
          }
          if (Verse != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Verse);
          }
          if (Text.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Text);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (BookName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(BookName);
          }
          if (Chapter != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chapter);
          }
          if (Verse != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Verse);
          }
          if (Text.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Info other) {
          if (other == null) {
            return;
          }
          if (other.BookName.Length != 0) {
            BookName = other.BookName;
          }
          if (other.Chapter != 0) {
            Chapter = other.Chapter;
          }
          if (other.Verse != 0) {
            Verse = other.Verse;
          }
          if (other.Text.Length != 0) {
            Text = other.Text;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                BookName = input.ReadString();
                break;
              }
              case 16: {
                Chapter = input.ReadInt32();
                break;
              }
              case 24: {
                Verse = input.ReadInt32();
                break;
              }
              case 34: {
                Text = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class BibleRequest : pb::IMessage<BibleRequest> {
    private static readonly pb::MessageParser<BibleRequest> _parser = new pb::MessageParser<BibleRequest>(() => new BibleRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BibleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BibleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BibleRequest(BibleRequest other) : this() {
      book_ = other.book_;
      chapterAndVerse_ = other.chapterAndVerse_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BibleRequest Clone() {
      return new BibleRequest(this);
    }

    /// <summary>Field number for the "Book" field.</summary>
    public const int BookFieldNumber = 1;
    private string book_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Book {
      get { return book_; }
      set {
        book_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ChapterAndVerse" field.</summary>
    public const int ChapterAndVerseFieldNumber = 2;
    private string chapterAndVerse_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChapterAndVerse {
      get { return chapterAndVerse_; }
      set {
        chapterAndVerse_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BibleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BibleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Book != other.Book) return false;
      if (ChapterAndVerse != other.ChapterAndVerse) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Book.Length != 0) hash ^= Book.GetHashCode();
      if (ChapterAndVerse.Length != 0) hash ^= ChapterAndVerse.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Book.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Book);
      }
      if (ChapterAndVerse.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ChapterAndVerse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Book.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Book);
      }
      if (ChapterAndVerse.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChapterAndVerse);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BibleRequest other) {
      if (other == null) {
        return;
      }
      if (other.Book.Length != 0) {
        Book = other.Book;
      }
      if (other.ChapterAndVerse.Length != 0) {
        ChapterAndVerse = other.ChapterAndVerse;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Book = input.ReadString();
            break;
          }
          case 18: {
            ChapterAndVerse = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPicRequest : pb::IMessage<GetPicRequest> {
    private static readonly pb::MessageParser<GetPicRequest> _parser = new pb::MessageParser<GetPicRequest>(() => new GetPicRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPicRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPicRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPicRequest(GetPicRequest other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPicRequest Clone() {
      return new GetPicRequest(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Nadeko.Microservices.GetPicRequest.Types.PicType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.GetPicRequest.Types.PicType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPicRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPicRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPicRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Nadeko.Microservices.GetPicRequest.Types.PicType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetPicRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum PicType {
        [pbr::OriginalName("Cats")] Cats = 0,
        [pbr::OriginalName("Dogs")] Dogs = 1,
        [pbr::OriginalName("Birds")] Birds = 2,
        [pbr::OriginalName("Food")] Food = 3,
      }

    }
    #endregion

  }

  public sealed partial class HostedPicReply : pb::IMessage<HostedPicReply> {
    private static readonly pb::MessageParser<HostedPicReply> _parser = new pb::MessageParser<HostedPicReply>(() => new HostedPicReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HostedPicReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostedPicReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostedPicReply(HostedPicReply other) : this() {
      url_ = other.url_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostedPicReply Clone() {
      return new HostedPicReply(this);
    }

    /// <summary>Field number for the "Url" field.</summary>
    public const int UrlFieldNumber = 1;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HostedPicReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HostedPicReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HostedPicReply other) {
      if (other == null) {
        return;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
