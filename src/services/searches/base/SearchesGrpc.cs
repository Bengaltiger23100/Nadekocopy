// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: searches.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Nadeko.Microservices {
  public static partial class Searches
  {
    static readonly string __ServiceName = "nadeko.microservices.Searches";

    static readonly grpc::Marshaller<global::Nadeko.Microservices.GetPicRequest> __Marshaller_nadeko_microservices_GetPicRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.GetPicRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.HostedPicReply> __Marshaller_nadeko_microservices_HostedPicReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.HostedPicReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.BibleRequest> __Marshaller_nadeko_microservices_BibleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.BibleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.BibleVerse> __Marshaller_nadeko_microservices_BibleVerse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.BibleVerse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.WikipediaRequest> __Marshaller_nadeko_microservices_WikipediaRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.WikipediaRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.WikipediaReply> __Marshaller_nadeko_microservices_WikipediaReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.WikipediaReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.CatFactRequest> __Marshaller_nadeko_microservices_CatFactRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.CatFactRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.CatFactReply> __Marshaller_nadeko_microservices_CatFactReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.CatFactReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.DefineRequest> __Marshaller_nadeko_microservices_DefineRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.DefineRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.DefineResponse> __Marshaller_nadeko_microservices_DefineResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.DefineResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.UrbanDictRequest> __Marshaller_nadeko_microservices_UrbanDictRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.UrbanDictRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.UrbanDictReply> __Marshaller_nadeko_microservices_UrbanDictReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.UrbanDictReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.HearthstoneCardRequest> __Marshaller_nadeko_microservices_HearthstoneCardRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.HearthstoneCardRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.HearthstoneCardData> __Marshaller_nadeko_microservices_HearthstoneCardData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.HearthstoneCardData.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.MtgCardRequest> __Marshaller_nadeko_microservices_MtgCardRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.MtgCardRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.MtgCardData> __Marshaller_nadeko_microservices_MtgCardData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.MtgCardData.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.GoogleSearchRequest> __Marshaller_nadeko_microservices_GoogleSearchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.GoogleSearchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.GoogleSearchResult> __Marshaller_nadeko_microservices_GoogleSearchResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.GoogleSearchResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.ShortenUrlRequest> __Marshaller_nadeko_microservices_ShortenUrlRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.ShortenUrlRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.ShortenUrlReply> __Marshaller_nadeko_microservices_ShortenUrlReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.ShortenUrlReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.ImageSearchRequest> __Marshaller_nadeko_microservices_ImageSearchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.ImageSearchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.ImageSearchReply> __Marshaller_nadeko_microservices_ImageSearchReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.ImageSearchReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.MovieRequest> __Marshaller_nadeko_microservices_MovieRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.MovieRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.MovieData> __Marshaller_nadeko_microservices_MovieData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.MovieData.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.GetTimeRequest> __Marshaller_nadeko_microservices_GetTimeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.GetTimeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.GetTimeReply> __Marshaller_nadeko_microservices_GetTimeReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.GetTimeReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.WeatherRequest> __Marshaller_nadeko_microservices_WeatherRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.WeatherRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.WeatherData> __Marshaller_nadeko_microservices_WeatherData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.WeatherData.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.CryptoRequest> __Marshaller_nadeko_microservices_CryptoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.CryptoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.CryptoData> __Marshaller_nadeko_microservices_CryptoData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.CryptoData.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.XkcdRequest> __Marshaller_nadeko_microservices_XkcdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.XkcdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.XkcdReply> __Marshaller_nadeko_microservices_XkcdReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.XkcdReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.PokemonRequest> __Marshaller_nadeko_microservices_PokemonRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.PokemonRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.PokemonData> __Marshaller_nadeko_microservices_PokemonData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.PokemonData.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.PokeabRequest> __Marshaller_nadeko_microservices_PokeabRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.PokeabRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.PokeabData> __Marshaller_nadeko_microservices_PokeabData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.PokeabData.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.AnimeRequest> __Marshaller_nadeko_microservices_AnimeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.AnimeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.AnimeData> __Marshaller_nadeko_microservices_AnimeData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.AnimeData.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.MangaRequest> __Marshaller_nadeko_microservices_MangaRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.MangaRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.MangaData> __Marshaller_nadeko_microservices_MangaData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.MangaData.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.NovelRequest> __Marshaller_nadeko_microservices_NovelRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.NovelRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.NovelData> __Marshaller_nadeko_microservices_NovelData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.NovelData.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.GetYomamaJokeRequest> __Marshaller_nadeko_microservices_GetYomamaJokeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.GetYomamaJokeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.YomamaJoke> __Marshaller_nadeko_microservices_YomamaJoke = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.YomamaJoke.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.GetChuckNorrisJokeRequest> __Marshaller_nadeko_microservices_GetChuckNorrisJokeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.GetChuckNorrisJokeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.ChuckNorrisJoke> __Marshaller_nadeko_microservices_ChuckNorrisJoke = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.ChuckNorrisJoke.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.GetRandomJokeRequest> __Marshaller_nadeko_microservices_GetRandomJokeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.GetRandomJokeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.RandomJoke> __Marshaller_nadeko_microservices_RandomJoke = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.RandomJoke.Parser.ParseFrom);

    static readonly grpc::Method<global::Nadeko.Microservices.GetPicRequest, global::Nadeko.Microservices.HostedPicReply> __Method_GetRandomHostedPic = new grpc::Method<global::Nadeko.Microservices.GetPicRequest, global::Nadeko.Microservices.HostedPicReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRandomHostedPic",
        __Marshaller_nadeko_microservices_GetPicRequest,
        __Marshaller_nadeko_microservices_HostedPicReply);

    static readonly grpc::Method<global::Nadeko.Microservices.BibleRequest, global::Nadeko.Microservices.BibleVerse> __Method_GetBibleVerse = new grpc::Method<global::Nadeko.Microservices.BibleRequest, global::Nadeko.Microservices.BibleVerse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBibleVerse",
        __Marshaller_nadeko_microservices_BibleRequest,
        __Marshaller_nadeko_microservices_BibleVerse);

    static readonly grpc::Method<global::Nadeko.Microservices.WikipediaRequest, global::Nadeko.Microservices.WikipediaReply> __Method_GetWikipediaPage = new grpc::Method<global::Nadeko.Microservices.WikipediaRequest, global::Nadeko.Microservices.WikipediaReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWikipediaPage",
        __Marshaller_nadeko_microservices_WikipediaRequest,
        __Marshaller_nadeko_microservices_WikipediaReply);

    static readonly grpc::Method<global::Nadeko.Microservices.CatFactRequest, global::Nadeko.Microservices.CatFactReply> __Method_GetCatFact = new grpc::Method<global::Nadeko.Microservices.CatFactRequest, global::Nadeko.Microservices.CatFactReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCatFact",
        __Marshaller_nadeko_microservices_CatFactRequest,
        __Marshaller_nadeko_microservices_CatFactReply);

    static readonly grpc::Method<global::Nadeko.Microservices.DefineRequest, global::Nadeko.Microservices.DefineResponse> __Method_GetDefinition = new grpc::Method<global::Nadeko.Microservices.DefineRequest, global::Nadeko.Microservices.DefineResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDefinition",
        __Marshaller_nadeko_microservices_DefineRequest,
        __Marshaller_nadeko_microservices_DefineResponse);

    static readonly grpc::Method<global::Nadeko.Microservices.UrbanDictRequest, global::Nadeko.Microservices.UrbanDictReply> __Method_GetUrbanDictDefinition = new grpc::Method<global::Nadeko.Microservices.UrbanDictRequest, global::Nadeko.Microservices.UrbanDictReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUrbanDictDefinition",
        __Marshaller_nadeko_microservices_UrbanDictRequest,
        __Marshaller_nadeko_microservices_UrbanDictReply);

    static readonly grpc::Method<global::Nadeko.Microservices.HearthstoneCardRequest, global::Nadeko.Microservices.HearthstoneCardData> __Method_GetHearthstoneCard = new grpc::Method<global::Nadeko.Microservices.HearthstoneCardRequest, global::Nadeko.Microservices.HearthstoneCardData>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHearthstoneCard",
        __Marshaller_nadeko_microservices_HearthstoneCardRequest,
        __Marshaller_nadeko_microservices_HearthstoneCardData);

    static readonly grpc::Method<global::Nadeko.Microservices.MtgCardRequest, global::Nadeko.Microservices.MtgCardData> __Method_GetMtgCard = new grpc::Method<global::Nadeko.Microservices.MtgCardRequest, global::Nadeko.Microservices.MtgCardData>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMtgCard",
        __Marshaller_nadeko_microservices_MtgCardRequest,
        __Marshaller_nadeko_microservices_MtgCardData);

    static readonly grpc::Method<global::Nadeko.Microservices.GoogleSearchRequest, global::Nadeko.Microservices.GoogleSearchResult> __Method_SearchGoogle = new grpc::Method<global::Nadeko.Microservices.GoogleSearchRequest, global::Nadeko.Microservices.GoogleSearchResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchGoogle",
        __Marshaller_nadeko_microservices_GoogleSearchRequest,
        __Marshaller_nadeko_microservices_GoogleSearchResult);

    static readonly grpc::Method<global::Nadeko.Microservices.ShortenUrlRequest, global::Nadeko.Microservices.ShortenUrlReply> __Method_ShortenUrl = new grpc::Method<global::Nadeko.Microservices.ShortenUrlRequest, global::Nadeko.Microservices.ShortenUrlReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ShortenUrl",
        __Marshaller_nadeko_microservices_ShortenUrlRequest,
        __Marshaller_nadeko_microservices_ShortenUrlReply);

    static readonly grpc::Method<global::Nadeko.Microservices.ImageSearchRequest, global::Nadeko.Microservices.ImageSearchReply> __Method_ImageSearch = new grpc::Method<global::Nadeko.Microservices.ImageSearchRequest, global::Nadeko.Microservices.ImageSearchReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ImageSearch",
        __Marshaller_nadeko_microservices_ImageSearchRequest,
        __Marshaller_nadeko_microservices_ImageSearchReply);

    static readonly grpc::Method<global::Nadeko.Microservices.MovieRequest, global::Nadeko.Microservices.MovieData> __Method_GetMovie = new grpc::Method<global::Nadeko.Microservices.MovieRequest, global::Nadeko.Microservices.MovieData>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMovie",
        __Marshaller_nadeko_microservices_MovieRequest,
        __Marshaller_nadeko_microservices_MovieData);

    static readonly grpc::Method<global::Nadeko.Microservices.GetTimeRequest, global::Nadeko.Microservices.GetTimeReply> __Method_GetTime = new grpc::Method<global::Nadeko.Microservices.GetTimeRequest, global::Nadeko.Microservices.GetTimeReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTime",
        __Marshaller_nadeko_microservices_GetTimeRequest,
        __Marshaller_nadeko_microservices_GetTimeReply);

    static readonly grpc::Method<global::Nadeko.Microservices.WeatherRequest, global::Nadeko.Microservices.WeatherData> __Method_GetWeather = new grpc::Method<global::Nadeko.Microservices.WeatherRequest, global::Nadeko.Microservices.WeatherData>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWeather",
        __Marshaller_nadeko_microservices_WeatherRequest,
        __Marshaller_nadeko_microservices_WeatherData);

    static readonly grpc::Method<global::Nadeko.Microservices.CryptoRequest, global::Nadeko.Microservices.CryptoData> __Method_GetCryptoData = new grpc::Method<global::Nadeko.Microservices.CryptoRequest, global::Nadeko.Microservices.CryptoData>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCryptoData",
        __Marshaller_nadeko_microservices_CryptoRequest,
        __Marshaller_nadeko_microservices_CryptoData);

    static readonly grpc::Method<global::Nadeko.Microservices.XkcdRequest, global::Nadeko.Microservices.XkcdReply> __Method_GetXkcdComic = new grpc::Method<global::Nadeko.Microservices.XkcdRequest, global::Nadeko.Microservices.XkcdReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetXkcdComic",
        __Marshaller_nadeko_microservices_XkcdRequest,
        __Marshaller_nadeko_microservices_XkcdReply);

    static readonly grpc::Method<global::Nadeko.Microservices.PokemonRequest, global::Nadeko.Microservices.PokemonData> __Method_GetPokemon = new grpc::Method<global::Nadeko.Microservices.PokemonRequest, global::Nadeko.Microservices.PokemonData>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPokemon",
        __Marshaller_nadeko_microservices_PokemonRequest,
        __Marshaller_nadeko_microservices_PokemonData);

    static readonly grpc::Method<global::Nadeko.Microservices.PokeabRequest, global::Nadeko.Microservices.PokeabData> __Method_GetPokemonAbility = new grpc::Method<global::Nadeko.Microservices.PokeabRequest, global::Nadeko.Microservices.PokeabData>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPokemonAbility",
        __Marshaller_nadeko_microservices_PokeabRequest,
        __Marshaller_nadeko_microservices_PokeabData);

    static readonly grpc::Method<global::Nadeko.Microservices.AnimeRequest, global::Nadeko.Microservices.AnimeData> __Method_GetAnime = new grpc::Method<global::Nadeko.Microservices.AnimeRequest, global::Nadeko.Microservices.AnimeData>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAnime",
        __Marshaller_nadeko_microservices_AnimeRequest,
        __Marshaller_nadeko_microservices_AnimeData);

    static readonly grpc::Method<global::Nadeko.Microservices.MangaRequest, global::Nadeko.Microservices.MangaData> __Method_GetManga = new grpc::Method<global::Nadeko.Microservices.MangaRequest, global::Nadeko.Microservices.MangaData>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetManga",
        __Marshaller_nadeko_microservices_MangaRequest,
        __Marshaller_nadeko_microservices_MangaData);

    static readonly grpc::Method<global::Nadeko.Microservices.NovelRequest, global::Nadeko.Microservices.NovelData> __Method_GetNovel = new grpc::Method<global::Nadeko.Microservices.NovelRequest, global::Nadeko.Microservices.NovelData>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNovel",
        __Marshaller_nadeko_microservices_NovelRequest,
        __Marshaller_nadeko_microservices_NovelData);

    static readonly grpc::Method<global::Nadeko.Microservices.GetYomamaJokeRequest, global::Nadeko.Microservices.YomamaJoke> __Method_GetYomamaJoke = new grpc::Method<global::Nadeko.Microservices.GetYomamaJokeRequest, global::Nadeko.Microservices.YomamaJoke>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetYomamaJoke",
        __Marshaller_nadeko_microservices_GetYomamaJokeRequest,
        __Marshaller_nadeko_microservices_YomamaJoke);

    static readonly grpc::Method<global::Nadeko.Microservices.GetChuckNorrisJokeRequest, global::Nadeko.Microservices.ChuckNorrisJoke> __Method_GetChuckNorrisJoke = new grpc::Method<global::Nadeko.Microservices.GetChuckNorrisJokeRequest, global::Nadeko.Microservices.ChuckNorrisJoke>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetChuckNorrisJoke",
        __Marshaller_nadeko_microservices_GetChuckNorrisJokeRequest,
        __Marshaller_nadeko_microservices_ChuckNorrisJoke);

    static readonly grpc::Method<global::Nadeko.Microservices.GetRandomJokeRequest, global::Nadeko.Microservices.RandomJoke> __Method_GetRandomJoke = new grpc::Method<global::Nadeko.Microservices.GetRandomJokeRequest, global::Nadeko.Microservices.RandomJoke>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRandomJoke",
        __Marshaller_nadeko_microservices_GetRandomJokeRequest,
        __Marshaller_nadeko_microservices_RandomJoke);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Nadeko.Microservices.SearchesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Searches</summary>
    [grpc::BindServiceMethod(typeof(Searches), "BindService")]
    public abstract partial class SearchesBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.HostedPicReply> GetRandomHostedPic(global::Nadeko.Microservices.GetPicRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.BibleVerse> GetBibleVerse(global::Nadeko.Microservices.BibleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// rpc GetGamepadiaPage(GamepediaRequest) returns (GamepediaReply) {}
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.WikipediaReply> GetWikipediaPage(global::Nadeko.Microservices.WikipediaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.CatFactReply> GetCatFact(global::Nadeko.Microservices.CatFactRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// rpc GetHashtagDefinition(HashTagRequest) returns (HashTagData) {}
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.DefineResponse> GetDefinition(global::Nadeko.Microservices.DefineRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.UrbanDictReply> GetUrbanDictDefinition(global::Nadeko.Microservices.UrbanDictRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.HearthstoneCardData> GetHearthstoneCard(global::Nadeko.Microservices.HearthstoneCardRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.MtgCardData> GetMtgCard(global::Nadeko.Microservices.MtgCardRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.GoogleSearchResult> SearchGoogle(global::Nadeko.Microservices.GoogleSearchRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.ShortenUrlReply> ShortenUrl(global::Nadeko.Microservices.ShortenUrlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.ImageSearchReply> ImageSearch(global::Nadeko.Microservices.ImageSearchRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.MovieData> GetMovie(global::Nadeko.Microservices.MovieRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.GetTimeReply> GetTime(global::Nadeko.Microservices.GetTimeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.WeatherData> GetWeather(global::Nadeko.Microservices.WeatherRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.CryptoData> GetCryptoData(global::Nadeko.Microservices.CryptoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.XkcdReply> GetXkcdComic(global::Nadeko.Microservices.XkcdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.PokemonData> GetPokemon(global::Nadeko.Microservices.PokemonRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.PokeabData> GetPokemonAbility(global::Nadeko.Microservices.PokeabRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.AnimeData> GetAnime(global::Nadeko.Microservices.AnimeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.MangaData> GetManga(global::Nadeko.Microservices.MangaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// rpc GetMyAnimeListProfile(MalRequest) returns (MalData) {}
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.NovelData> GetNovel(global::Nadeko.Microservices.NovelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.YomamaJoke> GetYomamaJoke(global::Nadeko.Microservices.GetYomamaJokeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.ChuckNorrisJoke> GetChuckNorrisJoke(global::Nadeko.Microservices.GetChuckNorrisJokeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.RandomJoke> GetRandomJoke(global::Nadeko.Microservices.GetRandomJokeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Searches</summary>
    public partial class SearchesClient : grpc::ClientBase<SearchesClient>
    {
      /// <summary>Creates a new client for Searches</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SearchesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Searches that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SearchesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SearchesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SearchesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Nadeko.Microservices.HostedPicReply GetRandomHostedPic(global::Nadeko.Microservices.GetPicRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRandomHostedPic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.HostedPicReply GetRandomHostedPic(global::Nadeko.Microservices.GetPicRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRandomHostedPic, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.HostedPicReply> GetRandomHostedPicAsync(global::Nadeko.Microservices.GetPicRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRandomHostedPicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.HostedPicReply> GetRandomHostedPicAsync(global::Nadeko.Microservices.GetPicRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRandomHostedPic, null, options, request);
      }
      public virtual global::Nadeko.Microservices.BibleVerse GetBibleVerse(global::Nadeko.Microservices.BibleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBibleVerse(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.BibleVerse GetBibleVerse(global::Nadeko.Microservices.BibleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBibleVerse, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.BibleVerse> GetBibleVerseAsync(global::Nadeko.Microservices.BibleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBibleVerseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.BibleVerse> GetBibleVerseAsync(global::Nadeko.Microservices.BibleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBibleVerse, null, options, request);
      }
      /// <summary>
      /// rpc GetGamepadiaPage(GamepediaRequest) returns (GamepediaReply) {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nadeko.Microservices.WikipediaReply GetWikipediaPage(global::Nadeko.Microservices.WikipediaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWikipediaPage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// rpc GetGamepadiaPage(GamepediaRequest) returns (GamepediaReply) {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nadeko.Microservices.WikipediaReply GetWikipediaPage(global::Nadeko.Microservices.WikipediaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWikipediaPage, null, options, request);
      }
      /// <summary>
      /// rpc GetGamepadiaPage(GamepediaRequest) returns (GamepediaReply) {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.WikipediaReply> GetWikipediaPageAsync(global::Nadeko.Microservices.WikipediaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWikipediaPageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// rpc GetGamepadiaPage(GamepediaRequest) returns (GamepediaReply) {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.WikipediaReply> GetWikipediaPageAsync(global::Nadeko.Microservices.WikipediaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWikipediaPage, null, options, request);
      }
      public virtual global::Nadeko.Microservices.CatFactReply GetCatFact(global::Nadeko.Microservices.CatFactRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCatFact(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.CatFactReply GetCatFact(global::Nadeko.Microservices.CatFactRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCatFact, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.CatFactReply> GetCatFactAsync(global::Nadeko.Microservices.CatFactRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCatFactAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.CatFactReply> GetCatFactAsync(global::Nadeko.Microservices.CatFactRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCatFact, null, options, request);
      }
      /// <summary>
      /// rpc GetHashtagDefinition(HashTagRequest) returns (HashTagData) {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nadeko.Microservices.DefineResponse GetDefinition(global::Nadeko.Microservices.DefineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDefinition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// rpc GetHashtagDefinition(HashTagRequest) returns (HashTagData) {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nadeko.Microservices.DefineResponse GetDefinition(global::Nadeko.Microservices.DefineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDefinition, null, options, request);
      }
      /// <summary>
      /// rpc GetHashtagDefinition(HashTagRequest) returns (HashTagData) {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.DefineResponse> GetDefinitionAsync(global::Nadeko.Microservices.DefineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDefinitionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// rpc GetHashtagDefinition(HashTagRequest) returns (HashTagData) {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.DefineResponse> GetDefinitionAsync(global::Nadeko.Microservices.DefineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDefinition, null, options, request);
      }
      public virtual global::Nadeko.Microservices.UrbanDictReply GetUrbanDictDefinition(global::Nadeko.Microservices.UrbanDictRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUrbanDictDefinition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.UrbanDictReply GetUrbanDictDefinition(global::Nadeko.Microservices.UrbanDictRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUrbanDictDefinition, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.UrbanDictReply> GetUrbanDictDefinitionAsync(global::Nadeko.Microservices.UrbanDictRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUrbanDictDefinitionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.UrbanDictReply> GetUrbanDictDefinitionAsync(global::Nadeko.Microservices.UrbanDictRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUrbanDictDefinition, null, options, request);
      }
      public virtual global::Nadeko.Microservices.HearthstoneCardData GetHearthstoneCard(global::Nadeko.Microservices.HearthstoneCardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHearthstoneCard(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.HearthstoneCardData GetHearthstoneCard(global::Nadeko.Microservices.HearthstoneCardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHearthstoneCard, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.HearthstoneCardData> GetHearthstoneCardAsync(global::Nadeko.Microservices.HearthstoneCardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHearthstoneCardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.HearthstoneCardData> GetHearthstoneCardAsync(global::Nadeko.Microservices.HearthstoneCardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHearthstoneCard, null, options, request);
      }
      public virtual global::Nadeko.Microservices.MtgCardData GetMtgCard(global::Nadeko.Microservices.MtgCardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMtgCard(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.MtgCardData GetMtgCard(global::Nadeko.Microservices.MtgCardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMtgCard, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.MtgCardData> GetMtgCardAsync(global::Nadeko.Microservices.MtgCardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMtgCardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.MtgCardData> GetMtgCardAsync(global::Nadeko.Microservices.MtgCardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMtgCard, null, options, request);
      }
      public virtual global::Nadeko.Microservices.GoogleSearchResult SearchGoogle(global::Nadeko.Microservices.GoogleSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGoogle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.GoogleSearchResult SearchGoogle(global::Nadeko.Microservices.GoogleSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchGoogle, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.GoogleSearchResult> SearchGoogleAsync(global::Nadeko.Microservices.GoogleSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGoogleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.GoogleSearchResult> SearchGoogleAsync(global::Nadeko.Microservices.GoogleSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchGoogle, null, options, request);
      }
      public virtual global::Nadeko.Microservices.ShortenUrlReply ShortenUrl(global::Nadeko.Microservices.ShortenUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ShortenUrl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.ShortenUrlReply ShortenUrl(global::Nadeko.Microservices.ShortenUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ShortenUrl, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.ShortenUrlReply> ShortenUrlAsync(global::Nadeko.Microservices.ShortenUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ShortenUrlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.ShortenUrlReply> ShortenUrlAsync(global::Nadeko.Microservices.ShortenUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ShortenUrl, null, options, request);
      }
      public virtual global::Nadeko.Microservices.ImageSearchReply ImageSearch(global::Nadeko.Microservices.ImageSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImageSearch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.ImageSearchReply ImageSearch(global::Nadeko.Microservices.ImageSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ImageSearch, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.ImageSearchReply> ImageSearchAsync(global::Nadeko.Microservices.ImageSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImageSearchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.ImageSearchReply> ImageSearchAsync(global::Nadeko.Microservices.ImageSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ImageSearch, null, options, request);
      }
      public virtual global::Nadeko.Microservices.MovieData GetMovie(global::Nadeko.Microservices.MovieRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMovie(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.MovieData GetMovie(global::Nadeko.Microservices.MovieRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMovie, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.MovieData> GetMovieAsync(global::Nadeko.Microservices.MovieRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMovieAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.MovieData> GetMovieAsync(global::Nadeko.Microservices.MovieRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMovie, null, options, request);
      }
      public virtual global::Nadeko.Microservices.GetTimeReply GetTime(global::Nadeko.Microservices.GetTimeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTime(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.GetTimeReply GetTime(global::Nadeko.Microservices.GetTimeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTime, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.GetTimeReply> GetTimeAsync(global::Nadeko.Microservices.GetTimeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTimeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.GetTimeReply> GetTimeAsync(global::Nadeko.Microservices.GetTimeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTime, null, options, request);
      }
      public virtual global::Nadeko.Microservices.WeatherData GetWeather(global::Nadeko.Microservices.WeatherRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWeather(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.WeatherData GetWeather(global::Nadeko.Microservices.WeatherRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWeather, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.WeatherData> GetWeatherAsync(global::Nadeko.Microservices.WeatherRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWeatherAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.WeatherData> GetWeatherAsync(global::Nadeko.Microservices.WeatherRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWeather, null, options, request);
      }
      public virtual global::Nadeko.Microservices.CryptoData GetCryptoData(global::Nadeko.Microservices.CryptoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCryptoData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.CryptoData GetCryptoData(global::Nadeko.Microservices.CryptoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCryptoData, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.CryptoData> GetCryptoDataAsync(global::Nadeko.Microservices.CryptoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCryptoDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.CryptoData> GetCryptoDataAsync(global::Nadeko.Microservices.CryptoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCryptoData, null, options, request);
      }
      public virtual global::Nadeko.Microservices.XkcdReply GetXkcdComic(global::Nadeko.Microservices.XkcdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetXkcdComic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.XkcdReply GetXkcdComic(global::Nadeko.Microservices.XkcdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetXkcdComic, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.XkcdReply> GetXkcdComicAsync(global::Nadeko.Microservices.XkcdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetXkcdComicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.XkcdReply> GetXkcdComicAsync(global::Nadeko.Microservices.XkcdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetXkcdComic, null, options, request);
      }
      public virtual global::Nadeko.Microservices.PokemonData GetPokemon(global::Nadeko.Microservices.PokemonRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPokemon(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.PokemonData GetPokemon(global::Nadeko.Microservices.PokemonRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPokemon, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.PokemonData> GetPokemonAsync(global::Nadeko.Microservices.PokemonRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPokemonAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.PokemonData> GetPokemonAsync(global::Nadeko.Microservices.PokemonRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPokemon, null, options, request);
      }
      public virtual global::Nadeko.Microservices.PokeabData GetPokemonAbility(global::Nadeko.Microservices.PokeabRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPokemonAbility(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.PokeabData GetPokemonAbility(global::Nadeko.Microservices.PokeabRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPokemonAbility, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.PokeabData> GetPokemonAbilityAsync(global::Nadeko.Microservices.PokeabRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPokemonAbilityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.PokeabData> GetPokemonAbilityAsync(global::Nadeko.Microservices.PokeabRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPokemonAbility, null, options, request);
      }
      public virtual global::Nadeko.Microservices.AnimeData GetAnime(global::Nadeko.Microservices.AnimeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnime(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.AnimeData GetAnime(global::Nadeko.Microservices.AnimeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAnime, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.AnimeData> GetAnimeAsync(global::Nadeko.Microservices.AnimeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnimeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.AnimeData> GetAnimeAsync(global::Nadeko.Microservices.AnimeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAnime, null, options, request);
      }
      public virtual global::Nadeko.Microservices.MangaData GetManga(global::Nadeko.Microservices.MangaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetManga(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.MangaData GetManga(global::Nadeko.Microservices.MangaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetManga, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.MangaData> GetMangaAsync(global::Nadeko.Microservices.MangaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMangaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.MangaData> GetMangaAsync(global::Nadeko.Microservices.MangaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetManga, null, options, request);
      }
      /// <summary>
      /// rpc GetMyAnimeListProfile(MalRequest) returns (MalData) {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nadeko.Microservices.NovelData GetNovel(global::Nadeko.Microservices.NovelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNovel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// rpc GetMyAnimeListProfile(MalRequest) returns (MalData) {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nadeko.Microservices.NovelData GetNovel(global::Nadeko.Microservices.NovelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNovel, null, options, request);
      }
      /// <summary>
      /// rpc GetMyAnimeListProfile(MalRequest) returns (MalData) {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.NovelData> GetNovelAsync(global::Nadeko.Microservices.NovelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNovelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// rpc GetMyAnimeListProfile(MalRequest) returns (MalData) {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.NovelData> GetNovelAsync(global::Nadeko.Microservices.NovelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNovel, null, options, request);
      }
      public virtual global::Nadeko.Microservices.YomamaJoke GetYomamaJoke(global::Nadeko.Microservices.GetYomamaJokeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetYomamaJoke(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.YomamaJoke GetYomamaJoke(global::Nadeko.Microservices.GetYomamaJokeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetYomamaJoke, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.YomamaJoke> GetYomamaJokeAsync(global::Nadeko.Microservices.GetYomamaJokeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetYomamaJokeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.YomamaJoke> GetYomamaJokeAsync(global::Nadeko.Microservices.GetYomamaJokeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetYomamaJoke, null, options, request);
      }
      public virtual global::Nadeko.Microservices.ChuckNorrisJoke GetChuckNorrisJoke(global::Nadeko.Microservices.GetChuckNorrisJokeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChuckNorrisJoke(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.ChuckNorrisJoke GetChuckNorrisJoke(global::Nadeko.Microservices.GetChuckNorrisJokeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetChuckNorrisJoke, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.ChuckNorrisJoke> GetChuckNorrisJokeAsync(global::Nadeko.Microservices.GetChuckNorrisJokeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChuckNorrisJokeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.ChuckNorrisJoke> GetChuckNorrisJokeAsync(global::Nadeko.Microservices.GetChuckNorrisJokeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetChuckNorrisJoke, null, options, request);
      }
      public virtual global::Nadeko.Microservices.RandomJoke GetRandomJoke(global::Nadeko.Microservices.GetRandomJokeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRandomJoke(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.RandomJoke GetRandomJoke(global::Nadeko.Microservices.GetRandomJokeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRandomJoke, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.RandomJoke> GetRandomJokeAsync(global::Nadeko.Microservices.GetRandomJokeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRandomJokeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.RandomJoke> GetRandomJokeAsync(global::Nadeko.Microservices.GetRandomJokeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRandomJoke, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SearchesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SearchesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SearchesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetRandomHostedPic, serviceImpl.GetRandomHostedPic)
          .AddMethod(__Method_GetBibleVerse, serviceImpl.GetBibleVerse)
          .AddMethod(__Method_GetWikipediaPage, serviceImpl.GetWikipediaPage)
          .AddMethod(__Method_GetCatFact, serviceImpl.GetCatFact)
          .AddMethod(__Method_GetDefinition, serviceImpl.GetDefinition)
          .AddMethod(__Method_GetUrbanDictDefinition, serviceImpl.GetUrbanDictDefinition)
          .AddMethod(__Method_GetHearthstoneCard, serviceImpl.GetHearthstoneCard)
          .AddMethod(__Method_GetMtgCard, serviceImpl.GetMtgCard)
          .AddMethod(__Method_SearchGoogle, serviceImpl.SearchGoogle)
          .AddMethod(__Method_ShortenUrl, serviceImpl.ShortenUrl)
          .AddMethod(__Method_ImageSearch, serviceImpl.ImageSearch)
          .AddMethod(__Method_GetMovie, serviceImpl.GetMovie)
          .AddMethod(__Method_GetTime, serviceImpl.GetTime)
          .AddMethod(__Method_GetWeather, serviceImpl.GetWeather)
          .AddMethod(__Method_GetCryptoData, serviceImpl.GetCryptoData)
          .AddMethod(__Method_GetXkcdComic, serviceImpl.GetXkcdComic)
          .AddMethod(__Method_GetPokemon, serviceImpl.GetPokemon)
          .AddMethod(__Method_GetPokemonAbility, serviceImpl.GetPokemonAbility)
          .AddMethod(__Method_GetAnime, serviceImpl.GetAnime)
          .AddMethod(__Method_GetManga, serviceImpl.GetManga)
          .AddMethod(__Method_GetNovel, serviceImpl.GetNovel)
          .AddMethod(__Method_GetYomamaJoke, serviceImpl.GetYomamaJoke)
          .AddMethod(__Method_GetChuckNorrisJoke, serviceImpl.GetChuckNorrisJoke)
          .AddMethod(__Method_GetRandomJoke, serviceImpl.GetRandomJoke).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SearchesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetRandomHostedPic, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.GetPicRequest, global::Nadeko.Microservices.HostedPicReply>(serviceImpl.GetRandomHostedPic));
      serviceBinder.AddMethod(__Method_GetBibleVerse, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.BibleRequest, global::Nadeko.Microservices.BibleVerse>(serviceImpl.GetBibleVerse));
      serviceBinder.AddMethod(__Method_GetWikipediaPage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.WikipediaRequest, global::Nadeko.Microservices.WikipediaReply>(serviceImpl.GetWikipediaPage));
      serviceBinder.AddMethod(__Method_GetCatFact, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.CatFactRequest, global::Nadeko.Microservices.CatFactReply>(serviceImpl.GetCatFact));
      serviceBinder.AddMethod(__Method_GetDefinition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.DefineRequest, global::Nadeko.Microservices.DefineResponse>(serviceImpl.GetDefinition));
      serviceBinder.AddMethod(__Method_GetUrbanDictDefinition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.UrbanDictRequest, global::Nadeko.Microservices.UrbanDictReply>(serviceImpl.GetUrbanDictDefinition));
      serviceBinder.AddMethod(__Method_GetHearthstoneCard, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.HearthstoneCardRequest, global::Nadeko.Microservices.HearthstoneCardData>(serviceImpl.GetHearthstoneCard));
      serviceBinder.AddMethod(__Method_GetMtgCard, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.MtgCardRequest, global::Nadeko.Microservices.MtgCardData>(serviceImpl.GetMtgCard));
      serviceBinder.AddMethod(__Method_SearchGoogle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.GoogleSearchRequest, global::Nadeko.Microservices.GoogleSearchResult>(serviceImpl.SearchGoogle));
      serviceBinder.AddMethod(__Method_ShortenUrl, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.ShortenUrlRequest, global::Nadeko.Microservices.ShortenUrlReply>(serviceImpl.ShortenUrl));
      serviceBinder.AddMethod(__Method_ImageSearch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.ImageSearchRequest, global::Nadeko.Microservices.ImageSearchReply>(serviceImpl.ImageSearch));
      serviceBinder.AddMethod(__Method_GetMovie, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.MovieRequest, global::Nadeko.Microservices.MovieData>(serviceImpl.GetMovie));
      serviceBinder.AddMethod(__Method_GetTime, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.GetTimeRequest, global::Nadeko.Microservices.GetTimeReply>(serviceImpl.GetTime));
      serviceBinder.AddMethod(__Method_GetWeather, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.WeatherRequest, global::Nadeko.Microservices.WeatherData>(serviceImpl.GetWeather));
      serviceBinder.AddMethod(__Method_GetCryptoData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.CryptoRequest, global::Nadeko.Microservices.CryptoData>(serviceImpl.GetCryptoData));
      serviceBinder.AddMethod(__Method_GetXkcdComic, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.XkcdRequest, global::Nadeko.Microservices.XkcdReply>(serviceImpl.GetXkcdComic));
      serviceBinder.AddMethod(__Method_GetPokemon, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.PokemonRequest, global::Nadeko.Microservices.PokemonData>(serviceImpl.GetPokemon));
      serviceBinder.AddMethod(__Method_GetPokemonAbility, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.PokeabRequest, global::Nadeko.Microservices.PokeabData>(serviceImpl.GetPokemonAbility));
      serviceBinder.AddMethod(__Method_GetAnime, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.AnimeRequest, global::Nadeko.Microservices.AnimeData>(serviceImpl.GetAnime));
      serviceBinder.AddMethod(__Method_GetManga, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.MangaRequest, global::Nadeko.Microservices.MangaData>(serviceImpl.GetManga));
      serviceBinder.AddMethod(__Method_GetNovel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.NovelRequest, global::Nadeko.Microservices.NovelData>(serviceImpl.GetNovel));
      serviceBinder.AddMethod(__Method_GetYomamaJoke, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.GetYomamaJokeRequest, global::Nadeko.Microservices.YomamaJoke>(serviceImpl.GetYomamaJoke));
      serviceBinder.AddMethod(__Method_GetChuckNorrisJoke, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.GetChuckNorrisJokeRequest, global::Nadeko.Microservices.ChuckNorrisJoke>(serviceImpl.GetChuckNorrisJoke));
      serviceBinder.AddMethod(__Method_GetRandomJoke, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.GetRandomJokeRequest, global::Nadeko.Microservices.RandomJoke>(serviceImpl.GetRandomJoke));
    }

  }
}
#endregion
