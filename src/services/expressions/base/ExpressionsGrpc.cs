// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: expressions.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Nadeko.Microservices {
  public static partial class Expressions
  {
    static readonly string __ServiceName = "nadeko.microservices.Expressions";

    static readonly grpc::Marshaller<global::Nadeko.Microservices.AddExpresionRequest> __Marshaller_nadeko_microservices_AddExpresionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.AddExpresionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.AddExpressionReply> __Marshaller_nadeko_microservices_AddExpressionReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.AddExpressionReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.ListExpressionsRequest> __Marshaller_nadeko_microservices_ListExpressionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.ListExpressionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.ListExpressionsReply> __Marshaller_nadeko_microservices_ListExpressionsReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.ListExpressionsReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.DeleteExpressionRequest> __Marshaller_nadeko_microservices_DeleteExpressionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.DeleteExpressionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.DeleteExpressionReply> __Marshaller_nadeko_microservices_DeleteExpressionReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.DeleteExpressionReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.DeleteAllExpressionsRequest> __Marshaller_nadeko_microservices_DeleteAllExpressionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.DeleteAllExpressionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.DeleteAllExpressionsReply> __Marshaller_nadeko_microservices_DeleteAllExpressionsReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.DeleteAllExpressionsReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.EditExpressionRequest> __Marshaller_nadeko_microservices_EditExpressionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.EditExpressionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.EditExpressionReply> __Marshaller_nadeko_microservices_EditExpressionReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.EditExpressionReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.GetExpressionRequest> __Marshaller_nadeko_microservices_GetExpressionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.GetExpressionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.GetExpressionReply> __Marshaller_nadeko_microservices_GetExpressionReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.GetExpressionReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.FindExpressionRequest> __Marshaller_nadeko_microservices_FindExpressionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.FindExpressionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.FindExpressionReply> __Marshaller_nadeko_microservices_FindExpressionReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.FindExpressionReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.GetRandomExpressionRequest> __Marshaller_nadeko_microservices_GetRandomExpressionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.GetRandomExpressionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.GetRandomExpressionReply> __Marshaller_nadeko_microservices_GetRandomExpressionReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.GetRandomExpressionReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.ExpressionBehaviorRequest> __Marshaller_nadeko_microservices_ExpressionBehaviorRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.ExpressionBehaviorRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.ExpressionBehaviorReply> __Marshaller_nadeko_microservices_ExpressionBehaviorReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.ExpressionBehaviorReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.QueryForExpressionRequest> __Marshaller_nadeko_microservices_QueryForExpressionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.QueryForExpressionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nadeko.Microservices.QueryForExpressionReply> __Marshaller_nadeko_microservices_QueryForExpressionReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nadeko.Microservices.QueryForExpressionReply.Parser.ParseFrom);

    static readonly grpc::Method<global::Nadeko.Microservices.AddExpresionRequest, global::Nadeko.Microservices.AddExpressionReply> __Method_AddExpression = new grpc::Method<global::Nadeko.Microservices.AddExpresionRequest, global::Nadeko.Microservices.AddExpressionReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddExpression",
        __Marshaller_nadeko_microservices_AddExpresionRequest,
        __Marshaller_nadeko_microservices_AddExpressionReply);

    static readonly grpc::Method<global::Nadeko.Microservices.ListExpressionsRequest, global::Nadeko.Microservices.ListExpressionsReply> __Method_ListExpressions = new grpc::Method<global::Nadeko.Microservices.ListExpressionsRequest, global::Nadeko.Microservices.ListExpressionsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListExpressions",
        __Marshaller_nadeko_microservices_ListExpressionsRequest,
        __Marshaller_nadeko_microservices_ListExpressionsReply);

    static readonly grpc::Method<global::Nadeko.Microservices.DeleteExpressionRequest, global::Nadeko.Microservices.DeleteExpressionReply> __Method_DeleteExpression = new grpc::Method<global::Nadeko.Microservices.DeleteExpressionRequest, global::Nadeko.Microservices.DeleteExpressionReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteExpression",
        __Marshaller_nadeko_microservices_DeleteExpressionRequest,
        __Marshaller_nadeko_microservices_DeleteExpressionReply);

    static readonly grpc::Method<global::Nadeko.Microservices.DeleteAllExpressionsRequest, global::Nadeko.Microservices.DeleteAllExpressionsReply> __Method_DeleteAllExpressions = new grpc::Method<global::Nadeko.Microservices.DeleteAllExpressionsRequest, global::Nadeko.Microservices.DeleteAllExpressionsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAllExpressions",
        __Marshaller_nadeko_microservices_DeleteAllExpressionsRequest,
        __Marshaller_nadeko_microservices_DeleteAllExpressionsReply);

    static readonly grpc::Method<global::Nadeko.Microservices.EditExpressionRequest, global::Nadeko.Microservices.EditExpressionReply> __Method_EditExpression = new grpc::Method<global::Nadeko.Microservices.EditExpressionRequest, global::Nadeko.Microservices.EditExpressionReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EditExpression",
        __Marshaller_nadeko_microservices_EditExpressionRequest,
        __Marshaller_nadeko_microservices_EditExpressionReply);

    static readonly grpc::Method<global::Nadeko.Microservices.GetExpressionRequest, global::Nadeko.Microservices.GetExpressionReply> __Method_GetExpression = new grpc::Method<global::Nadeko.Microservices.GetExpressionRequest, global::Nadeko.Microservices.GetExpressionReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetExpression",
        __Marshaller_nadeko_microservices_GetExpressionRequest,
        __Marshaller_nadeko_microservices_GetExpressionReply);

    static readonly grpc::Method<global::Nadeko.Microservices.FindExpressionRequest, global::Nadeko.Microservices.FindExpressionReply> __Method_FindExpression = new grpc::Method<global::Nadeko.Microservices.FindExpressionRequest, global::Nadeko.Microservices.FindExpressionReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FindExpression",
        __Marshaller_nadeko_microservices_FindExpressionRequest,
        __Marshaller_nadeko_microservices_FindExpressionReply);

    static readonly grpc::Method<global::Nadeko.Microservices.GetRandomExpressionRequest, global::Nadeko.Microservices.GetRandomExpressionReply> __Method_GetRandomExpression = new grpc::Method<global::Nadeko.Microservices.GetRandomExpressionRequest, global::Nadeko.Microservices.GetRandomExpressionReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRandomExpression",
        __Marshaller_nadeko_microservices_GetRandomExpressionRequest,
        __Marshaller_nadeko_microservices_GetRandomExpressionReply);

    static readonly grpc::Method<global::Nadeko.Microservices.ExpressionBehaviorRequest, global::Nadeko.Microservices.ExpressionBehaviorReply> __Method_SetExpresssionBehavior = new grpc::Method<global::Nadeko.Microservices.ExpressionBehaviorRequest, global::Nadeko.Microservices.ExpressionBehaviorReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetExpresssionBehavior",
        __Marshaller_nadeko_microservices_ExpressionBehaviorRequest,
        __Marshaller_nadeko_microservices_ExpressionBehaviorReply);

    static readonly grpc::Method<global::Nadeko.Microservices.QueryForExpressionRequest, global::Nadeko.Microservices.QueryForExpressionReply> __Method_QueryForExpression = new grpc::Method<global::Nadeko.Microservices.QueryForExpressionRequest, global::Nadeko.Microservices.QueryForExpressionReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryForExpression",
        __Marshaller_nadeko_microservices_QueryForExpressionRequest,
        __Marshaller_nadeko_microservices_QueryForExpressionReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Expressions</summary>
    [grpc::BindServiceMethod(typeof(Expressions), "BindService")]
    public abstract partial class ExpressionsBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.AddExpressionReply> AddExpression(global::Nadeko.Microservices.AddExpresionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.ListExpressionsReply> ListExpressions(global::Nadeko.Microservices.ListExpressionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.DeleteExpressionReply> DeleteExpression(global::Nadeko.Microservices.DeleteExpressionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.DeleteAllExpressionsReply> DeleteAllExpressions(global::Nadeko.Microservices.DeleteAllExpressionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.EditExpressionReply> EditExpression(global::Nadeko.Microservices.EditExpressionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.GetExpressionReply> GetExpression(global::Nadeko.Microservices.GetExpressionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.FindExpressionReply> FindExpression(global::Nadeko.Microservices.FindExpressionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.GetRandomExpressionReply> GetRandomExpression(global::Nadeko.Microservices.GetRandomExpressionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.ExpressionBehaviorReply> SetExpresssionBehavior(global::Nadeko.Microservices.ExpressionBehaviorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nadeko.Microservices.QueryForExpressionReply> QueryForExpression(global::Nadeko.Microservices.QueryForExpressionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Expressions</summary>
    public partial class ExpressionsClient : grpc::ClientBase<ExpressionsClient>
    {
      /// <summary>Creates a new client for Expressions</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ExpressionsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Expressions that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ExpressionsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ExpressionsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ExpressionsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Nadeko.Microservices.AddExpressionReply AddExpression(global::Nadeko.Microservices.AddExpresionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddExpression(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.AddExpressionReply AddExpression(global::Nadeko.Microservices.AddExpresionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddExpression, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.AddExpressionReply> AddExpressionAsync(global::Nadeko.Microservices.AddExpresionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddExpressionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.AddExpressionReply> AddExpressionAsync(global::Nadeko.Microservices.AddExpresionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddExpression, null, options, request);
      }
      public virtual global::Nadeko.Microservices.ListExpressionsReply ListExpressions(global::Nadeko.Microservices.ListExpressionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListExpressions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.ListExpressionsReply ListExpressions(global::Nadeko.Microservices.ListExpressionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListExpressions, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.ListExpressionsReply> ListExpressionsAsync(global::Nadeko.Microservices.ListExpressionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListExpressionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.ListExpressionsReply> ListExpressionsAsync(global::Nadeko.Microservices.ListExpressionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListExpressions, null, options, request);
      }
      public virtual global::Nadeko.Microservices.DeleteExpressionReply DeleteExpression(global::Nadeko.Microservices.DeleteExpressionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteExpression(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.DeleteExpressionReply DeleteExpression(global::Nadeko.Microservices.DeleteExpressionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteExpression, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.DeleteExpressionReply> DeleteExpressionAsync(global::Nadeko.Microservices.DeleteExpressionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteExpressionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.DeleteExpressionReply> DeleteExpressionAsync(global::Nadeko.Microservices.DeleteExpressionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteExpression, null, options, request);
      }
      public virtual global::Nadeko.Microservices.DeleteAllExpressionsReply DeleteAllExpressions(global::Nadeko.Microservices.DeleteAllExpressionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAllExpressions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.DeleteAllExpressionsReply DeleteAllExpressions(global::Nadeko.Microservices.DeleteAllExpressionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAllExpressions, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.DeleteAllExpressionsReply> DeleteAllExpressionsAsync(global::Nadeko.Microservices.DeleteAllExpressionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAllExpressionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.DeleteAllExpressionsReply> DeleteAllExpressionsAsync(global::Nadeko.Microservices.DeleteAllExpressionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAllExpressions, null, options, request);
      }
      public virtual global::Nadeko.Microservices.EditExpressionReply EditExpression(global::Nadeko.Microservices.EditExpressionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditExpression(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.EditExpressionReply EditExpression(global::Nadeko.Microservices.EditExpressionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EditExpression, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.EditExpressionReply> EditExpressionAsync(global::Nadeko.Microservices.EditExpressionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditExpressionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.EditExpressionReply> EditExpressionAsync(global::Nadeko.Microservices.EditExpressionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EditExpression, null, options, request);
      }
      public virtual global::Nadeko.Microservices.GetExpressionReply GetExpression(global::Nadeko.Microservices.GetExpressionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExpression(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.GetExpressionReply GetExpression(global::Nadeko.Microservices.GetExpressionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetExpression, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.GetExpressionReply> GetExpressionAsync(global::Nadeko.Microservices.GetExpressionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExpressionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.GetExpressionReply> GetExpressionAsync(global::Nadeko.Microservices.GetExpressionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetExpression, null, options, request);
      }
      public virtual global::Nadeko.Microservices.FindExpressionReply FindExpression(global::Nadeko.Microservices.FindExpressionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindExpression(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.FindExpressionReply FindExpression(global::Nadeko.Microservices.FindExpressionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FindExpression, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.FindExpressionReply> FindExpressionAsync(global::Nadeko.Microservices.FindExpressionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindExpressionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.FindExpressionReply> FindExpressionAsync(global::Nadeko.Microservices.FindExpressionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FindExpression, null, options, request);
      }
      public virtual global::Nadeko.Microservices.GetRandomExpressionReply GetRandomExpression(global::Nadeko.Microservices.GetRandomExpressionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRandomExpression(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.GetRandomExpressionReply GetRandomExpression(global::Nadeko.Microservices.GetRandomExpressionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRandomExpression, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.GetRandomExpressionReply> GetRandomExpressionAsync(global::Nadeko.Microservices.GetRandomExpressionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRandomExpressionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.GetRandomExpressionReply> GetRandomExpressionAsync(global::Nadeko.Microservices.GetRandomExpressionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRandomExpression, null, options, request);
      }
      public virtual global::Nadeko.Microservices.ExpressionBehaviorReply SetExpresssionBehavior(global::Nadeko.Microservices.ExpressionBehaviorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetExpresssionBehavior(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.ExpressionBehaviorReply SetExpresssionBehavior(global::Nadeko.Microservices.ExpressionBehaviorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetExpresssionBehavior, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.ExpressionBehaviorReply> SetExpresssionBehaviorAsync(global::Nadeko.Microservices.ExpressionBehaviorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetExpresssionBehaviorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.ExpressionBehaviorReply> SetExpresssionBehaviorAsync(global::Nadeko.Microservices.ExpressionBehaviorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetExpresssionBehavior, null, options, request);
      }
      public virtual global::Nadeko.Microservices.QueryForExpressionReply QueryForExpression(global::Nadeko.Microservices.QueryForExpressionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryForExpression(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nadeko.Microservices.QueryForExpressionReply QueryForExpression(global::Nadeko.Microservices.QueryForExpressionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryForExpression, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.QueryForExpressionReply> QueryForExpressionAsync(global::Nadeko.Microservices.QueryForExpressionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryForExpressionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nadeko.Microservices.QueryForExpressionReply> QueryForExpressionAsync(global::Nadeko.Microservices.QueryForExpressionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryForExpression, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ExpressionsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ExpressionsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ExpressionsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddExpression, serviceImpl.AddExpression)
          .AddMethod(__Method_ListExpressions, serviceImpl.ListExpressions)
          .AddMethod(__Method_DeleteExpression, serviceImpl.DeleteExpression)
          .AddMethod(__Method_DeleteAllExpressions, serviceImpl.DeleteAllExpressions)
          .AddMethod(__Method_EditExpression, serviceImpl.EditExpression)
          .AddMethod(__Method_GetExpression, serviceImpl.GetExpression)
          .AddMethod(__Method_FindExpression, serviceImpl.FindExpression)
          .AddMethod(__Method_GetRandomExpression, serviceImpl.GetRandomExpression)
          .AddMethod(__Method_SetExpresssionBehavior, serviceImpl.SetExpresssionBehavior)
          .AddMethod(__Method_QueryForExpression, serviceImpl.QueryForExpression).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ExpressionsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddExpression, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.AddExpresionRequest, global::Nadeko.Microservices.AddExpressionReply>(serviceImpl.AddExpression));
      serviceBinder.AddMethod(__Method_ListExpressions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.ListExpressionsRequest, global::Nadeko.Microservices.ListExpressionsReply>(serviceImpl.ListExpressions));
      serviceBinder.AddMethod(__Method_DeleteExpression, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.DeleteExpressionRequest, global::Nadeko.Microservices.DeleteExpressionReply>(serviceImpl.DeleteExpression));
      serviceBinder.AddMethod(__Method_DeleteAllExpressions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.DeleteAllExpressionsRequest, global::Nadeko.Microservices.DeleteAllExpressionsReply>(serviceImpl.DeleteAllExpressions));
      serviceBinder.AddMethod(__Method_EditExpression, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.EditExpressionRequest, global::Nadeko.Microservices.EditExpressionReply>(serviceImpl.EditExpression));
      serviceBinder.AddMethod(__Method_GetExpression, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.GetExpressionRequest, global::Nadeko.Microservices.GetExpressionReply>(serviceImpl.GetExpression));
      serviceBinder.AddMethod(__Method_FindExpression, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.FindExpressionRequest, global::Nadeko.Microservices.FindExpressionReply>(serviceImpl.FindExpression));
      serviceBinder.AddMethod(__Method_GetRandomExpression, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.GetRandomExpressionRequest, global::Nadeko.Microservices.GetRandomExpressionReply>(serviceImpl.GetRandomExpression));
      serviceBinder.AddMethod(__Method_SetExpresssionBehavior, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.ExpressionBehaviorRequest, global::Nadeko.Microservices.ExpressionBehaviorReply>(serviceImpl.SetExpresssionBehavior));
      serviceBinder.AddMethod(__Method_QueryForExpression, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nadeko.Microservices.QueryForExpressionRequest, global::Nadeko.Microservices.QueryForExpressionReply>(serviceImpl.QueryForExpression));
    }

  }
}
#endregion
