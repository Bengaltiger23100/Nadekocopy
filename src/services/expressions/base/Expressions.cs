// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: expressions.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nadeko.Microservices {

  /// <summary>Holder for reflection information generated from expressions.proto</summary>
  public static partial class ExpressionsReflection {

    #region Descriptor
    /// <summary>File descriptor for expressions.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExpressionsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFleHByZXNzaW9ucy5wcm90bxIUbmFkZWtvLm1pY3Jvc2VydmljZXMiTAoZ",
            "UXVlcnlGb3JFeHByZXNzaW9uUmVxdWVzdBIPCgdndWlsZElkGAEgASgEEg8K",
            "B2NvbnRlbnQYAiABKAkSDQoFYm90SWQYAyABKAQiYAoXUXVlcnlGb3JFeHBy",
            "ZXNzaW9uUmVwbHkSLgoEZGF0YRgBIAEoCzIeLm5hZGVrby5taWNyb3NlcnZp",
            "Y2VzLkV4cHJEYXRhSAASDgoEZmFpbBgCIAEoCEgAQgUKA1JlcyKhAQoIRXhw",
            "ckRhdGESDwoHdHJpZ2dlchgBIAEoCRIKCgJpZBgCIAEoBRISCgphdXRvRGVs",
            "ZXRlGAMgASgIEhIKCmRtUmVzcG9uc2UYBCABKAgSEAoIcmVzcG9uc2UYBSAB",
            "KAkSEAoIYXV0aG9ySWQYBiABKAQSEgoKYXV0aG9yTmFtZRgHIAEoCRIYChBj",
            "b250YWluc0FueXdoZXJlGAggASgIIm4KGUV4cHJlc3Npb25CZWhhdmlvclJl",
            "cXVlc3QSNAoIYmVoYXZpb3IYASABKA4yIi5uYWRla28ubWljcm9zZXJ2aWNl",
            "cy5FeHByQmVoYXZpb3ISCgoCaWQYAiABKAUSDwoHZ3VpbGRJZBgDIAEoBCI9",
            "ChdFeHByZXNzaW9uQmVoYXZpb3JSZXBseRIPCgdzdWNjZXNzGAEgASgIEhEK",
            "CWlzRW5hYmxlZBgCIAEoCCJEChRHZXRFeHByZXNzaW9uUmVxdWVzdBIPCgdn",
            "dWlsZElkGAEgASgEEgoKAmlkGAIgASgFEg8KB2lzUXVvdGUYAyABKAgiVwoS",
            "R2V0RXhwcmVzc2lvblJlcGx5Eg8KB3N1Y2Nlc3MYASABKAgSMAoIZXhwckRh",
            "dGEYAiABKAsyHi5uYWRla28ubWljcm9zZXJ2aWNlcy5FeHByRGF0YSJPChpH",
            "ZXRSYW5kb21FeHByZXNzaW9uUmVxdWVzdBIPCgdndWlsZElkGAEgASgEEg8K",
            "B3RyaWdnZXIYAiABKAkSDwoHaXNRdW90ZRgDIAEoCCJdChhHZXRSYW5kb21F",
            "eHByZXNzaW9uUmVwbHkSDwoHc3VjY2VzcxgBIAEoCBIwCghleHByRGF0YRgC",
            "IAEoCzIeLm5hZGVrby5taWNyb3NlcnZpY2VzLkV4cHJEYXRhIngKFUVkaXRF",
            "eHByZXNzaW9uUmVxdWVzdBIQCghyZXNwb25zZRgBIAEoCRIKCgJpZBgCIAEo",
            "BRIPCgdndWlsZElkGAMgASgEEg8KB2lzUXVvdGUYBCABKAgSDwoHaXNBZG1p",
            "bhgFIAEoCBIOCgZ1c2VySWQYBiABKAQiSQoTRWRpdEV4cHJlc3Npb25SZXBs",
            "eRIPCgdzdWNjZXNzGAEgASgIEg8KB3RyaWdnZXIYAiABKAkSEAoIcmVzcG9u",
            "c2UYAyABKAkigAEKE0FkZEV4cHJlc2lvblJlcXVlc3QSDwoHdHJpZ2dlchgB",
            "IAEoCRIQCghyZXNwb25zZRgCIAEoCRIQCghhdXRob3JJZBgDIAEoBBISCgph",
            "dXRob3JOYW1lGAQgASgJEg8KB2d1aWxkSWQYBSABKAQSDwoHaXNRdW90ZRgG",
            "IAEoCCIkChJBZGRFeHByZXNzaW9uUmVwbHkSDgoGZXhwcklkGAEgASgFIl4K",
            "Fkxpc3RFeHByZXNzaW9uc1JlcXVlc3QSDwoHZ3VpbGRJZBgBIAEoBBIMCgRw",
            "YWdlGAIgASgFEg8KB2lzUXVvdGUYAyABKAgSFAoMYWxwaGFiZXRpY2FsGAQg",
            "ASgIIkQKFExpc3RFeHByZXNzaW9uc1JlcGx5EiwKBGRhdGEYASADKAsyHi5u",
            "YWRla28ubWljcm9zZXJ2aWNlcy5FeHByRGF0YSJoChdEZWxldGVFeHByZXNz",
            "aW9uUmVxdWVzdBIKCgJpZBgBIAEoBRIPCgdndWlsZElkGAIgASgEEg8KB2lz",
            "UXVvdGUYAyABKAgSDwoHaXNBZG1pbhgEIAEoCBIOCgZ1c2VySWQYBSABKAQi",
            "WgoVRGVsZXRlRXhwcmVzc2lvblJlcGx5Eg8KB3N1Y2Nlc3MYASABKAgSMAoI",
            "ZXhwckRhdGEYAiABKAsyHi5uYWRla28ubWljcm9zZXJ2aWNlcy5FeHByRGF0",
            "YSI/ChtEZWxldGVBbGxFeHByZXNzaW9uc1JlcXVlc3QSDwoHZ3VpbGRJZBgB",
            "IAEoBBIPCgdpc1F1b3RlGAIgASgIIioKGURlbGV0ZUFsbEV4cHJlc3Npb25z",
            "UmVwbHkSDQoFY291bnQYASABKAUiXAoVRmluZEV4cHJlc3Npb25SZXF1ZXN0",
            "Eg8KB2d1aWxkSWQYASABKAQSDwoHaXNRdW90ZRgCIAEoCBIPCgd0cmlnZ2Vy",
            "GAMgASgJEhAKCHJlc3BvbnNlGAQgASgJIlgKE0ZpbmRFeHByZXNzaW9uUmVw",
            "bHkSDwoHc3VjY2VzcxgBIAEoCBIwCghleHByRGF0YRgCIAEoCzIeLm5hZGVr",
            "by5taWNyb3NlcnZpY2VzLkV4cHJEYXRhKkcKDEV4cHJCZWhhdmlvchIOCgpB",
            "dXRvRGVsZXRlEAASEQoNRGlyZWN0TWVzc2FnZRABEhQKEENvbnRhaW5zQW55",
            "d2hlcmUQAjKECQoLRXhwcmVzc2lvbnMSZgoNQWRkRXhwcmVzc2lvbhIpLm5h",
            "ZGVrby5taWNyb3NlcnZpY2VzLkFkZEV4cHJlc2lvblJlcXVlc3QaKC5uYWRl",
            "a28ubWljcm9zZXJ2aWNlcy5BZGRFeHByZXNzaW9uUmVwbHkiABJtCg9MaXN0",
            "RXhwcmVzc2lvbnMSLC5uYWRla28ubWljcm9zZXJ2aWNlcy5MaXN0RXhwcmVz",
            "c2lvbnNSZXF1ZXN0GioubmFkZWtvLm1pY3Jvc2VydmljZXMuTGlzdEV4cHJl",
            "c3Npb25zUmVwbHkiABJwChBEZWxldGVFeHByZXNzaW9uEi0ubmFkZWtvLm1p",
            "Y3Jvc2VydmljZXMuRGVsZXRlRXhwcmVzc2lvblJlcXVlc3QaKy5uYWRla28u",
            "bWljcm9zZXJ2aWNlcy5EZWxldGVFeHByZXNzaW9uUmVwbHkiABJ8ChREZWxl",
            "dGVBbGxFeHByZXNzaW9ucxIxLm5hZGVrby5taWNyb3NlcnZpY2VzLkRlbGV0",
            "ZUFsbEV4cHJlc3Npb25zUmVxdWVzdBovLm5hZGVrby5taWNyb3NlcnZpY2Vz",
            "LkRlbGV0ZUFsbEV4cHJlc3Npb25zUmVwbHkiABJqCg5FZGl0RXhwcmVzc2lv",
            "bhIrLm5hZGVrby5taWNyb3NlcnZpY2VzLkVkaXRFeHByZXNzaW9uUmVxdWVz",
            "dBopLm5hZGVrby5taWNyb3NlcnZpY2VzLkVkaXRFeHByZXNzaW9uUmVwbHki",
            "ABJnCg1HZXRFeHByZXNzaW9uEioubmFkZWtvLm1pY3Jvc2VydmljZXMuR2V0",
            "RXhwcmVzc2lvblJlcXVlc3QaKC5uYWRla28ubWljcm9zZXJ2aWNlcy5HZXRF",
            "eHByZXNzaW9uUmVwbHkiABJqCg5GaW5kRXhwcmVzc2lvbhIrLm5hZGVrby5t",
            "aWNyb3NlcnZpY2VzLkZpbmRFeHByZXNzaW9uUmVxdWVzdBopLm5hZGVrby5t",
            "aWNyb3NlcnZpY2VzLkZpbmRFeHByZXNzaW9uUmVwbHkiABJ5ChNHZXRSYW5k",
            "b21FeHByZXNzaW9uEjAubmFkZWtvLm1pY3Jvc2VydmljZXMuR2V0UmFuZG9t",
            "RXhwcmVzc2lvblJlcXVlc3QaLi5uYWRla28ubWljcm9zZXJ2aWNlcy5HZXRS",
            "YW5kb21FeHByZXNzaW9uUmVwbHkiABJ6ChZTZXRFeHByZXNzc2lvbkJlaGF2",
            "aW9yEi8ubmFkZWtvLm1pY3Jvc2VydmljZXMuRXhwcmVzc2lvbkJlaGF2aW9y",
            "UmVxdWVzdBotLm5hZGVrby5taWNyb3NlcnZpY2VzLkV4cHJlc3Npb25CZWhh",
            "dmlvclJlcGx5IgASdgoSUXVlcnlGb3JFeHByZXNzaW9uEi8ubmFkZWtvLm1p",
            "Y3Jvc2VydmljZXMuUXVlcnlGb3JFeHByZXNzaW9uUmVxdWVzdBotLm5hZGVr",
            "by5taWNyb3NlcnZpY2VzLlF1ZXJ5Rm9yRXhwcmVzc2lvblJlcGx5IgBiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Nadeko.Microservices.ExprBehavior), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.QueryForExpressionRequest), global::Nadeko.Microservices.QueryForExpressionRequest.Parser, new[]{ "GuildId", "Content", "BotId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.QueryForExpressionReply), global::Nadeko.Microservices.QueryForExpressionReply.Parser, new[]{ "Data", "Fail" }, new[]{ "Res" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.ExprData), global::Nadeko.Microservices.ExprData.Parser, new[]{ "Trigger", "Id", "AutoDelete", "DmResponse", "Response", "AuthorId", "AuthorName", "ContainsAnywhere" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.ExpressionBehaviorRequest), global::Nadeko.Microservices.ExpressionBehaviorRequest.Parser, new[]{ "Behavior", "Id", "GuildId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.ExpressionBehaviorReply), global::Nadeko.Microservices.ExpressionBehaviorReply.Parser, new[]{ "Success", "IsEnabled" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.GetExpressionRequest), global::Nadeko.Microservices.GetExpressionRequest.Parser, new[]{ "GuildId", "Id", "IsQuote" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.GetExpressionReply), global::Nadeko.Microservices.GetExpressionReply.Parser, new[]{ "Success", "ExprData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.GetRandomExpressionRequest), global::Nadeko.Microservices.GetRandomExpressionRequest.Parser, new[]{ "GuildId", "Trigger", "IsQuote" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.GetRandomExpressionReply), global::Nadeko.Microservices.GetRandomExpressionReply.Parser, new[]{ "Success", "ExprData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.EditExpressionRequest), global::Nadeko.Microservices.EditExpressionRequest.Parser, new[]{ "Response", "Id", "GuildId", "IsQuote", "IsAdmin", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.EditExpressionReply), global::Nadeko.Microservices.EditExpressionReply.Parser, new[]{ "Success", "Trigger", "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.AddExpresionRequest), global::Nadeko.Microservices.AddExpresionRequest.Parser, new[]{ "Trigger", "Response", "AuthorId", "AuthorName", "GuildId", "IsQuote" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.AddExpressionReply), global::Nadeko.Microservices.AddExpressionReply.Parser, new[]{ "ExprId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.ListExpressionsRequest), global::Nadeko.Microservices.ListExpressionsRequest.Parser, new[]{ "GuildId", "Page", "IsQuote", "Alphabetical" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.ListExpressionsReply), global::Nadeko.Microservices.ListExpressionsReply.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.DeleteExpressionRequest), global::Nadeko.Microservices.DeleteExpressionRequest.Parser, new[]{ "Id", "GuildId", "IsQuote", "IsAdmin", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.DeleteExpressionReply), global::Nadeko.Microservices.DeleteExpressionReply.Parser, new[]{ "Success", "ExprData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.DeleteAllExpressionsRequest), global::Nadeko.Microservices.DeleteAllExpressionsRequest.Parser, new[]{ "GuildId", "IsQuote" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.DeleteAllExpressionsReply), global::Nadeko.Microservices.DeleteAllExpressionsReply.Parser, new[]{ "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.FindExpressionRequest), global::Nadeko.Microservices.FindExpressionRequest.Parser, new[]{ "GuildId", "IsQuote", "Trigger", "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nadeko.Microservices.FindExpressionReply), global::Nadeko.Microservices.FindExpressionReply.Parser, new[]{ "Success", "ExprData" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ExprBehavior {
    [pbr::OriginalName("AutoDelete")] AutoDelete = 0,
    [pbr::OriginalName("DirectMessage")] DirectMessage = 1,
    [pbr::OriginalName("ContainsAnywhere")] ContainsAnywhere = 2,
  }

  #endregion

  #region Messages
  public sealed partial class QueryForExpressionRequest : pb::IMessage<QueryForExpressionRequest> {
    private static readonly pb::MessageParser<QueryForExpressionRequest> _parser = new pb::MessageParser<QueryForExpressionRequest>(() => new QueryForExpressionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryForExpressionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryForExpressionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryForExpressionRequest(QueryForExpressionRequest other) : this() {
      guildId_ = other.guildId_;
      content_ = other.content_;
      botId_ = other.botId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryForExpressionRequest Clone() {
      return new QueryForExpressionRequest(this);
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 2;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "botId" field.</summary>
    public const int BotIdFieldNumber = 3;
    private ulong botId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BotId {
      get { return botId_; }
      set {
        botId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryForExpressionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryForExpressionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GuildId != other.GuildId) return false;
      if (Content != other.Content) return false;
      if (BotId != other.BotId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GuildId != 0UL) hash ^= GuildId.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (BotId != 0UL) hash ^= BotId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (BotId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(BotId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (BotId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BotId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryForExpressionRequest other) {
      if (other == null) {
        return;
      }
      if (other.GuildId != 0UL) {
        GuildId = other.GuildId;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.BotId != 0UL) {
        BotId = other.BotId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 24: {
            BotId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryForExpressionReply : pb::IMessage<QueryForExpressionReply> {
    private static readonly pb::MessageParser<QueryForExpressionReply> _parser = new pb::MessageParser<QueryForExpressionReply>(() => new QueryForExpressionReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryForExpressionReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryForExpressionReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryForExpressionReply(QueryForExpressionReply other) : this() {
      switch (other.ResCase) {
        case ResOneofCase.Data:
          Data = other.Data.Clone();
          break;
        case ResOneofCase.Fail:
          Fail = other.Fail;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryForExpressionReply Clone() {
      return new QueryForExpressionReply(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.ExprData Data {
      get { return resCase_ == ResOneofCase.Data ? (global::Nadeko.Microservices.ExprData) res_ : null; }
      set {
        res_ = value;
        resCase_ = value == null ? ResOneofCase.None : ResOneofCase.Data;
      }
    }

    /// <summary>Field number for the "fail" field.</summary>
    public const int FailFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Fail {
      get { return resCase_ == ResOneofCase.Fail ? (bool) res_ : false; }
      set {
        res_ = value;
        resCase_ = ResOneofCase.Fail;
      }
    }

    private object res_;
    /// <summary>Enum of possible cases for the "Res" oneof.</summary>
    public enum ResOneofCase {
      None = 0,
      Data = 1,
      Fail = 2,
    }
    private ResOneofCase resCase_ = ResOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResOneofCase ResCase {
      get { return resCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRes() {
      resCase_ = ResOneofCase.None;
      res_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryForExpressionReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryForExpressionReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (Fail != other.Fail) return false;
      if (ResCase != other.ResCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resCase_ == ResOneofCase.Data) hash ^= Data.GetHashCode();
      if (resCase_ == ResOneofCase.Fail) hash ^= Fail.GetHashCode();
      hash ^= (int) resCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resCase_ == ResOneofCase.Data) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (resCase_ == ResOneofCase.Fail) {
        output.WriteRawTag(16);
        output.WriteBool(Fail);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resCase_ == ResOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (resCase_ == ResOneofCase.Fail) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryForExpressionReply other) {
      if (other == null) {
        return;
      }
      switch (other.ResCase) {
        case ResOneofCase.Data:
          if (Data == null) {
            Data = new global::Nadeko.Microservices.ExprData();
          }
          Data.MergeFrom(other.Data);
          break;
        case ResOneofCase.Fail:
          Fail = other.Fail;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Nadeko.Microservices.ExprData subBuilder = new global::Nadeko.Microservices.ExprData();
            if (resCase_ == ResOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
          case 16: {
            Fail = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExprData : pb::IMessage<ExprData> {
    private static readonly pb::MessageParser<ExprData> _parser = new pb::MessageParser<ExprData>(() => new ExprData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExprData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExprData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExprData(ExprData other) : this() {
      trigger_ = other.trigger_;
      id_ = other.id_;
      autoDelete_ = other.autoDelete_;
      dmResponse_ = other.dmResponse_;
      response_ = other.response_;
      authorId_ = other.authorId_;
      authorName_ = other.authorName_;
      containsAnywhere_ = other.containsAnywhere_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExprData Clone() {
      return new ExprData(this);
    }

    /// <summary>Field number for the "trigger" field.</summary>
    public const int TriggerFieldNumber = 1;
    private string trigger_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Trigger {
      get { return trigger_; }
      set {
        trigger_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "autoDelete" field.</summary>
    public const int AutoDeleteFieldNumber = 3;
    private bool autoDelete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoDelete {
      get { return autoDelete_; }
      set {
        autoDelete_ = value;
      }
    }

    /// <summary>Field number for the "dmResponse" field.</summary>
    public const int DmResponseFieldNumber = 4;
    private bool dmResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DmResponse {
      get { return dmResponse_; }
      set {
        dmResponse_ = value;
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 5;
    private string response_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Response {
      get { return response_; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authorId" field.</summary>
    public const int AuthorIdFieldNumber = 6;
    private ulong authorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AuthorId {
      get { return authorId_; }
      set {
        authorId_ = value;
      }
    }

    /// <summary>Field number for the "authorName" field.</summary>
    public const int AuthorNameFieldNumber = 7;
    private string authorName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthorName {
      get { return authorName_; }
      set {
        authorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "containsAnywhere" field.</summary>
    public const int ContainsAnywhereFieldNumber = 8;
    private bool containsAnywhere_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ContainsAnywhere {
      get { return containsAnywhere_; }
      set {
        containsAnywhere_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExprData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExprData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Trigger != other.Trigger) return false;
      if (Id != other.Id) return false;
      if (AutoDelete != other.AutoDelete) return false;
      if (DmResponse != other.DmResponse) return false;
      if (Response != other.Response) return false;
      if (AuthorId != other.AuthorId) return false;
      if (AuthorName != other.AuthorName) return false;
      if (ContainsAnywhere != other.ContainsAnywhere) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Trigger.Length != 0) hash ^= Trigger.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (AutoDelete != false) hash ^= AutoDelete.GetHashCode();
      if (DmResponse != false) hash ^= DmResponse.GetHashCode();
      if (Response.Length != 0) hash ^= Response.GetHashCode();
      if (AuthorId != 0UL) hash ^= AuthorId.GetHashCode();
      if (AuthorName.Length != 0) hash ^= AuthorName.GetHashCode();
      if (ContainsAnywhere != false) hash ^= ContainsAnywhere.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Trigger.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Trigger);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (AutoDelete != false) {
        output.WriteRawTag(24);
        output.WriteBool(AutoDelete);
      }
      if (DmResponse != false) {
        output.WriteRawTag(32);
        output.WriteBool(DmResponse);
      }
      if (Response.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Response);
      }
      if (AuthorId != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(AuthorId);
      }
      if (AuthorName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AuthorName);
      }
      if (ContainsAnywhere != false) {
        output.WriteRawTag(64);
        output.WriteBool(ContainsAnywhere);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Trigger.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Trigger);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (AutoDelete != false) {
        size += 1 + 1;
      }
      if (DmResponse != false) {
        size += 1 + 1;
      }
      if (Response.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Response);
      }
      if (AuthorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AuthorId);
      }
      if (AuthorName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthorName);
      }
      if (ContainsAnywhere != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExprData other) {
      if (other == null) {
        return;
      }
      if (other.Trigger.Length != 0) {
        Trigger = other.Trigger;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.AutoDelete != false) {
        AutoDelete = other.AutoDelete;
      }
      if (other.DmResponse != false) {
        DmResponse = other.DmResponse;
      }
      if (other.Response.Length != 0) {
        Response = other.Response;
      }
      if (other.AuthorId != 0UL) {
        AuthorId = other.AuthorId;
      }
      if (other.AuthorName.Length != 0) {
        AuthorName = other.AuthorName;
      }
      if (other.ContainsAnywhere != false) {
        ContainsAnywhere = other.ContainsAnywhere;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Trigger = input.ReadString();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            AutoDelete = input.ReadBool();
            break;
          }
          case 32: {
            DmResponse = input.ReadBool();
            break;
          }
          case 42: {
            Response = input.ReadString();
            break;
          }
          case 48: {
            AuthorId = input.ReadUInt64();
            break;
          }
          case 58: {
            AuthorName = input.ReadString();
            break;
          }
          case 64: {
            ContainsAnywhere = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExpressionBehaviorRequest : pb::IMessage<ExpressionBehaviorRequest> {
    private static readonly pb::MessageParser<ExpressionBehaviorRequest> _parser = new pb::MessageParser<ExpressionBehaviorRequest>(() => new ExpressionBehaviorRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExpressionBehaviorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpressionBehaviorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpressionBehaviorRequest(ExpressionBehaviorRequest other) : this() {
      behavior_ = other.behavior_;
      id_ = other.id_;
      guildId_ = other.guildId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpressionBehaviorRequest Clone() {
      return new ExpressionBehaviorRequest(this);
    }

    /// <summary>Field number for the "behavior" field.</summary>
    public const int BehaviorFieldNumber = 1;
    private global::Nadeko.Microservices.ExprBehavior behavior_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.ExprBehavior Behavior {
      get { return behavior_; }
      set {
        behavior_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 3;
    private ulong guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExpressionBehaviorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExpressionBehaviorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Behavior != other.Behavior) return false;
      if (Id != other.Id) return false;
      if (GuildId != other.GuildId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Behavior != 0) hash ^= Behavior.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (GuildId != 0UL) hash ^= GuildId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Behavior != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Behavior);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(GuildId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Behavior != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Behavior);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExpressionBehaviorRequest other) {
      if (other == null) {
        return;
      }
      if (other.Behavior != 0) {
        Behavior = other.Behavior;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.GuildId != 0UL) {
        GuildId = other.GuildId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Behavior = (global::Nadeko.Microservices.ExprBehavior) input.ReadEnum();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            GuildId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExpressionBehaviorReply : pb::IMessage<ExpressionBehaviorReply> {
    private static readonly pb::MessageParser<ExpressionBehaviorReply> _parser = new pb::MessageParser<ExpressionBehaviorReply>(() => new ExpressionBehaviorReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExpressionBehaviorReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpressionBehaviorReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpressionBehaviorReply(ExpressionBehaviorReply other) : this() {
      success_ = other.success_;
      isEnabled_ = other.isEnabled_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpressionBehaviorReply Clone() {
      return new ExpressionBehaviorReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "isEnabled" field.</summary>
    public const int IsEnabledFieldNumber = 2;
    private bool isEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEnabled {
      get { return isEnabled_; }
      set {
        isEnabled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExpressionBehaviorReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExpressionBehaviorReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (IsEnabled != other.IsEnabled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (IsEnabled != false) hash ^= IsEnabled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (IsEnabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (IsEnabled != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExpressionBehaviorReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.IsEnabled != false) {
        IsEnabled = other.IsEnabled;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 16: {
            IsEnabled = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetExpressionRequest : pb::IMessage<GetExpressionRequest> {
    private static readonly pb::MessageParser<GetExpressionRequest> _parser = new pb::MessageParser<GetExpressionRequest>(() => new GetExpressionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetExpressionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExpressionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExpressionRequest(GetExpressionRequest other) : this() {
      guildId_ = other.guildId_;
      id_ = other.id_;
      isQuote_ = other.isQuote_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExpressionRequest Clone() {
      return new GetExpressionRequest(this);
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "isQuote" field.</summary>
    public const int IsQuoteFieldNumber = 3;
    private bool isQuote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsQuote {
      get { return isQuote_; }
      set {
        isQuote_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetExpressionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetExpressionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GuildId != other.GuildId) return false;
      if (Id != other.Id) return false;
      if (IsQuote != other.IsQuote) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GuildId != 0UL) hash ^= GuildId.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (IsQuote != false) hash ^= IsQuote.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (IsQuote != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsQuote);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (IsQuote != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetExpressionRequest other) {
      if (other == null) {
        return;
      }
      if (other.GuildId != 0UL) {
        GuildId = other.GuildId;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.IsQuote != false) {
        IsQuote = other.IsQuote;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            IsQuote = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetExpressionReply : pb::IMessage<GetExpressionReply> {
    private static readonly pb::MessageParser<GetExpressionReply> _parser = new pb::MessageParser<GetExpressionReply>(() => new GetExpressionReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetExpressionReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExpressionReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExpressionReply(GetExpressionReply other) : this() {
      success_ = other.success_;
      exprData_ = other.exprData_ != null ? other.exprData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExpressionReply Clone() {
      return new GetExpressionReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "exprData" field.</summary>
    public const int ExprDataFieldNumber = 2;
    private global::Nadeko.Microservices.ExprData exprData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.ExprData ExprData {
      get { return exprData_; }
      set {
        exprData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetExpressionReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetExpressionReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (!object.Equals(ExprData, other.ExprData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (exprData_ != null) hash ^= ExprData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (exprData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ExprData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (exprData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExprData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetExpressionReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.exprData_ != null) {
        if (exprData_ == null) {
          ExprData = new global::Nadeko.Microservices.ExprData();
        }
        ExprData.MergeFrom(other.ExprData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            if (exprData_ == null) {
              ExprData = new global::Nadeko.Microservices.ExprData();
            }
            input.ReadMessage(ExprData);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRandomExpressionRequest : pb::IMessage<GetRandomExpressionRequest> {
    private static readonly pb::MessageParser<GetRandomExpressionRequest> _parser = new pb::MessageParser<GetRandomExpressionRequest>(() => new GetRandomExpressionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRandomExpressionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomExpressionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomExpressionRequest(GetRandomExpressionRequest other) : this() {
      guildId_ = other.guildId_;
      trigger_ = other.trigger_;
      isQuote_ = other.isQuote_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomExpressionRequest Clone() {
      return new GetRandomExpressionRequest(this);
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "trigger" field.</summary>
    public const int TriggerFieldNumber = 2;
    private string trigger_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Trigger {
      get { return trigger_; }
      set {
        trigger_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isQuote" field.</summary>
    public const int IsQuoteFieldNumber = 3;
    private bool isQuote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsQuote {
      get { return isQuote_; }
      set {
        isQuote_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRandomExpressionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRandomExpressionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GuildId != other.GuildId) return false;
      if (Trigger != other.Trigger) return false;
      if (IsQuote != other.IsQuote) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GuildId != 0UL) hash ^= GuildId.GetHashCode();
      if (Trigger.Length != 0) hash ^= Trigger.GetHashCode();
      if (IsQuote != false) hash ^= IsQuote.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (Trigger.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Trigger);
      }
      if (IsQuote != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsQuote);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (Trigger.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Trigger);
      }
      if (IsQuote != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRandomExpressionRequest other) {
      if (other == null) {
        return;
      }
      if (other.GuildId != 0UL) {
        GuildId = other.GuildId;
      }
      if (other.Trigger.Length != 0) {
        Trigger = other.Trigger;
      }
      if (other.IsQuote != false) {
        IsQuote = other.IsQuote;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 18: {
            Trigger = input.ReadString();
            break;
          }
          case 24: {
            IsQuote = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRandomExpressionReply : pb::IMessage<GetRandomExpressionReply> {
    private static readonly pb::MessageParser<GetRandomExpressionReply> _parser = new pb::MessageParser<GetRandomExpressionReply>(() => new GetRandomExpressionReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRandomExpressionReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomExpressionReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomExpressionReply(GetRandomExpressionReply other) : this() {
      success_ = other.success_;
      exprData_ = other.exprData_ != null ? other.exprData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomExpressionReply Clone() {
      return new GetRandomExpressionReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "exprData" field.</summary>
    public const int ExprDataFieldNumber = 2;
    private global::Nadeko.Microservices.ExprData exprData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.ExprData ExprData {
      get { return exprData_; }
      set {
        exprData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRandomExpressionReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRandomExpressionReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (!object.Equals(ExprData, other.ExprData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (exprData_ != null) hash ^= ExprData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (exprData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ExprData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (exprData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExprData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRandomExpressionReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.exprData_ != null) {
        if (exprData_ == null) {
          ExprData = new global::Nadeko.Microservices.ExprData();
        }
        ExprData.MergeFrom(other.ExprData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            if (exprData_ == null) {
              ExprData = new global::Nadeko.Microservices.ExprData();
            }
            input.ReadMessage(ExprData);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EditExpressionRequest : pb::IMessage<EditExpressionRequest> {
    private static readonly pb::MessageParser<EditExpressionRequest> _parser = new pb::MessageParser<EditExpressionRequest>(() => new EditExpressionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EditExpressionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditExpressionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditExpressionRequest(EditExpressionRequest other) : this() {
      response_ = other.response_;
      id_ = other.id_;
      guildId_ = other.guildId_;
      isQuote_ = other.isQuote_;
      isAdmin_ = other.isAdmin_;
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditExpressionRequest Clone() {
      return new EditExpressionRequest(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private string response_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Response {
      get { return response_; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 3;
    private ulong guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "isQuote" field.</summary>
    public const int IsQuoteFieldNumber = 4;
    private bool isQuote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsQuote {
      get { return isQuote_; }
      set {
        isQuote_ = value;
      }
    }

    /// <summary>Field number for the "isAdmin" field.</summary>
    public const int IsAdminFieldNumber = 5;
    private bool isAdmin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAdmin {
      get { return isAdmin_; }
      set {
        isAdmin_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 6;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EditExpressionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EditExpressionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      if (Id != other.Id) return false;
      if (GuildId != other.GuildId) return false;
      if (IsQuote != other.IsQuote) return false;
      if (IsAdmin != other.IsAdmin) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Response.Length != 0) hash ^= Response.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (GuildId != 0UL) hash ^= GuildId.GetHashCode();
      if (IsQuote != false) hash ^= IsQuote.GetHashCode();
      if (IsAdmin != false) hash ^= IsAdmin.GetHashCode();
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Response.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Response);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(GuildId);
      }
      if (IsQuote != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsQuote);
      }
      if (IsAdmin != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsAdmin);
      }
      if (UserId != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Response.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Response);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (IsQuote != false) {
        size += 1 + 1;
      }
      if (IsAdmin != false) {
        size += 1 + 1;
      }
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EditExpressionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Response.Length != 0) {
        Response = other.Response;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.GuildId != 0UL) {
        GuildId = other.GuildId;
      }
      if (other.IsQuote != false) {
        IsQuote = other.IsQuote;
      }
      if (other.IsAdmin != false) {
        IsAdmin = other.IsAdmin;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Response = input.ReadString();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 32: {
            IsQuote = input.ReadBool();
            break;
          }
          case 40: {
            IsAdmin = input.ReadBool();
            break;
          }
          case 48: {
            UserId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EditExpressionReply : pb::IMessage<EditExpressionReply> {
    private static readonly pb::MessageParser<EditExpressionReply> _parser = new pb::MessageParser<EditExpressionReply>(() => new EditExpressionReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EditExpressionReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditExpressionReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditExpressionReply(EditExpressionReply other) : this() {
      success_ = other.success_;
      trigger_ = other.trigger_;
      response_ = other.response_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditExpressionReply Clone() {
      return new EditExpressionReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "trigger" field.</summary>
    public const int TriggerFieldNumber = 2;
    private string trigger_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Trigger {
      get { return trigger_; }
      set {
        trigger_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 3;
    private string response_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Response {
      get { return response_; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EditExpressionReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EditExpressionReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Trigger != other.Trigger) return false;
      if (Response != other.Response) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Trigger.Length != 0) hash ^= Trigger.GetHashCode();
      if (Response.Length != 0) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Trigger.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Trigger);
      }
      if (Response.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Trigger.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Trigger);
      }
      if (Response.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EditExpressionReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Trigger.Length != 0) {
        Trigger = other.Trigger;
      }
      if (other.Response.Length != 0) {
        Response = other.Response;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Trigger = input.ReadString();
            break;
          }
          case 26: {
            Response = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddExpresionRequest : pb::IMessage<AddExpresionRequest> {
    private static readonly pb::MessageParser<AddExpresionRequest> _parser = new pb::MessageParser<AddExpresionRequest>(() => new AddExpresionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddExpresionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddExpresionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddExpresionRequest(AddExpresionRequest other) : this() {
      trigger_ = other.trigger_;
      response_ = other.response_;
      authorId_ = other.authorId_;
      authorName_ = other.authorName_;
      guildId_ = other.guildId_;
      isQuote_ = other.isQuote_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddExpresionRequest Clone() {
      return new AddExpresionRequest(this);
    }

    /// <summary>Field number for the "trigger" field.</summary>
    public const int TriggerFieldNumber = 1;
    private string trigger_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Trigger {
      get { return trigger_; }
      set {
        trigger_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 2;
    private string response_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Response {
      get { return response_; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authorId" field.</summary>
    public const int AuthorIdFieldNumber = 3;
    private ulong authorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AuthorId {
      get { return authorId_; }
      set {
        authorId_ = value;
      }
    }

    /// <summary>Field number for the "authorName" field.</summary>
    public const int AuthorNameFieldNumber = 4;
    private string authorName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthorName {
      get { return authorName_; }
      set {
        authorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 5;
    private ulong guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "isQuote" field.</summary>
    public const int IsQuoteFieldNumber = 6;
    private bool isQuote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsQuote {
      get { return isQuote_; }
      set {
        isQuote_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddExpresionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddExpresionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Trigger != other.Trigger) return false;
      if (Response != other.Response) return false;
      if (AuthorId != other.AuthorId) return false;
      if (AuthorName != other.AuthorName) return false;
      if (GuildId != other.GuildId) return false;
      if (IsQuote != other.IsQuote) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Trigger.Length != 0) hash ^= Trigger.GetHashCode();
      if (Response.Length != 0) hash ^= Response.GetHashCode();
      if (AuthorId != 0UL) hash ^= AuthorId.GetHashCode();
      if (AuthorName.Length != 0) hash ^= AuthorName.GetHashCode();
      if (GuildId != 0UL) hash ^= GuildId.GetHashCode();
      if (IsQuote != false) hash ^= IsQuote.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Trigger.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Trigger);
      }
      if (Response.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Response);
      }
      if (AuthorId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(AuthorId);
      }
      if (AuthorName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AuthorName);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(GuildId);
      }
      if (IsQuote != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsQuote);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Trigger.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Trigger);
      }
      if (Response.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Response);
      }
      if (AuthorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AuthorId);
      }
      if (AuthorName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthorName);
      }
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (IsQuote != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddExpresionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Trigger.Length != 0) {
        Trigger = other.Trigger;
      }
      if (other.Response.Length != 0) {
        Response = other.Response;
      }
      if (other.AuthorId != 0UL) {
        AuthorId = other.AuthorId;
      }
      if (other.AuthorName.Length != 0) {
        AuthorName = other.AuthorName;
      }
      if (other.GuildId != 0UL) {
        GuildId = other.GuildId;
      }
      if (other.IsQuote != false) {
        IsQuote = other.IsQuote;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Trigger = input.ReadString();
            break;
          }
          case 18: {
            Response = input.ReadString();
            break;
          }
          case 24: {
            AuthorId = input.ReadUInt64();
            break;
          }
          case 34: {
            AuthorName = input.ReadString();
            break;
          }
          case 40: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 48: {
            IsQuote = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddExpressionReply : pb::IMessage<AddExpressionReply> {
    private static readonly pb::MessageParser<AddExpressionReply> _parser = new pb::MessageParser<AddExpressionReply>(() => new AddExpressionReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddExpressionReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddExpressionReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddExpressionReply(AddExpressionReply other) : this() {
      exprId_ = other.exprId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddExpressionReply Clone() {
      return new AddExpressionReply(this);
    }

    /// <summary>Field number for the "exprId" field.</summary>
    public const int ExprIdFieldNumber = 1;
    private int exprId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExprId {
      get { return exprId_; }
      set {
        exprId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddExpressionReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddExpressionReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExprId != other.ExprId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExprId != 0) hash ^= ExprId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExprId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ExprId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExprId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExprId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddExpressionReply other) {
      if (other == null) {
        return;
      }
      if (other.ExprId != 0) {
        ExprId = other.ExprId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ExprId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListExpressionsRequest : pb::IMessage<ListExpressionsRequest> {
    private static readonly pb::MessageParser<ListExpressionsRequest> _parser = new pb::MessageParser<ListExpressionsRequest>(() => new ListExpressionsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListExpressionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListExpressionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListExpressionsRequest(ListExpressionsRequest other) : this() {
      guildId_ = other.guildId_;
      page_ = other.page_;
      isQuote_ = other.isQuote_;
      alphabetical_ = other.alphabetical_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListExpressionsRequest Clone() {
      return new ListExpressionsRequest(this);
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 2;
    private int page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "isQuote" field.</summary>
    public const int IsQuoteFieldNumber = 3;
    private bool isQuote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsQuote {
      get { return isQuote_; }
      set {
        isQuote_ = value;
      }
    }

    /// <summary>Field number for the "alphabetical" field.</summary>
    public const int AlphabeticalFieldNumber = 4;
    private bool alphabetical_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Alphabetical {
      get { return alphabetical_; }
      set {
        alphabetical_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListExpressionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListExpressionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GuildId != other.GuildId) return false;
      if (Page != other.Page) return false;
      if (IsQuote != other.IsQuote) return false;
      if (Alphabetical != other.Alphabetical) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GuildId != 0UL) hash ^= GuildId.GetHashCode();
      if (Page != 0) hash ^= Page.GetHashCode();
      if (IsQuote != false) hash ^= IsQuote.GetHashCode();
      if (Alphabetical != false) hash ^= Alphabetical.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (Page != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Page);
      }
      if (IsQuote != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsQuote);
      }
      if (Alphabetical != false) {
        output.WriteRawTag(32);
        output.WriteBool(Alphabetical);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      if (IsQuote != false) {
        size += 1 + 1;
      }
      if (Alphabetical != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListExpressionsRequest other) {
      if (other == null) {
        return;
      }
      if (other.GuildId != 0UL) {
        GuildId = other.GuildId;
      }
      if (other.Page != 0) {
        Page = other.Page;
      }
      if (other.IsQuote != false) {
        IsQuote = other.IsQuote;
      }
      if (other.Alphabetical != false) {
        Alphabetical = other.Alphabetical;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 16: {
            Page = input.ReadInt32();
            break;
          }
          case 24: {
            IsQuote = input.ReadBool();
            break;
          }
          case 32: {
            Alphabetical = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListExpressionsReply : pb::IMessage<ListExpressionsReply> {
    private static readonly pb::MessageParser<ListExpressionsReply> _parser = new pb::MessageParser<ListExpressionsReply>(() => new ListExpressionsReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListExpressionsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListExpressionsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListExpressionsReply(ListExpressionsReply other) : this() {
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListExpressionsReply Clone() {
      return new ListExpressionsReply(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nadeko.Microservices.ExprData> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::Nadeko.Microservices.ExprData.Parser);
    private readonly pbc::RepeatedField<global::Nadeko.Microservices.ExprData> data_ = new pbc::RepeatedField<global::Nadeko.Microservices.ExprData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nadeko.Microservices.ExprData> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListExpressionsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListExpressionsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListExpressionsReply other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteExpressionRequest : pb::IMessage<DeleteExpressionRequest> {
    private static readonly pb::MessageParser<DeleteExpressionRequest> _parser = new pb::MessageParser<DeleteExpressionRequest>(() => new DeleteExpressionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteExpressionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteExpressionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteExpressionRequest(DeleteExpressionRequest other) : this() {
      id_ = other.id_;
      guildId_ = other.guildId_;
      isQuote_ = other.isQuote_;
      isAdmin_ = other.isAdmin_;
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteExpressionRequest Clone() {
      return new DeleteExpressionRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 2;
    private ulong guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "isQuote" field.</summary>
    public const int IsQuoteFieldNumber = 3;
    private bool isQuote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsQuote {
      get { return isQuote_; }
      set {
        isQuote_ = value;
      }
    }

    /// <summary>Field number for the "isAdmin" field.</summary>
    public const int IsAdminFieldNumber = 4;
    private bool isAdmin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAdmin {
      get { return isAdmin_; }
      set {
        isAdmin_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 5;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteExpressionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteExpressionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (GuildId != other.GuildId) return false;
      if (IsQuote != other.IsQuote) return false;
      if (IsAdmin != other.IsAdmin) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (GuildId != 0UL) hash ^= GuildId.GetHashCode();
      if (IsQuote != false) hash ^= IsQuote.GetHashCode();
      if (IsAdmin != false) hash ^= IsAdmin.GetHashCode();
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GuildId);
      }
      if (IsQuote != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsQuote);
      }
      if (IsAdmin != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsAdmin);
      }
      if (UserId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (IsQuote != false) {
        size += 1 + 1;
      }
      if (IsAdmin != false) {
        size += 1 + 1;
      }
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteExpressionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.GuildId != 0UL) {
        GuildId = other.GuildId;
      }
      if (other.IsQuote != false) {
        IsQuote = other.IsQuote;
      }
      if (other.IsAdmin != false) {
        IsAdmin = other.IsAdmin;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 24: {
            IsQuote = input.ReadBool();
            break;
          }
          case 32: {
            IsAdmin = input.ReadBool();
            break;
          }
          case 40: {
            UserId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteExpressionReply : pb::IMessage<DeleteExpressionReply> {
    private static readonly pb::MessageParser<DeleteExpressionReply> _parser = new pb::MessageParser<DeleteExpressionReply>(() => new DeleteExpressionReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteExpressionReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteExpressionReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteExpressionReply(DeleteExpressionReply other) : this() {
      success_ = other.success_;
      exprData_ = other.exprData_ != null ? other.exprData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteExpressionReply Clone() {
      return new DeleteExpressionReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "exprData" field.</summary>
    public const int ExprDataFieldNumber = 2;
    private global::Nadeko.Microservices.ExprData exprData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.ExprData ExprData {
      get { return exprData_; }
      set {
        exprData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteExpressionReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteExpressionReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (!object.Equals(ExprData, other.ExprData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (exprData_ != null) hash ^= ExprData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (exprData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ExprData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (exprData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExprData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteExpressionReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.exprData_ != null) {
        if (exprData_ == null) {
          ExprData = new global::Nadeko.Microservices.ExprData();
        }
        ExprData.MergeFrom(other.ExprData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            if (exprData_ == null) {
              ExprData = new global::Nadeko.Microservices.ExprData();
            }
            input.ReadMessage(ExprData);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteAllExpressionsRequest : pb::IMessage<DeleteAllExpressionsRequest> {
    private static readonly pb::MessageParser<DeleteAllExpressionsRequest> _parser = new pb::MessageParser<DeleteAllExpressionsRequest>(() => new DeleteAllExpressionsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteAllExpressionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllExpressionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllExpressionsRequest(DeleteAllExpressionsRequest other) : this() {
      guildId_ = other.guildId_;
      isQuote_ = other.isQuote_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllExpressionsRequest Clone() {
      return new DeleteAllExpressionsRequest(this);
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "isQuote" field.</summary>
    public const int IsQuoteFieldNumber = 2;
    private bool isQuote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsQuote {
      get { return isQuote_; }
      set {
        isQuote_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteAllExpressionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteAllExpressionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GuildId != other.GuildId) return false;
      if (IsQuote != other.IsQuote) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GuildId != 0UL) hash ^= GuildId.GetHashCode();
      if (IsQuote != false) hash ^= IsQuote.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (IsQuote != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsQuote);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (IsQuote != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteAllExpressionsRequest other) {
      if (other == null) {
        return;
      }
      if (other.GuildId != 0UL) {
        GuildId = other.GuildId;
      }
      if (other.IsQuote != false) {
        IsQuote = other.IsQuote;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 16: {
            IsQuote = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteAllExpressionsReply : pb::IMessage<DeleteAllExpressionsReply> {
    private static readonly pb::MessageParser<DeleteAllExpressionsReply> _parser = new pb::MessageParser<DeleteAllExpressionsReply>(() => new DeleteAllExpressionsReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteAllExpressionsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllExpressionsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllExpressionsReply(DeleteAllExpressionsReply other) : this() {
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllExpressionsReply Clone() {
      return new DeleteAllExpressionsReply(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteAllExpressionsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteAllExpressionsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteAllExpressionsReply other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FindExpressionRequest : pb::IMessage<FindExpressionRequest> {
    private static readonly pb::MessageParser<FindExpressionRequest> _parser = new pb::MessageParser<FindExpressionRequest>(() => new FindExpressionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FindExpressionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindExpressionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindExpressionRequest(FindExpressionRequest other) : this() {
      guildId_ = other.guildId_;
      isQuote_ = other.isQuote_;
      trigger_ = other.trigger_;
      response_ = other.response_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindExpressionRequest Clone() {
      return new FindExpressionRequest(this);
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "isQuote" field.</summary>
    public const int IsQuoteFieldNumber = 2;
    private bool isQuote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsQuote {
      get { return isQuote_; }
      set {
        isQuote_ = value;
      }
    }

    /// <summary>Field number for the "trigger" field.</summary>
    public const int TriggerFieldNumber = 3;
    private string trigger_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Trigger {
      get { return trigger_; }
      set {
        trigger_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 4;
    private string response_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Response {
      get { return response_; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FindExpressionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FindExpressionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GuildId != other.GuildId) return false;
      if (IsQuote != other.IsQuote) return false;
      if (Trigger != other.Trigger) return false;
      if (Response != other.Response) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GuildId != 0UL) hash ^= GuildId.GetHashCode();
      if (IsQuote != false) hash ^= IsQuote.GetHashCode();
      if (Trigger.Length != 0) hash ^= Trigger.GetHashCode();
      if (Response.Length != 0) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (IsQuote != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsQuote);
      }
      if (Trigger.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Trigger);
      }
      if (Response.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (IsQuote != false) {
        size += 1 + 1;
      }
      if (Trigger.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Trigger);
      }
      if (Response.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FindExpressionRequest other) {
      if (other == null) {
        return;
      }
      if (other.GuildId != 0UL) {
        GuildId = other.GuildId;
      }
      if (other.IsQuote != false) {
        IsQuote = other.IsQuote;
      }
      if (other.Trigger.Length != 0) {
        Trigger = other.Trigger;
      }
      if (other.Response.Length != 0) {
        Response = other.Response;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 16: {
            IsQuote = input.ReadBool();
            break;
          }
          case 26: {
            Trigger = input.ReadString();
            break;
          }
          case 34: {
            Response = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FindExpressionReply : pb::IMessage<FindExpressionReply> {
    private static readonly pb::MessageParser<FindExpressionReply> _parser = new pb::MessageParser<FindExpressionReply>(() => new FindExpressionReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FindExpressionReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nadeko.Microservices.ExpressionsReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindExpressionReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindExpressionReply(FindExpressionReply other) : this() {
      success_ = other.success_;
      exprData_ = other.exprData_ != null ? other.exprData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindExpressionReply Clone() {
      return new FindExpressionReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "exprData" field.</summary>
    public const int ExprDataFieldNumber = 2;
    private global::Nadeko.Microservices.ExprData exprData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nadeko.Microservices.ExprData ExprData {
      get { return exprData_; }
      set {
        exprData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FindExpressionReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FindExpressionReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (!object.Equals(ExprData, other.ExprData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (exprData_ != null) hash ^= ExprData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (exprData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ExprData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (exprData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExprData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FindExpressionReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.exprData_ != null) {
        if (exprData_ == null) {
          ExprData = new global::Nadeko.Microservices.ExprData();
        }
        ExprData.MergeFrom(other.ExprData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            if (exprData_ == null) {
              ExprData = new global::Nadeko.Microservices.ExprData();
            }
            input.ReadMessage(ExprData);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
